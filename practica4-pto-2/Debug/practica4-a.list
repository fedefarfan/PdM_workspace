
practica4-a.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002ea8  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000130  08003058  08003058  00013058  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003188  08003188  0002007c  2**0
                  CONTENTS
  4 .ARM          00000008  08003188  08003188  00013188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003190  08003190  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003190  08003190  00013190  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003194  08003194  00013194  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  08003198  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002007c  2**0
                  CONTENTS
 10 .bss          00000080  2000007c  2000007c  0002007c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200000fc  200000fc  0002007c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000c15a  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001d14  00000000  00000000  0002c206  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000007d0  00000000  00000000  0002df20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000718  00000000  00000000  0002e6f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026075  00000000  00000000  0002ee08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000b9c9  00000000  00000000  00054e7d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e32d6  00000000  00000000  00060846  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00143b1c  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002598  00000000  00000000  00143b70  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	2000007c 	.word	0x2000007c
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08003040 	.word	0x08003040

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000080 	.word	0x20000080
 80001ec:	08003040 	.word	0x08003040

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002a4:	f000 b96e 	b.w	8000584 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468c      	mov	ip, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	f040 8083 	bne.w	80003d6 <__udivmoddi4+0x116>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4617      	mov	r7, r2
 80002d4:	d947      	bls.n	8000366 <__udivmoddi4+0xa6>
 80002d6:	fab2 f282 	clz	r2, r2
 80002da:	b142      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002dc:	f1c2 0020 	rsb	r0, r2, #32
 80002e0:	fa24 f000 	lsr.w	r0, r4, r0
 80002e4:	4091      	lsls	r1, r2
 80002e6:	4097      	lsls	r7, r2
 80002e8:	ea40 0c01 	orr.w	ip, r0, r1
 80002ec:	4094      	lsls	r4, r2
 80002ee:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002f2:	0c23      	lsrs	r3, r4, #16
 80002f4:	fbbc f6f8 	udiv	r6, ip, r8
 80002f8:	fa1f fe87 	uxth.w	lr, r7
 80002fc:	fb08 c116 	mls	r1, r8, r6, ip
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb06 f10e 	mul.w	r1, r6, lr
 8000308:	4299      	cmp	r1, r3
 800030a:	d909      	bls.n	8000320 <__udivmoddi4+0x60>
 800030c:	18fb      	adds	r3, r7, r3
 800030e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000312:	f080 8119 	bcs.w	8000548 <__udivmoddi4+0x288>
 8000316:	4299      	cmp	r1, r3
 8000318:	f240 8116 	bls.w	8000548 <__udivmoddi4+0x288>
 800031c:	3e02      	subs	r6, #2
 800031e:	443b      	add	r3, r7
 8000320:	1a5b      	subs	r3, r3, r1
 8000322:	b2a4      	uxth	r4, r4
 8000324:	fbb3 f0f8 	udiv	r0, r3, r8
 8000328:	fb08 3310 	mls	r3, r8, r0, r3
 800032c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000330:	fb00 fe0e 	mul.w	lr, r0, lr
 8000334:	45a6      	cmp	lr, r4
 8000336:	d909      	bls.n	800034c <__udivmoddi4+0x8c>
 8000338:	193c      	adds	r4, r7, r4
 800033a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800033e:	f080 8105 	bcs.w	800054c <__udivmoddi4+0x28c>
 8000342:	45a6      	cmp	lr, r4
 8000344:	f240 8102 	bls.w	800054c <__udivmoddi4+0x28c>
 8000348:	3802      	subs	r0, #2
 800034a:	443c      	add	r4, r7
 800034c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000350:	eba4 040e 	sub.w	r4, r4, lr
 8000354:	2600      	movs	r6, #0
 8000356:	b11d      	cbz	r5, 8000360 <__udivmoddi4+0xa0>
 8000358:	40d4      	lsrs	r4, r2
 800035a:	2300      	movs	r3, #0
 800035c:	e9c5 4300 	strd	r4, r3, [r5]
 8000360:	4631      	mov	r1, r6
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	b902      	cbnz	r2, 800036a <__udivmoddi4+0xaa>
 8000368:	deff      	udf	#255	; 0xff
 800036a:	fab2 f282 	clz	r2, r2
 800036e:	2a00      	cmp	r2, #0
 8000370:	d150      	bne.n	8000414 <__udivmoddi4+0x154>
 8000372:	1bcb      	subs	r3, r1, r7
 8000374:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000378:	fa1f f887 	uxth.w	r8, r7
 800037c:	2601      	movs	r6, #1
 800037e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000382:	0c21      	lsrs	r1, r4, #16
 8000384:	fb0e 331c 	mls	r3, lr, ip, r3
 8000388:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800038c:	fb08 f30c 	mul.w	r3, r8, ip
 8000390:	428b      	cmp	r3, r1
 8000392:	d907      	bls.n	80003a4 <__udivmoddi4+0xe4>
 8000394:	1879      	adds	r1, r7, r1
 8000396:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800039a:	d202      	bcs.n	80003a2 <__udivmoddi4+0xe2>
 800039c:	428b      	cmp	r3, r1
 800039e:	f200 80e9 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003a2:	4684      	mov	ip, r0
 80003a4:	1ac9      	subs	r1, r1, r3
 80003a6:	b2a3      	uxth	r3, r4
 80003a8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003ac:	fb0e 1110 	mls	r1, lr, r0, r1
 80003b0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003b4:	fb08 f800 	mul.w	r8, r8, r0
 80003b8:	45a0      	cmp	r8, r4
 80003ba:	d907      	bls.n	80003cc <__udivmoddi4+0x10c>
 80003bc:	193c      	adds	r4, r7, r4
 80003be:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x10a>
 80003c4:	45a0      	cmp	r8, r4
 80003c6:	f200 80d9 	bhi.w	800057c <__udivmoddi4+0x2bc>
 80003ca:	4618      	mov	r0, r3
 80003cc:	eba4 0408 	sub.w	r4, r4, r8
 80003d0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003d4:	e7bf      	b.n	8000356 <__udivmoddi4+0x96>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d909      	bls.n	80003ee <__udivmoddi4+0x12e>
 80003da:	2d00      	cmp	r5, #0
 80003dc:	f000 80b1 	beq.w	8000542 <__udivmoddi4+0x282>
 80003e0:	2600      	movs	r6, #0
 80003e2:	e9c5 0100 	strd	r0, r1, [r5]
 80003e6:	4630      	mov	r0, r6
 80003e8:	4631      	mov	r1, r6
 80003ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ee:	fab3 f683 	clz	r6, r3
 80003f2:	2e00      	cmp	r6, #0
 80003f4:	d14a      	bne.n	800048c <__udivmoddi4+0x1cc>
 80003f6:	428b      	cmp	r3, r1
 80003f8:	d302      	bcc.n	8000400 <__udivmoddi4+0x140>
 80003fa:	4282      	cmp	r2, r0
 80003fc:	f200 80b8 	bhi.w	8000570 <__udivmoddi4+0x2b0>
 8000400:	1a84      	subs	r4, r0, r2
 8000402:	eb61 0103 	sbc.w	r1, r1, r3
 8000406:	2001      	movs	r0, #1
 8000408:	468c      	mov	ip, r1
 800040a:	2d00      	cmp	r5, #0
 800040c:	d0a8      	beq.n	8000360 <__udivmoddi4+0xa0>
 800040e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000412:	e7a5      	b.n	8000360 <__udivmoddi4+0xa0>
 8000414:	f1c2 0320 	rsb	r3, r2, #32
 8000418:	fa20 f603 	lsr.w	r6, r0, r3
 800041c:	4097      	lsls	r7, r2
 800041e:	fa01 f002 	lsl.w	r0, r1, r2
 8000422:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000426:	40d9      	lsrs	r1, r3
 8000428:	4330      	orrs	r0, r6
 800042a:	0c03      	lsrs	r3, r0, #16
 800042c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000430:	fa1f f887 	uxth.w	r8, r7
 8000434:	fb0e 1116 	mls	r1, lr, r6, r1
 8000438:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800043c:	fb06 f108 	mul.w	r1, r6, r8
 8000440:	4299      	cmp	r1, r3
 8000442:	fa04 f402 	lsl.w	r4, r4, r2
 8000446:	d909      	bls.n	800045c <__udivmoddi4+0x19c>
 8000448:	18fb      	adds	r3, r7, r3
 800044a:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 800044e:	f080 808d 	bcs.w	800056c <__udivmoddi4+0x2ac>
 8000452:	4299      	cmp	r1, r3
 8000454:	f240 808a 	bls.w	800056c <__udivmoddi4+0x2ac>
 8000458:	3e02      	subs	r6, #2
 800045a:	443b      	add	r3, r7
 800045c:	1a5b      	subs	r3, r3, r1
 800045e:	b281      	uxth	r1, r0
 8000460:	fbb3 f0fe 	udiv	r0, r3, lr
 8000464:	fb0e 3310 	mls	r3, lr, r0, r3
 8000468:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046c:	fb00 f308 	mul.w	r3, r0, r8
 8000470:	428b      	cmp	r3, r1
 8000472:	d907      	bls.n	8000484 <__udivmoddi4+0x1c4>
 8000474:	1879      	adds	r1, r7, r1
 8000476:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800047a:	d273      	bcs.n	8000564 <__udivmoddi4+0x2a4>
 800047c:	428b      	cmp	r3, r1
 800047e:	d971      	bls.n	8000564 <__udivmoddi4+0x2a4>
 8000480:	3802      	subs	r0, #2
 8000482:	4439      	add	r1, r7
 8000484:	1acb      	subs	r3, r1, r3
 8000486:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800048a:	e778      	b.n	800037e <__udivmoddi4+0xbe>
 800048c:	f1c6 0c20 	rsb	ip, r6, #32
 8000490:	fa03 f406 	lsl.w	r4, r3, r6
 8000494:	fa22 f30c 	lsr.w	r3, r2, ip
 8000498:	431c      	orrs	r4, r3
 800049a:	fa20 f70c 	lsr.w	r7, r0, ip
 800049e:	fa01 f306 	lsl.w	r3, r1, r6
 80004a2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004a6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004aa:	431f      	orrs	r7, r3
 80004ac:	0c3b      	lsrs	r3, r7, #16
 80004ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80004b2:	fa1f f884 	uxth.w	r8, r4
 80004b6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ba:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004be:	fb09 fa08 	mul.w	sl, r9, r8
 80004c2:	458a      	cmp	sl, r1
 80004c4:	fa02 f206 	lsl.w	r2, r2, r6
 80004c8:	fa00 f306 	lsl.w	r3, r0, r6
 80004cc:	d908      	bls.n	80004e0 <__udivmoddi4+0x220>
 80004ce:	1861      	adds	r1, r4, r1
 80004d0:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80004d4:	d248      	bcs.n	8000568 <__udivmoddi4+0x2a8>
 80004d6:	458a      	cmp	sl, r1
 80004d8:	d946      	bls.n	8000568 <__udivmoddi4+0x2a8>
 80004da:	f1a9 0902 	sub.w	r9, r9, #2
 80004de:	4421      	add	r1, r4
 80004e0:	eba1 010a 	sub.w	r1, r1, sl
 80004e4:	b2bf      	uxth	r7, r7
 80004e6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ea:	fb0e 1110 	mls	r1, lr, r0, r1
 80004ee:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004f2:	fb00 f808 	mul.w	r8, r0, r8
 80004f6:	45b8      	cmp	r8, r7
 80004f8:	d907      	bls.n	800050a <__udivmoddi4+0x24a>
 80004fa:	19e7      	adds	r7, r4, r7
 80004fc:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000500:	d22e      	bcs.n	8000560 <__udivmoddi4+0x2a0>
 8000502:	45b8      	cmp	r8, r7
 8000504:	d92c      	bls.n	8000560 <__udivmoddi4+0x2a0>
 8000506:	3802      	subs	r0, #2
 8000508:	4427      	add	r7, r4
 800050a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800050e:	eba7 0708 	sub.w	r7, r7, r8
 8000512:	fba0 8902 	umull	r8, r9, r0, r2
 8000516:	454f      	cmp	r7, r9
 8000518:	46c6      	mov	lr, r8
 800051a:	4649      	mov	r1, r9
 800051c:	d31a      	bcc.n	8000554 <__udivmoddi4+0x294>
 800051e:	d017      	beq.n	8000550 <__udivmoddi4+0x290>
 8000520:	b15d      	cbz	r5, 800053a <__udivmoddi4+0x27a>
 8000522:	ebb3 020e 	subs.w	r2, r3, lr
 8000526:	eb67 0701 	sbc.w	r7, r7, r1
 800052a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800052e:	40f2      	lsrs	r2, r6
 8000530:	ea4c 0202 	orr.w	r2, ip, r2
 8000534:	40f7      	lsrs	r7, r6
 8000536:	e9c5 2700 	strd	r2, r7, [r5]
 800053a:	2600      	movs	r6, #0
 800053c:	4631      	mov	r1, r6
 800053e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e70b      	b.n	8000360 <__udivmoddi4+0xa0>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e9      	b.n	8000320 <__udivmoddi4+0x60>
 800054c:	4618      	mov	r0, r3
 800054e:	e6fd      	b.n	800034c <__udivmoddi4+0x8c>
 8000550:	4543      	cmp	r3, r8
 8000552:	d2e5      	bcs.n	8000520 <__udivmoddi4+0x260>
 8000554:	ebb8 0e02 	subs.w	lr, r8, r2
 8000558:	eb69 0104 	sbc.w	r1, r9, r4
 800055c:	3801      	subs	r0, #1
 800055e:	e7df      	b.n	8000520 <__udivmoddi4+0x260>
 8000560:	4608      	mov	r0, r1
 8000562:	e7d2      	b.n	800050a <__udivmoddi4+0x24a>
 8000564:	4660      	mov	r0, ip
 8000566:	e78d      	b.n	8000484 <__udivmoddi4+0x1c4>
 8000568:	4681      	mov	r9, r0
 800056a:	e7b9      	b.n	80004e0 <__udivmoddi4+0x220>
 800056c:	4666      	mov	r6, ip
 800056e:	e775      	b.n	800045c <__udivmoddi4+0x19c>
 8000570:	4630      	mov	r0, r6
 8000572:	e74a      	b.n	800040a <__udivmoddi4+0x14a>
 8000574:	f1ac 0c02 	sub.w	ip, ip, #2
 8000578:	4439      	add	r1, r7
 800057a:	e713      	b.n	80003a4 <__udivmoddi4+0xe4>
 800057c:	3802      	subs	r0, #2
 800057e:	443c      	add	r4, r7
 8000580:	e724      	b.n	80003cc <__udivmoddi4+0x10c>
 8000582:	bf00      	nop

08000584 <__aeabi_idiv0>:
 8000584:	4770      	bx	lr
 8000586:	bf00      	nop

08000588 <BSP_LED_Init>:
  *     @arg  LED1
  *     @arg  LED2
  *     @arg  LED3
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	b08a      	sub	sp, #40	; 0x28
 800058c:	af00      	add	r7, sp, #0
 800058e:	4603      	mov	r3, r0
 8000590:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 8000592:	79fb      	ldrb	r3, [r7, #7]
 8000594:	2b00      	cmp	r3, #0
 8000596:	d10e      	bne.n	80005b6 <BSP_LED_Init+0x2e>
 8000598:	2300      	movs	r3, #0
 800059a:	613b      	str	r3, [r7, #16]
 800059c:	4b1f      	ldr	r3, [pc, #124]	; (800061c <BSP_LED_Init+0x94>)
 800059e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005a0:	4a1e      	ldr	r2, [pc, #120]	; (800061c <BSP_LED_Init+0x94>)
 80005a2:	f043 0302 	orr.w	r3, r3, #2
 80005a6:	6313      	str	r3, [r2, #48]	; 0x30
 80005a8:	4b1c      	ldr	r3, [pc, #112]	; (800061c <BSP_LED_Init+0x94>)
 80005aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ac:	f003 0302 	and.w	r3, r3, #2
 80005b0:	613b      	str	r3, [r7, #16]
 80005b2:	693b      	ldr	r3, [r7, #16]
 80005b4:	e00d      	b.n	80005d2 <BSP_LED_Init+0x4a>
 80005b6:	2300      	movs	r3, #0
 80005b8:	60fb      	str	r3, [r7, #12]
 80005ba:	4b18      	ldr	r3, [pc, #96]	; (800061c <BSP_LED_Init+0x94>)
 80005bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005be:	4a17      	ldr	r2, [pc, #92]	; (800061c <BSP_LED_Init+0x94>)
 80005c0:	f043 0302 	orr.w	r3, r3, #2
 80005c4:	6313      	str	r3, [r2, #48]	; 0x30
 80005c6:	4b15      	ldr	r3, [pc, #84]	; (800061c <BSP_LED_Init+0x94>)
 80005c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ca:	f003 0302 	and.w	r3, r3, #2
 80005ce:	60fb      	str	r3, [r7, #12]
 80005d0:	68fb      	ldr	r3, [r7, #12]
  
  /* Configure the GPIO_LED pin */
  GPIO_InitStruct.Pin = GPIO_PIN[Led];
 80005d2:	79fb      	ldrb	r3, [r7, #7]
 80005d4:	4a12      	ldr	r2, [pc, #72]	; (8000620 <BSP_LED_Init+0x98>)
 80005d6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80005da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005dc:	2301      	movs	r3, #1
 80005de:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005e0:	2300      	movs	r3, #0
 80005e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 80005e4:	2302      	movs	r3, #2
 80005e6:	623b      	str	r3, [r7, #32]
  
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 80005e8:	79fb      	ldrb	r3, [r7, #7]
 80005ea:	4a0e      	ldr	r2, [pc, #56]	; (8000624 <BSP_LED_Init+0x9c>)
 80005ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80005f0:	f107 0214 	add.w	r2, r7, #20
 80005f4:	4611      	mov	r1, r2
 80005f6:	4618      	mov	r0, r3
 80005f8:	f000 faae 	bl	8000b58 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 80005fc:	79fb      	ldrb	r3, [r7, #7]
 80005fe:	4a09      	ldr	r2, [pc, #36]	; (8000624 <BSP_LED_Init+0x9c>)
 8000600:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000604:	79fb      	ldrb	r3, [r7, #7]
 8000606:	4a06      	ldr	r2, [pc, #24]	; (8000620 <BSP_LED_Init+0x98>)
 8000608:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800060c:	2200      	movs	r2, #0
 800060e:	4619      	mov	r1, r3
 8000610:	f000 fc4e 	bl	8000eb0 <HAL_GPIO_WritePin>
}
 8000614:	bf00      	nop
 8000616:	3728      	adds	r7, #40	; 0x28
 8000618:	46bd      	mov	sp, r7
 800061a:	bd80      	pop	{r7, pc}
 800061c:	40023800 	.word	0x40023800
 8000620:	080030d0 	.word	0x080030d0
 8000624:	20000000 	.word	0x20000000

08000628 <BSP_LED_On>:
  * @param  Led: Specifies the Led to be set on. 
  *   This parameter can be one of following parameters:
  *     @arg LED2
  */
void BSP_LED_On(Led_TypeDef Led)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	b082      	sub	sp, #8
 800062c:	af00      	add	r7, sp, #0
 800062e:	4603      	mov	r3, r0
 8000630:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET); 
 8000632:	79fb      	ldrb	r3, [r7, #7]
 8000634:	4a07      	ldr	r2, [pc, #28]	; (8000654 <BSP_LED_On+0x2c>)
 8000636:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800063a:	79fb      	ldrb	r3, [r7, #7]
 800063c:	4a06      	ldr	r2, [pc, #24]	; (8000658 <BSP_LED_On+0x30>)
 800063e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000642:	2201      	movs	r2, #1
 8000644:	4619      	mov	r1, r3
 8000646:	f000 fc33 	bl	8000eb0 <HAL_GPIO_WritePin>
}
 800064a:	bf00      	nop
 800064c:	3708      	adds	r7, #8
 800064e:	46bd      	mov	sp, r7
 8000650:	bd80      	pop	{r7, pc}
 8000652:	bf00      	nop
 8000654:	20000000 	.word	0x20000000
 8000658:	080030d0 	.word	0x080030d0

0800065c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800065c:	b480      	push	{r7}
 800065e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000660:	4b16      	ldr	r3, [pc, #88]	; (80006bc <SystemInit+0x60>)
 8000662:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000666:	4a15      	ldr	r2, [pc, #84]	; (80006bc <SystemInit+0x60>)
 8000668:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800066c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000670:	4b13      	ldr	r3, [pc, #76]	; (80006c0 <SystemInit+0x64>)
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	4a12      	ldr	r2, [pc, #72]	; (80006c0 <SystemInit+0x64>)
 8000676:	f043 0301 	orr.w	r3, r3, #1
 800067a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800067c:	4b10      	ldr	r3, [pc, #64]	; (80006c0 <SystemInit+0x64>)
 800067e:	2200      	movs	r2, #0
 8000680:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000682:	4b0f      	ldr	r3, [pc, #60]	; (80006c0 <SystemInit+0x64>)
 8000684:	681b      	ldr	r3, [r3, #0]
 8000686:	4a0e      	ldr	r2, [pc, #56]	; (80006c0 <SystemInit+0x64>)
 8000688:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800068c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000690:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8000692:	4b0b      	ldr	r3, [pc, #44]	; (80006c0 <SystemInit+0x64>)
 8000694:	4a0b      	ldr	r2, [pc, #44]	; (80006c4 <SystemInit+0x68>)
 8000696:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000698:	4b09      	ldr	r3, [pc, #36]	; (80006c0 <SystemInit+0x64>)
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	4a08      	ldr	r2, [pc, #32]	; (80006c0 <SystemInit+0x64>)
 800069e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80006a2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80006a4:	4b06      	ldr	r3, [pc, #24]	; (80006c0 <SystemInit+0x64>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80006aa:	4b04      	ldr	r3, [pc, #16]	; (80006bc <SystemInit+0x60>)
 80006ac:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80006b0:	609a      	str	r2, [r3, #8]
#endif
}
 80006b2:	bf00      	nop
 80006b4:	46bd      	mov	sp, r7
 80006b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ba:	4770      	bx	lr
 80006bc:	e000ed00 	.word	0xe000ed00
 80006c0:	40023800 	.word	0x40023800
 80006c4:	24003010 	.word	0x24003010

080006c8 <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 80006c8:	b480      	push	{r7}
 80006ca:	af00      	add	r7, sp, #0
}
 80006cc:	bf00      	nop
 80006ce:	46bd      	mov	sp, r7
 80006d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d4:	4770      	bx	lr

080006d6 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 80006d6:	b480      	push	{r7}
 80006d8:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 80006da:	e7fe      	b.n	80006da <HardFault_Handler+0x4>

080006dc <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 80006dc:	b480      	push	{r7}
 80006de:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 80006e0:	e7fe      	b.n	80006e0 <MemManage_Handler+0x4>

080006e2 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 80006e2:	b480      	push	{r7}
 80006e4:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 80006e6:	e7fe      	b.n	80006e6 <BusFault_Handler+0x4>

080006e8 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 80006e8:	b480      	push	{r7}
 80006ea:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 80006ec:	e7fe      	b.n	80006ec <UsageFault_Handler+0x4>

080006ee <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 80006ee:	b480      	push	{r7}
 80006f0:	af00      	add	r7, sp, #0
}
 80006f2:	bf00      	nop
 80006f4:	46bd      	mov	sp, r7
 80006f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006fa:	4770      	bx	lr

080006fc <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 80006fc:	b480      	push	{r7}
 80006fe:	af00      	add	r7, sp, #0
}
 8000700:	bf00      	nop
 8000702:	46bd      	mov	sp, r7
 8000704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000708:	4770      	bx	lr

0800070a <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 800070a:	b480      	push	{r7}
 800070c:	af00      	add	r7, sp, #0
}
 800070e:	bf00      	nop
 8000710:	46bd      	mov	sp, r7
 8000712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000716:	4770      	bx	lr

08000718 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	af00      	add	r7, sp, #0
    HAL_IncTick();
 800071c:	f000 f8f2 	bl	8000904 <HAL_IncTick>
}
 8000720:	bf00      	nop
 8000722:	bd80      	pop	{r7, pc}

08000724 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b086      	sub	sp, #24
 8000728:	af00      	add	r7, sp, #0
 800072a:	60f8      	str	r0, [r7, #12]
 800072c:	60b9      	str	r1, [r7, #8]
 800072e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000730:	2300      	movs	r3, #0
 8000732:	617b      	str	r3, [r7, #20]
 8000734:	e00a      	b.n	800074c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000736:	f3af 8000 	nop.w
 800073a:	4601      	mov	r1, r0
 800073c:	68bb      	ldr	r3, [r7, #8]
 800073e:	1c5a      	adds	r2, r3, #1
 8000740:	60ba      	str	r2, [r7, #8]
 8000742:	b2ca      	uxtb	r2, r1
 8000744:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000746:	697b      	ldr	r3, [r7, #20]
 8000748:	3301      	adds	r3, #1
 800074a:	617b      	str	r3, [r7, #20]
 800074c:	697a      	ldr	r2, [r7, #20]
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	429a      	cmp	r2, r3
 8000752:	dbf0      	blt.n	8000736 <_read+0x12>
	}

return len;
 8000754:	687b      	ldr	r3, [r7, #4]
}
 8000756:	4618      	mov	r0, r3
 8000758:	3718      	adds	r7, #24
 800075a:	46bd      	mov	sp, r7
 800075c:	bd80      	pop	{r7, pc}

0800075e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800075e:	b580      	push	{r7, lr}
 8000760:	b086      	sub	sp, #24
 8000762:	af00      	add	r7, sp, #0
 8000764:	60f8      	str	r0, [r7, #12]
 8000766:	60b9      	str	r1, [r7, #8]
 8000768:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800076a:	2300      	movs	r3, #0
 800076c:	617b      	str	r3, [r7, #20]
 800076e:	e009      	b.n	8000784 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000770:	68bb      	ldr	r3, [r7, #8]
 8000772:	1c5a      	adds	r2, r3, #1
 8000774:	60ba      	str	r2, [r7, #8]
 8000776:	781b      	ldrb	r3, [r3, #0]
 8000778:	4618      	mov	r0, r3
 800077a:	f001 fc35 	bl	8001fe8 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800077e:	697b      	ldr	r3, [r7, #20]
 8000780:	3301      	adds	r3, #1
 8000782:	617b      	str	r3, [r7, #20]
 8000784:	697a      	ldr	r2, [r7, #20]
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	429a      	cmp	r2, r3
 800078a:	dbf1      	blt.n	8000770 <_write+0x12>
	}
	return len;
 800078c:	687b      	ldr	r3, [r7, #4]
}
 800078e:	4618      	mov	r0, r3
 8000790:	3718      	adds	r7, #24
 8000792:	46bd      	mov	sp, r7
 8000794:	bd80      	pop	{r7, pc}

08000796 <_close>:

int _close(int file)
{
 8000796:	b480      	push	{r7}
 8000798:	b083      	sub	sp, #12
 800079a:	af00      	add	r7, sp, #0
 800079c:	6078      	str	r0, [r7, #4]
	return -1;
 800079e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80007a2:	4618      	mov	r0, r3
 80007a4:	370c      	adds	r7, #12
 80007a6:	46bd      	mov	sp, r7
 80007a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ac:	4770      	bx	lr

080007ae <_fstat>:


int _fstat(int file, struct stat *st)
{
 80007ae:	b480      	push	{r7}
 80007b0:	b083      	sub	sp, #12
 80007b2:	af00      	add	r7, sp, #0
 80007b4:	6078      	str	r0, [r7, #4]
 80007b6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80007b8:	683b      	ldr	r3, [r7, #0]
 80007ba:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80007be:	605a      	str	r2, [r3, #4]
	return 0;
 80007c0:	2300      	movs	r3, #0
}
 80007c2:	4618      	mov	r0, r3
 80007c4:	370c      	adds	r7, #12
 80007c6:	46bd      	mov	sp, r7
 80007c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007cc:	4770      	bx	lr

080007ce <_isatty>:

int _isatty(int file)
{
 80007ce:	b480      	push	{r7}
 80007d0:	b083      	sub	sp, #12
 80007d2:	af00      	add	r7, sp, #0
 80007d4:	6078      	str	r0, [r7, #4]
	return 1;
 80007d6:	2301      	movs	r3, #1
}
 80007d8:	4618      	mov	r0, r3
 80007da:	370c      	adds	r7, #12
 80007dc:	46bd      	mov	sp, r7
 80007de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e2:	4770      	bx	lr

080007e4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80007e4:	b480      	push	{r7}
 80007e6:	b085      	sub	sp, #20
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	60f8      	str	r0, [r7, #12]
 80007ec:	60b9      	str	r1, [r7, #8]
 80007ee:	607a      	str	r2, [r7, #4]
	return 0;
 80007f0:	2300      	movs	r3, #0
}
 80007f2:	4618      	mov	r0, r3
 80007f4:	3714      	adds	r7, #20
 80007f6:	46bd      	mov	sp, r7
 80007f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007fc:	4770      	bx	lr
	...

08000800 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b086      	sub	sp, #24
 8000804:	af00      	add	r7, sp, #0
 8000806:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000808:	4a14      	ldr	r2, [pc, #80]	; (800085c <_sbrk+0x5c>)
 800080a:	4b15      	ldr	r3, [pc, #84]	; (8000860 <_sbrk+0x60>)
 800080c:	1ad3      	subs	r3, r2, r3
 800080e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000810:	697b      	ldr	r3, [r7, #20]
 8000812:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000814:	4b13      	ldr	r3, [pc, #76]	; (8000864 <_sbrk+0x64>)
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	2b00      	cmp	r3, #0
 800081a:	d102      	bne.n	8000822 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800081c:	4b11      	ldr	r3, [pc, #68]	; (8000864 <_sbrk+0x64>)
 800081e:	4a12      	ldr	r2, [pc, #72]	; (8000868 <_sbrk+0x68>)
 8000820:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000822:	4b10      	ldr	r3, [pc, #64]	; (8000864 <_sbrk+0x64>)
 8000824:	681a      	ldr	r2, [r3, #0]
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	4413      	add	r3, r2
 800082a:	693a      	ldr	r2, [r7, #16]
 800082c:	429a      	cmp	r2, r3
 800082e:	d207      	bcs.n	8000840 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000830:	f001 fc7e 	bl	8002130 <__errno>
 8000834:	4603      	mov	r3, r0
 8000836:	220c      	movs	r2, #12
 8000838:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800083a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800083e:	e009      	b.n	8000854 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000840:	4b08      	ldr	r3, [pc, #32]	; (8000864 <_sbrk+0x64>)
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000846:	4b07      	ldr	r3, [pc, #28]	; (8000864 <_sbrk+0x64>)
 8000848:	681a      	ldr	r2, [r3, #0]
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	4413      	add	r3, r2
 800084e:	4a05      	ldr	r2, [pc, #20]	; (8000864 <_sbrk+0x64>)
 8000850:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000852:	68fb      	ldr	r3, [r7, #12]
}
 8000854:	4618      	mov	r0, r3
 8000856:	3718      	adds	r7, #24
 8000858:	46bd      	mov	sp, r7
 800085a:	bd80      	pop	{r7, pc}
 800085c:	20030000 	.word	0x20030000
 8000860:	00000400 	.word	0x00000400
 8000864:	20000098 	.word	0x20000098
 8000868:	20000100 	.word	0x20000100

0800086c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000870:	4b0b      	ldr	r3, [pc, #44]	; (80008a0 <HAL_Init+0x34>)
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	4a0a      	ldr	r2, [pc, #40]	; (80008a0 <HAL_Init+0x34>)
 8000876:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800087a:	6013      	str	r3, [r2, #0]
#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800087c:	4b08      	ldr	r3, [pc, #32]	; (80008a0 <HAL_Init+0x34>)
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	4a07      	ldr	r2, [pc, #28]	; (80008a0 <HAL_Init+0x34>)
 8000882:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000886:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000888:	2003      	movs	r0, #3
 800088a:	f000 f931 	bl	8000af0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800088e:	200f      	movs	r0, #15
 8000890:	f000 f808 	bl	80008a4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000894:	f000 fb25 	bl	8000ee2 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000898:	2300      	movs	r3, #0
}
 800089a:	4618      	mov	r0, r3
 800089c:	bd80      	pop	{r7, pc}
 800089e:	bf00      	nop
 80008a0:	40023c00 	.word	0x40023c00

080008a4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b082      	sub	sp, #8
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80008ac:	4b12      	ldr	r3, [pc, #72]	; (80008f8 <HAL_InitTick+0x54>)
 80008ae:	681a      	ldr	r2, [r3, #0]
 80008b0:	4b12      	ldr	r3, [pc, #72]	; (80008fc <HAL_InitTick+0x58>)
 80008b2:	781b      	ldrb	r3, [r3, #0]
 80008b4:	4619      	mov	r1, r3
 80008b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008ba:	fbb3 f3f1 	udiv	r3, r3, r1
 80008be:	fbb2 f3f3 	udiv	r3, r2, r3
 80008c2:	4618      	mov	r0, r3
 80008c4:	f000 f93b 	bl	8000b3e <HAL_SYSTICK_Config>
 80008c8:	4603      	mov	r3, r0
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d001      	beq.n	80008d2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80008ce:	2301      	movs	r3, #1
 80008d0:	e00e      	b.n	80008f0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	2b0f      	cmp	r3, #15
 80008d6:	d80a      	bhi.n	80008ee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80008d8:	2200      	movs	r2, #0
 80008da:	6879      	ldr	r1, [r7, #4]
 80008dc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80008e0:	f000 f911 	bl	8000b06 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80008e4:	4a06      	ldr	r2, [pc, #24]	; (8000900 <HAL_InitTick+0x5c>)
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80008ea:	2300      	movs	r3, #0
 80008ec:	e000      	b.n	80008f0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80008ee:	2301      	movs	r3, #1
}
 80008f0:	4618      	mov	r0, r3
 80008f2:	3708      	adds	r7, #8
 80008f4:	46bd      	mov	sp, r7
 80008f6:	bd80      	pop	{r7, pc}
 80008f8:	2000000c 	.word	0x2000000c
 80008fc:	20000014 	.word	0x20000014
 8000900:	20000010 	.word	0x20000010

08000904 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000904:	b480      	push	{r7}
 8000906:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000908:	4b06      	ldr	r3, [pc, #24]	; (8000924 <HAL_IncTick+0x20>)
 800090a:	781b      	ldrb	r3, [r3, #0]
 800090c:	461a      	mov	r2, r3
 800090e:	4b06      	ldr	r3, [pc, #24]	; (8000928 <HAL_IncTick+0x24>)
 8000910:	681b      	ldr	r3, [r3, #0]
 8000912:	4413      	add	r3, r2
 8000914:	4a04      	ldr	r2, [pc, #16]	; (8000928 <HAL_IncTick+0x24>)
 8000916:	6013      	str	r3, [r2, #0]
}
 8000918:	bf00      	nop
 800091a:	46bd      	mov	sp, r7
 800091c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000920:	4770      	bx	lr
 8000922:	bf00      	nop
 8000924:	20000014 	.word	0x20000014
 8000928:	200000a4 	.word	0x200000a4

0800092c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800092c:	b480      	push	{r7}
 800092e:	af00      	add	r7, sp, #0
  return uwTick;
 8000930:	4b03      	ldr	r3, [pc, #12]	; (8000940 <HAL_GetTick+0x14>)
 8000932:	681b      	ldr	r3, [r3, #0]
}
 8000934:	4618      	mov	r0, r3
 8000936:	46bd      	mov	sp, r7
 8000938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800093c:	4770      	bx	lr
 800093e:	bf00      	nop
 8000940:	200000a4 	.word	0x200000a4

08000944 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	b084      	sub	sp, #16
 8000948:	af00      	add	r7, sp, #0
 800094a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800094c:	f7ff ffee 	bl	800092c <HAL_GetTick>
 8000950:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000956:	68fb      	ldr	r3, [r7, #12]
 8000958:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800095c:	d005      	beq.n	800096a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800095e:	4b0a      	ldr	r3, [pc, #40]	; (8000988 <HAL_Delay+0x44>)
 8000960:	781b      	ldrb	r3, [r3, #0]
 8000962:	461a      	mov	r2, r3
 8000964:	68fb      	ldr	r3, [r7, #12]
 8000966:	4413      	add	r3, r2
 8000968:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800096a:	bf00      	nop
 800096c:	f7ff ffde 	bl	800092c <HAL_GetTick>
 8000970:	4602      	mov	r2, r0
 8000972:	68bb      	ldr	r3, [r7, #8]
 8000974:	1ad3      	subs	r3, r2, r3
 8000976:	68fa      	ldr	r2, [r7, #12]
 8000978:	429a      	cmp	r2, r3
 800097a:	d8f7      	bhi.n	800096c <HAL_Delay+0x28>
  {
  }
}
 800097c:	bf00      	nop
 800097e:	bf00      	nop
 8000980:	3710      	adds	r7, #16
 8000982:	46bd      	mov	sp, r7
 8000984:	bd80      	pop	{r7, pc}
 8000986:	bf00      	nop
 8000988:	20000014 	.word	0x20000014

0800098c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800098c:	b480      	push	{r7}
 800098e:	b085      	sub	sp, #20
 8000990:	af00      	add	r7, sp, #0
 8000992:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	f003 0307 	and.w	r3, r3, #7
 800099a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800099c:	4b0c      	ldr	r3, [pc, #48]	; (80009d0 <__NVIC_SetPriorityGrouping+0x44>)
 800099e:	68db      	ldr	r3, [r3, #12]
 80009a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80009a2:	68ba      	ldr	r2, [r7, #8]
 80009a4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80009a8:	4013      	ands	r3, r2
 80009aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80009ac:	68fb      	ldr	r3, [r7, #12]
 80009ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80009b0:	68bb      	ldr	r3, [r7, #8]
 80009b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80009b4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80009b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80009be:	4a04      	ldr	r2, [pc, #16]	; (80009d0 <__NVIC_SetPriorityGrouping+0x44>)
 80009c0:	68bb      	ldr	r3, [r7, #8]
 80009c2:	60d3      	str	r3, [r2, #12]
}
 80009c4:	bf00      	nop
 80009c6:	3714      	adds	r7, #20
 80009c8:	46bd      	mov	sp, r7
 80009ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ce:	4770      	bx	lr
 80009d0:	e000ed00 	.word	0xe000ed00

080009d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80009d4:	b480      	push	{r7}
 80009d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80009d8:	4b04      	ldr	r3, [pc, #16]	; (80009ec <__NVIC_GetPriorityGrouping+0x18>)
 80009da:	68db      	ldr	r3, [r3, #12]
 80009dc:	0a1b      	lsrs	r3, r3, #8
 80009de:	f003 0307 	and.w	r3, r3, #7
}
 80009e2:	4618      	mov	r0, r3
 80009e4:	46bd      	mov	sp, r7
 80009e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ea:	4770      	bx	lr
 80009ec:	e000ed00 	.word	0xe000ed00

080009f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80009f0:	b480      	push	{r7}
 80009f2:	b083      	sub	sp, #12
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	4603      	mov	r3, r0
 80009f8:	6039      	str	r1, [r7, #0]
 80009fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	db0a      	blt.n	8000a1a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a04:	683b      	ldr	r3, [r7, #0]
 8000a06:	b2da      	uxtb	r2, r3
 8000a08:	490c      	ldr	r1, [pc, #48]	; (8000a3c <__NVIC_SetPriority+0x4c>)
 8000a0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a0e:	0112      	lsls	r2, r2, #4
 8000a10:	b2d2      	uxtb	r2, r2
 8000a12:	440b      	add	r3, r1
 8000a14:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a18:	e00a      	b.n	8000a30 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a1a:	683b      	ldr	r3, [r7, #0]
 8000a1c:	b2da      	uxtb	r2, r3
 8000a1e:	4908      	ldr	r1, [pc, #32]	; (8000a40 <__NVIC_SetPriority+0x50>)
 8000a20:	79fb      	ldrb	r3, [r7, #7]
 8000a22:	f003 030f 	and.w	r3, r3, #15
 8000a26:	3b04      	subs	r3, #4
 8000a28:	0112      	lsls	r2, r2, #4
 8000a2a:	b2d2      	uxtb	r2, r2
 8000a2c:	440b      	add	r3, r1
 8000a2e:	761a      	strb	r2, [r3, #24]
}
 8000a30:	bf00      	nop
 8000a32:	370c      	adds	r7, #12
 8000a34:	46bd      	mov	sp, r7
 8000a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3a:	4770      	bx	lr
 8000a3c:	e000e100 	.word	0xe000e100
 8000a40:	e000ed00 	.word	0xe000ed00

08000a44 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a44:	b480      	push	{r7}
 8000a46:	b089      	sub	sp, #36	; 0x24
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	60f8      	str	r0, [r7, #12]
 8000a4c:	60b9      	str	r1, [r7, #8]
 8000a4e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a50:	68fb      	ldr	r3, [r7, #12]
 8000a52:	f003 0307 	and.w	r3, r3, #7
 8000a56:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a58:	69fb      	ldr	r3, [r7, #28]
 8000a5a:	f1c3 0307 	rsb	r3, r3, #7
 8000a5e:	2b04      	cmp	r3, #4
 8000a60:	bf28      	it	cs
 8000a62:	2304      	movcs	r3, #4
 8000a64:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a66:	69fb      	ldr	r3, [r7, #28]
 8000a68:	3304      	adds	r3, #4
 8000a6a:	2b06      	cmp	r3, #6
 8000a6c:	d902      	bls.n	8000a74 <NVIC_EncodePriority+0x30>
 8000a6e:	69fb      	ldr	r3, [r7, #28]
 8000a70:	3b03      	subs	r3, #3
 8000a72:	e000      	b.n	8000a76 <NVIC_EncodePriority+0x32>
 8000a74:	2300      	movs	r3, #0
 8000a76:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a78:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000a7c:	69bb      	ldr	r3, [r7, #24]
 8000a7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a82:	43da      	mvns	r2, r3
 8000a84:	68bb      	ldr	r3, [r7, #8]
 8000a86:	401a      	ands	r2, r3
 8000a88:	697b      	ldr	r3, [r7, #20]
 8000a8a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a8c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000a90:	697b      	ldr	r3, [r7, #20]
 8000a92:	fa01 f303 	lsl.w	r3, r1, r3
 8000a96:	43d9      	mvns	r1, r3
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a9c:	4313      	orrs	r3, r2
         );
}
 8000a9e:	4618      	mov	r0, r3
 8000aa0:	3724      	adds	r7, #36	; 0x24
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa8:	4770      	bx	lr
	...

08000aac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b082      	sub	sp, #8
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	3b01      	subs	r3, #1
 8000ab8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000abc:	d301      	bcc.n	8000ac2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000abe:	2301      	movs	r3, #1
 8000ac0:	e00f      	b.n	8000ae2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ac2:	4a0a      	ldr	r2, [pc, #40]	; (8000aec <SysTick_Config+0x40>)
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	3b01      	subs	r3, #1
 8000ac8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000aca:	210f      	movs	r1, #15
 8000acc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000ad0:	f7ff ff8e 	bl	80009f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ad4:	4b05      	ldr	r3, [pc, #20]	; (8000aec <SysTick_Config+0x40>)
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ada:	4b04      	ldr	r3, [pc, #16]	; (8000aec <SysTick_Config+0x40>)
 8000adc:	2207      	movs	r2, #7
 8000ade:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ae0:	2300      	movs	r3, #0
}
 8000ae2:	4618      	mov	r0, r3
 8000ae4:	3708      	adds	r7, #8
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	bd80      	pop	{r7, pc}
 8000aea:	bf00      	nop
 8000aec:	e000e010 	.word	0xe000e010

08000af0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b082      	sub	sp, #8
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000af8:	6878      	ldr	r0, [r7, #4]
 8000afa:	f7ff ff47 	bl	800098c <__NVIC_SetPriorityGrouping>
}
 8000afe:	bf00      	nop
 8000b00:	3708      	adds	r7, #8
 8000b02:	46bd      	mov	sp, r7
 8000b04:	bd80      	pop	{r7, pc}

08000b06 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b06:	b580      	push	{r7, lr}
 8000b08:	b086      	sub	sp, #24
 8000b0a:	af00      	add	r7, sp, #0
 8000b0c:	4603      	mov	r3, r0
 8000b0e:	60b9      	str	r1, [r7, #8]
 8000b10:	607a      	str	r2, [r7, #4]
 8000b12:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000b14:	2300      	movs	r3, #0
 8000b16:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000b18:	f7ff ff5c 	bl	80009d4 <__NVIC_GetPriorityGrouping>
 8000b1c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b1e:	687a      	ldr	r2, [r7, #4]
 8000b20:	68b9      	ldr	r1, [r7, #8]
 8000b22:	6978      	ldr	r0, [r7, #20]
 8000b24:	f7ff ff8e 	bl	8000a44 <NVIC_EncodePriority>
 8000b28:	4602      	mov	r2, r0
 8000b2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b2e:	4611      	mov	r1, r2
 8000b30:	4618      	mov	r0, r3
 8000b32:	f7ff ff5d 	bl	80009f0 <__NVIC_SetPriority>
}
 8000b36:	bf00      	nop
 8000b38:	3718      	adds	r7, #24
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	bd80      	pop	{r7, pc}

08000b3e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b3e:	b580      	push	{r7, lr}
 8000b40:	b082      	sub	sp, #8
 8000b42:	af00      	add	r7, sp, #0
 8000b44:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b46:	6878      	ldr	r0, [r7, #4]
 8000b48:	f7ff ffb0 	bl	8000aac <SysTick_Config>
 8000b4c:	4603      	mov	r3, r0
}
 8000b4e:	4618      	mov	r0, r3
 8000b50:	3708      	adds	r7, #8
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bd80      	pop	{r7, pc}
	...

08000b58 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	b089      	sub	sp, #36	; 0x24
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]
 8000b60:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000b62:	2300      	movs	r3, #0
 8000b64:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000b66:	2300      	movs	r3, #0
 8000b68:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000b6e:	2300      	movs	r3, #0
 8000b70:	61fb      	str	r3, [r7, #28]
 8000b72:	e177      	b.n	8000e64 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000b74:	2201      	movs	r2, #1
 8000b76:	69fb      	ldr	r3, [r7, #28]
 8000b78:	fa02 f303 	lsl.w	r3, r2, r3
 8000b7c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000b7e:	683b      	ldr	r3, [r7, #0]
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	697a      	ldr	r2, [r7, #20]
 8000b84:	4013      	ands	r3, r2
 8000b86:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000b88:	693a      	ldr	r2, [r7, #16]
 8000b8a:	697b      	ldr	r3, [r7, #20]
 8000b8c:	429a      	cmp	r2, r3
 8000b8e:	f040 8166 	bne.w	8000e5e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000b92:	683b      	ldr	r3, [r7, #0]
 8000b94:	685b      	ldr	r3, [r3, #4]
 8000b96:	f003 0303 	and.w	r3, r3, #3
 8000b9a:	2b01      	cmp	r3, #1
 8000b9c:	d005      	beq.n	8000baa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000b9e:	683b      	ldr	r3, [r7, #0]
 8000ba0:	685b      	ldr	r3, [r3, #4]
 8000ba2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000ba6:	2b02      	cmp	r3, #2
 8000ba8:	d130      	bne.n	8000c0c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	689b      	ldr	r3, [r3, #8]
 8000bae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000bb0:	69fb      	ldr	r3, [r7, #28]
 8000bb2:	005b      	lsls	r3, r3, #1
 8000bb4:	2203      	movs	r2, #3
 8000bb6:	fa02 f303 	lsl.w	r3, r2, r3
 8000bba:	43db      	mvns	r3, r3
 8000bbc:	69ba      	ldr	r2, [r7, #24]
 8000bbe:	4013      	ands	r3, r2
 8000bc0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000bc2:	683b      	ldr	r3, [r7, #0]
 8000bc4:	68da      	ldr	r2, [r3, #12]
 8000bc6:	69fb      	ldr	r3, [r7, #28]
 8000bc8:	005b      	lsls	r3, r3, #1
 8000bca:	fa02 f303 	lsl.w	r3, r2, r3
 8000bce:	69ba      	ldr	r2, [r7, #24]
 8000bd0:	4313      	orrs	r3, r2
 8000bd2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	69ba      	ldr	r2, [r7, #24]
 8000bd8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	685b      	ldr	r3, [r3, #4]
 8000bde:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000be0:	2201      	movs	r2, #1
 8000be2:	69fb      	ldr	r3, [r7, #28]
 8000be4:	fa02 f303 	lsl.w	r3, r2, r3
 8000be8:	43db      	mvns	r3, r3
 8000bea:	69ba      	ldr	r2, [r7, #24]
 8000bec:	4013      	ands	r3, r2
 8000bee:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000bf0:	683b      	ldr	r3, [r7, #0]
 8000bf2:	685b      	ldr	r3, [r3, #4]
 8000bf4:	091b      	lsrs	r3, r3, #4
 8000bf6:	f003 0201 	and.w	r2, r3, #1
 8000bfa:	69fb      	ldr	r3, [r7, #28]
 8000bfc:	fa02 f303 	lsl.w	r3, r2, r3
 8000c00:	69ba      	ldr	r2, [r7, #24]
 8000c02:	4313      	orrs	r3, r2
 8000c04:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	69ba      	ldr	r2, [r7, #24]
 8000c0a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000c0c:	683b      	ldr	r3, [r7, #0]
 8000c0e:	685b      	ldr	r3, [r3, #4]
 8000c10:	f003 0303 	and.w	r3, r3, #3
 8000c14:	2b03      	cmp	r3, #3
 8000c16:	d017      	beq.n	8000c48 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	68db      	ldr	r3, [r3, #12]
 8000c1c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000c1e:	69fb      	ldr	r3, [r7, #28]
 8000c20:	005b      	lsls	r3, r3, #1
 8000c22:	2203      	movs	r2, #3
 8000c24:	fa02 f303 	lsl.w	r3, r2, r3
 8000c28:	43db      	mvns	r3, r3
 8000c2a:	69ba      	ldr	r2, [r7, #24]
 8000c2c:	4013      	ands	r3, r2
 8000c2e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000c30:	683b      	ldr	r3, [r7, #0]
 8000c32:	689a      	ldr	r2, [r3, #8]
 8000c34:	69fb      	ldr	r3, [r7, #28]
 8000c36:	005b      	lsls	r3, r3, #1
 8000c38:	fa02 f303 	lsl.w	r3, r2, r3
 8000c3c:	69ba      	ldr	r2, [r7, #24]
 8000c3e:	4313      	orrs	r3, r2
 8000c40:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	69ba      	ldr	r2, [r7, #24]
 8000c46:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c48:	683b      	ldr	r3, [r7, #0]
 8000c4a:	685b      	ldr	r3, [r3, #4]
 8000c4c:	f003 0303 	and.w	r3, r3, #3
 8000c50:	2b02      	cmp	r3, #2
 8000c52:	d123      	bne.n	8000c9c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000c54:	69fb      	ldr	r3, [r7, #28]
 8000c56:	08da      	lsrs	r2, r3, #3
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	3208      	adds	r2, #8
 8000c5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c60:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000c62:	69fb      	ldr	r3, [r7, #28]
 8000c64:	f003 0307 	and.w	r3, r3, #7
 8000c68:	009b      	lsls	r3, r3, #2
 8000c6a:	220f      	movs	r2, #15
 8000c6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c70:	43db      	mvns	r3, r3
 8000c72:	69ba      	ldr	r2, [r7, #24]
 8000c74:	4013      	ands	r3, r2
 8000c76:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000c78:	683b      	ldr	r3, [r7, #0]
 8000c7a:	691a      	ldr	r2, [r3, #16]
 8000c7c:	69fb      	ldr	r3, [r7, #28]
 8000c7e:	f003 0307 	and.w	r3, r3, #7
 8000c82:	009b      	lsls	r3, r3, #2
 8000c84:	fa02 f303 	lsl.w	r3, r2, r3
 8000c88:	69ba      	ldr	r2, [r7, #24]
 8000c8a:	4313      	orrs	r3, r2
 8000c8c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000c8e:	69fb      	ldr	r3, [r7, #28]
 8000c90:	08da      	lsrs	r2, r3, #3
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	3208      	adds	r2, #8
 8000c96:	69b9      	ldr	r1, [r7, #24]
 8000c98:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000ca2:	69fb      	ldr	r3, [r7, #28]
 8000ca4:	005b      	lsls	r3, r3, #1
 8000ca6:	2203      	movs	r2, #3
 8000ca8:	fa02 f303 	lsl.w	r3, r2, r3
 8000cac:	43db      	mvns	r3, r3
 8000cae:	69ba      	ldr	r2, [r7, #24]
 8000cb0:	4013      	ands	r3, r2
 8000cb2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000cb4:	683b      	ldr	r3, [r7, #0]
 8000cb6:	685b      	ldr	r3, [r3, #4]
 8000cb8:	f003 0203 	and.w	r2, r3, #3
 8000cbc:	69fb      	ldr	r3, [r7, #28]
 8000cbe:	005b      	lsls	r3, r3, #1
 8000cc0:	fa02 f303 	lsl.w	r3, r2, r3
 8000cc4:	69ba      	ldr	r2, [r7, #24]
 8000cc6:	4313      	orrs	r3, r2
 8000cc8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	69ba      	ldr	r2, [r7, #24]
 8000cce:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000cd0:	683b      	ldr	r3, [r7, #0]
 8000cd2:	685b      	ldr	r3, [r3, #4]
 8000cd4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	f000 80c0 	beq.w	8000e5e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cde:	2300      	movs	r3, #0
 8000ce0:	60fb      	str	r3, [r7, #12]
 8000ce2:	4b66      	ldr	r3, [pc, #408]	; (8000e7c <HAL_GPIO_Init+0x324>)
 8000ce4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ce6:	4a65      	ldr	r2, [pc, #404]	; (8000e7c <HAL_GPIO_Init+0x324>)
 8000ce8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000cec:	6453      	str	r3, [r2, #68]	; 0x44
 8000cee:	4b63      	ldr	r3, [pc, #396]	; (8000e7c <HAL_GPIO_Init+0x324>)
 8000cf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cf2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000cf6:	60fb      	str	r3, [r7, #12]
 8000cf8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000cfa:	4a61      	ldr	r2, [pc, #388]	; (8000e80 <HAL_GPIO_Init+0x328>)
 8000cfc:	69fb      	ldr	r3, [r7, #28]
 8000cfe:	089b      	lsrs	r3, r3, #2
 8000d00:	3302      	adds	r3, #2
 8000d02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d06:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000d08:	69fb      	ldr	r3, [r7, #28]
 8000d0a:	f003 0303 	and.w	r3, r3, #3
 8000d0e:	009b      	lsls	r3, r3, #2
 8000d10:	220f      	movs	r2, #15
 8000d12:	fa02 f303 	lsl.w	r3, r2, r3
 8000d16:	43db      	mvns	r3, r3
 8000d18:	69ba      	ldr	r2, [r7, #24]
 8000d1a:	4013      	ands	r3, r2
 8000d1c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	4a58      	ldr	r2, [pc, #352]	; (8000e84 <HAL_GPIO_Init+0x32c>)
 8000d22:	4293      	cmp	r3, r2
 8000d24:	d037      	beq.n	8000d96 <HAL_GPIO_Init+0x23e>
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	4a57      	ldr	r2, [pc, #348]	; (8000e88 <HAL_GPIO_Init+0x330>)
 8000d2a:	4293      	cmp	r3, r2
 8000d2c:	d031      	beq.n	8000d92 <HAL_GPIO_Init+0x23a>
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	4a56      	ldr	r2, [pc, #344]	; (8000e8c <HAL_GPIO_Init+0x334>)
 8000d32:	4293      	cmp	r3, r2
 8000d34:	d02b      	beq.n	8000d8e <HAL_GPIO_Init+0x236>
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	4a55      	ldr	r2, [pc, #340]	; (8000e90 <HAL_GPIO_Init+0x338>)
 8000d3a:	4293      	cmp	r3, r2
 8000d3c:	d025      	beq.n	8000d8a <HAL_GPIO_Init+0x232>
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	4a54      	ldr	r2, [pc, #336]	; (8000e94 <HAL_GPIO_Init+0x33c>)
 8000d42:	4293      	cmp	r3, r2
 8000d44:	d01f      	beq.n	8000d86 <HAL_GPIO_Init+0x22e>
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	4a53      	ldr	r2, [pc, #332]	; (8000e98 <HAL_GPIO_Init+0x340>)
 8000d4a:	4293      	cmp	r3, r2
 8000d4c:	d019      	beq.n	8000d82 <HAL_GPIO_Init+0x22a>
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	4a52      	ldr	r2, [pc, #328]	; (8000e9c <HAL_GPIO_Init+0x344>)
 8000d52:	4293      	cmp	r3, r2
 8000d54:	d013      	beq.n	8000d7e <HAL_GPIO_Init+0x226>
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	4a51      	ldr	r2, [pc, #324]	; (8000ea0 <HAL_GPIO_Init+0x348>)
 8000d5a:	4293      	cmp	r3, r2
 8000d5c:	d00d      	beq.n	8000d7a <HAL_GPIO_Init+0x222>
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	4a50      	ldr	r2, [pc, #320]	; (8000ea4 <HAL_GPIO_Init+0x34c>)
 8000d62:	4293      	cmp	r3, r2
 8000d64:	d007      	beq.n	8000d76 <HAL_GPIO_Init+0x21e>
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	4a4f      	ldr	r2, [pc, #316]	; (8000ea8 <HAL_GPIO_Init+0x350>)
 8000d6a:	4293      	cmp	r3, r2
 8000d6c:	d101      	bne.n	8000d72 <HAL_GPIO_Init+0x21a>
 8000d6e:	2309      	movs	r3, #9
 8000d70:	e012      	b.n	8000d98 <HAL_GPIO_Init+0x240>
 8000d72:	230a      	movs	r3, #10
 8000d74:	e010      	b.n	8000d98 <HAL_GPIO_Init+0x240>
 8000d76:	2308      	movs	r3, #8
 8000d78:	e00e      	b.n	8000d98 <HAL_GPIO_Init+0x240>
 8000d7a:	2307      	movs	r3, #7
 8000d7c:	e00c      	b.n	8000d98 <HAL_GPIO_Init+0x240>
 8000d7e:	2306      	movs	r3, #6
 8000d80:	e00a      	b.n	8000d98 <HAL_GPIO_Init+0x240>
 8000d82:	2305      	movs	r3, #5
 8000d84:	e008      	b.n	8000d98 <HAL_GPIO_Init+0x240>
 8000d86:	2304      	movs	r3, #4
 8000d88:	e006      	b.n	8000d98 <HAL_GPIO_Init+0x240>
 8000d8a:	2303      	movs	r3, #3
 8000d8c:	e004      	b.n	8000d98 <HAL_GPIO_Init+0x240>
 8000d8e:	2302      	movs	r3, #2
 8000d90:	e002      	b.n	8000d98 <HAL_GPIO_Init+0x240>
 8000d92:	2301      	movs	r3, #1
 8000d94:	e000      	b.n	8000d98 <HAL_GPIO_Init+0x240>
 8000d96:	2300      	movs	r3, #0
 8000d98:	69fa      	ldr	r2, [r7, #28]
 8000d9a:	f002 0203 	and.w	r2, r2, #3
 8000d9e:	0092      	lsls	r2, r2, #2
 8000da0:	4093      	lsls	r3, r2
 8000da2:	69ba      	ldr	r2, [r7, #24]
 8000da4:	4313      	orrs	r3, r2
 8000da6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000da8:	4935      	ldr	r1, [pc, #212]	; (8000e80 <HAL_GPIO_Init+0x328>)
 8000daa:	69fb      	ldr	r3, [r7, #28]
 8000dac:	089b      	lsrs	r3, r3, #2
 8000dae:	3302      	adds	r3, #2
 8000db0:	69ba      	ldr	r2, [r7, #24]
 8000db2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000db6:	4b3d      	ldr	r3, [pc, #244]	; (8000eac <HAL_GPIO_Init+0x354>)
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000dbc:	693b      	ldr	r3, [r7, #16]
 8000dbe:	43db      	mvns	r3, r3
 8000dc0:	69ba      	ldr	r2, [r7, #24]
 8000dc2:	4013      	ands	r3, r2
 8000dc4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000dc6:	683b      	ldr	r3, [r7, #0]
 8000dc8:	685b      	ldr	r3, [r3, #4]
 8000dca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d003      	beq.n	8000dda <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8000dd2:	69ba      	ldr	r2, [r7, #24]
 8000dd4:	693b      	ldr	r3, [r7, #16]
 8000dd6:	4313      	orrs	r3, r2
 8000dd8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000dda:	4a34      	ldr	r2, [pc, #208]	; (8000eac <HAL_GPIO_Init+0x354>)
 8000ddc:	69bb      	ldr	r3, [r7, #24]
 8000dde:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000de0:	4b32      	ldr	r3, [pc, #200]	; (8000eac <HAL_GPIO_Init+0x354>)
 8000de2:	685b      	ldr	r3, [r3, #4]
 8000de4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000de6:	693b      	ldr	r3, [r7, #16]
 8000de8:	43db      	mvns	r3, r3
 8000dea:	69ba      	ldr	r2, [r7, #24]
 8000dec:	4013      	ands	r3, r2
 8000dee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000df0:	683b      	ldr	r3, [r7, #0]
 8000df2:	685b      	ldr	r3, [r3, #4]
 8000df4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d003      	beq.n	8000e04 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8000dfc:	69ba      	ldr	r2, [r7, #24]
 8000dfe:	693b      	ldr	r3, [r7, #16]
 8000e00:	4313      	orrs	r3, r2
 8000e02:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000e04:	4a29      	ldr	r2, [pc, #164]	; (8000eac <HAL_GPIO_Init+0x354>)
 8000e06:	69bb      	ldr	r3, [r7, #24]
 8000e08:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000e0a:	4b28      	ldr	r3, [pc, #160]	; (8000eac <HAL_GPIO_Init+0x354>)
 8000e0c:	689b      	ldr	r3, [r3, #8]
 8000e0e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e10:	693b      	ldr	r3, [r7, #16]
 8000e12:	43db      	mvns	r3, r3
 8000e14:	69ba      	ldr	r2, [r7, #24]
 8000e16:	4013      	ands	r3, r2
 8000e18:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000e1a:	683b      	ldr	r3, [r7, #0]
 8000e1c:	685b      	ldr	r3, [r3, #4]
 8000e1e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d003      	beq.n	8000e2e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8000e26:	69ba      	ldr	r2, [r7, #24]
 8000e28:	693b      	ldr	r3, [r7, #16]
 8000e2a:	4313      	orrs	r3, r2
 8000e2c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000e2e:	4a1f      	ldr	r2, [pc, #124]	; (8000eac <HAL_GPIO_Init+0x354>)
 8000e30:	69bb      	ldr	r3, [r7, #24]
 8000e32:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000e34:	4b1d      	ldr	r3, [pc, #116]	; (8000eac <HAL_GPIO_Init+0x354>)
 8000e36:	68db      	ldr	r3, [r3, #12]
 8000e38:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e3a:	693b      	ldr	r3, [r7, #16]
 8000e3c:	43db      	mvns	r3, r3
 8000e3e:	69ba      	ldr	r2, [r7, #24]
 8000e40:	4013      	ands	r3, r2
 8000e42:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000e44:	683b      	ldr	r3, [r7, #0]
 8000e46:	685b      	ldr	r3, [r3, #4]
 8000e48:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d003      	beq.n	8000e58 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8000e50:	69ba      	ldr	r2, [r7, #24]
 8000e52:	693b      	ldr	r3, [r7, #16]
 8000e54:	4313      	orrs	r3, r2
 8000e56:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000e58:	4a14      	ldr	r2, [pc, #80]	; (8000eac <HAL_GPIO_Init+0x354>)
 8000e5a:	69bb      	ldr	r3, [r7, #24]
 8000e5c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e5e:	69fb      	ldr	r3, [r7, #28]
 8000e60:	3301      	adds	r3, #1
 8000e62:	61fb      	str	r3, [r7, #28]
 8000e64:	69fb      	ldr	r3, [r7, #28]
 8000e66:	2b0f      	cmp	r3, #15
 8000e68:	f67f ae84 	bls.w	8000b74 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000e6c:	bf00      	nop
 8000e6e:	bf00      	nop
 8000e70:	3724      	adds	r7, #36	; 0x24
 8000e72:	46bd      	mov	sp, r7
 8000e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e78:	4770      	bx	lr
 8000e7a:	bf00      	nop
 8000e7c:	40023800 	.word	0x40023800
 8000e80:	40013800 	.word	0x40013800
 8000e84:	40020000 	.word	0x40020000
 8000e88:	40020400 	.word	0x40020400
 8000e8c:	40020800 	.word	0x40020800
 8000e90:	40020c00 	.word	0x40020c00
 8000e94:	40021000 	.word	0x40021000
 8000e98:	40021400 	.word	0x40021400
 8000e9c:	40021800 	.word	0x40021800
 8000ea0:	40021c00 	.word	0x40021c00
 8000ea4:	40022000 	.word	0x40022000
 8000ea8:	40022400 	.word	0x40022400
 8000eac:	40013c00 	.word	0x40013c00

08000eb0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	b083      	sub	sp, #12
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
 8000eb8:	460b      	mov	r3, r1
 8000eba:	807b      	strh	r3, [r7, #2]
 8000ebc:	4613      	mov	r3, r2
 8000ebe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000ec0:	787b      	ldrb	r3, [r7, #1]
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d003      	beq.n	8000ece <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000ec6:	887a      	ldrh	r2, [r7, #2]
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000ecc:	e003      	b.n	8000ed6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000ece:	887b      	ldrh	r3, [r7, #2]
 8000ed0:	041a      	lsls	r2, r3, #16
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	619a      	str	r2, [r3, #24]
}
 8000ed6:	bf00      	nop
 8000ed8:	370c      	adds	r7, #12
 8000eda:	46bd      	mov	sp, r7
 8000edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee0:	4770      	bx	lr

08000ee2 <HAL_MspInit>:
  * @note   This function is called from HAL_Init() function to perform system
  *         level initialization (GPIOs, clock, DMA, interrupt).
  * @retval None
  */
void HAL_MspInit(void)
{
 8000ee2:	b480      	push	{r7}
 8000ee4:	af00      	add	r7, sp, #0

}
 8000ee6:	bf00      	nop
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eee:	4770      	bx	lr

08000ef0 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b082      	sub	sp, #8
 8000ef4:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8000efa:	2300      	movs	r3, #0
 8000efc:	603b      	str	r3, [r7, #0]
 8000efe:	4b20      	ldr	r3, [pc, #128]	; (8000f80 <HAL_PWREx_EnableOverDrive+0x90>)
 8000f00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f02:	4a1f      	ldr	r2, [pc, #124]	; (8000f80 <HAL_PWREx_EnableOverDrive+0x90>)
 8000f04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f08:	6413      	str	r3, [r2, #64]	; 0x40
 8000f0a:	4b1d      	ldr	r3, [pc, #116]	; (8000f80 <HAL_PWREx_EnableOverDrive+0x90>)
 8000f0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f12:	603b      	str	r3, [r7, #0]
 8000f14:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8000f16:	4b1b      	ldr	r3, [pc, #108]	; (8000f84 <HAL_PWREx_EnableOverDrive+0x94>)
 8000f18:	2201      	movs	r2, #1
 8000f1a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000f1c:	f7ff fd06 	bl	800092c <HAL_GetTick>
 8000f20:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8000f22:	e009      	b.n	8000f38 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8000f24:	f7ff fd02 	bl	800092c <HAL_GetTick>
 8000f28:	4602      	mov	r2, r0
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	1ad3      	subs	r3, r2, r3
 8000f2e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000f32:	d901      	bls.n	8000f38 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8000f34:	2303      	movs	r3, #3
 8000f36:	e01f      	b.n	8000f78 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8000f38:	4b13      	ldr	r3, [pc, #76]	; (8000f88 <HAL_PWREx_EnableOverDrive+0x98>)
 8000f3a:	685b      	ldr	r3, [r3, #4]
 8000f3c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f44:	d1ee      	bne.n	8000f24 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8000f46:	4b11      	ldr	r3, [pc, #68]	; (8000f8c <HAL_PWREx_EnableOverDrive+0x9c>)
 8000f48:	2201      	movs	r2, #1
 8000f4a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000f4c:	f7ff fcee 	bl	800092c <HAL_GetTick>
 8000f50:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8000f52:	e009      	b.n	8000f68 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8000f54:	f7ff fcea 	bl	800092c <HAL_GetTick>
 8000f58:	4602      	mov	r2, r0
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	1ad3      	subs	r3, r2, r3
 8000f5e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000f62:	d901      	bls.n	8000f68 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8000f64:	2303      	movs	r3, #3
 8000f66:	e007      	b.n	8000f78 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8000f68:	4b07      	ldr	r3, [pc, #28]	; (8000f88 <HAL_PWREx_EnableOverDrive+0x98>)
 8000f6a:	685b      	ldr	r3, [r3, #4]
 8000f6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f70:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8000f74:	d1ee      	bne.n	8000f54 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8000f76:	2300      	movs	r3, #0
}
 8000f78:	4618      	mov	r0, r3
 8000f7a:	3708      	adds	r7, #8
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	bd80      	pop	{r7, pc}
 8000f80:	40023800 	.word	0x40023800
 8000f84:	420e0040 	.word	0x420e0040
 8000f88:	40007000 	.word	0x40007000
 8000f8c:	420e0044 	.word	0x420e0044

08000f90 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b086      	sub	sp, #24
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d101      	bne.n	8000fa2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000f9e:	2301      	movs	r3, #1
 8000fa0:	e264      	b.n	800146c <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	f003 0301 	and.w	r3, r3, #1
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d075      	beq.n	800109a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000fae:	4ba3      	ldr	r3, [pc, #652]	; (800123c <HAL_RCC_OscConfig+0x2ac>)
 8000fb0:	689b      	ldr	r3, [r3, #8]
 8000fb2:	f003 030c 	and.w	r3, r3, #12
 8000fb6:	2b04      	cmp	r3, #4
 8000fb8:	d00c      	beq.n	8000fd4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000fba:	4ba0      	ldr	r3, [pc, #640]	; (800123c <HAL_RCC_OscConfig+0x2ac>)
 8000fbc:	689b      	ldr	r3, [r3, #8]
 8000fbe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000fc2:	2b08      	cmp	r3, #8
 8000fc4:	d112      	bne.n	8000fec <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000fc6:	4b9d      	ldr	r3, [pc, #628]	; (800123c <HAL_RCC_OscConfig+0x2ac>)
 8000fc8:	685b      	ldr	r3, [r3, #4]
 8000fca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000fce:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8000fd2:	d10b      	bne.n	8000fec <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000fd4:	4b99      	ldr	r3, [pc, #612]	; (800123c <HAL_RCC_OscConfig+0x2ac>)
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d05b      	beq.n	8001098 <HAL_RCC_OscConfig+0x108>
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	685b      	ldr	r3, [r3, #4]
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d157      	bne.n	8001098 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8000fe8:	2301      	movs	r3, #1
 8000fea:	e23f      	b.n	800146c <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	685b      	ldr	r3, [r3, #4]
 8000ff0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000ff4:	d106      	bne.n	8001004 <HAL_RCC_OscConfig+0x74>
 8000ff6:	4b91      	ldr	r3, [pc, #580]	; (800123c <HAL_RCC_OscConfig+0x2ac>)
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	4a90      	ldr	r2, [pc, #576]	; (800123c <HAL_RCC_OscConfig+0x2ac>)
 8000ffc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001000:	6013      	str	r3, [r2, #0]
 8001002:	e01d      	b.n	8001040 <HAL_RCC_OscConfig+0xb0>
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	685b      	ldr	r3, [r3, #4]
 8001008:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800100c:	d10c      	bne.n	8001028 <HAL_RCC_OscConfig+0x98>
 800100e:	4b8b      	ldr	r3, [pc, #556]	; (800123c <HAL_RCC_OscConfig+0x2ac>)
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	4a8a      	ldr	r2, [pc, #552]	; (800123c <HAL_RCC_OscConfig+0x2ac>)
 8001014:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001018:	6013      	str	r3, [r2, #0]
 800101a:	4b88      	ldr	r3, [pc, #544]	; (800123c <HAL_RCC_OscConfig+0x2ac>)
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	4a87      	ldr	r2, [pc, #540]	; (800123c <HAL_RCC_OscConfig+0x2ac>)
 8001020:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001024:	6013      	str	r3, [r2, #0]
 8001026:	e00b      	b.n	8001040 <HAL_RCC_OscConfig+0xb0>
 8001028:	4b84      	ldr	r3, [pc, #528]	; (800123c <HAL_RCC_OscConfig+0x2ac>)
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	4a83      	ldr	r2, [pc, #524]	; (800123c <HAL_RCC_OscConfig+0x2ac>)
 800102e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001032:	6013      	str	r3, [r2, #0]
 8001034:	4b81      	ldr	r3, [pc, #516]	; (800123c <HAL_RCC_OscConfig+0x2ac>)
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	4a80      	ldr	r2, [pc, #512]	; (800123c <HAL_RCC_OscConfig+0x2ac>)
 800103a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800103e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	685b      	ldr	r3, [r3, #4]
 8001044:	2b00      	cmp	r3, #0
 8001046:	d013      	beq.n	8001070 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001048:	f7ff fc70 	bl	800092c <HAL_GetTick>
 800104c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800104e:	e008      	b.n	8001062 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001050:	f7ff fc6c 	bl	800092c <HAL_GetTick>
 8001054:	4602      	mov	r2, r0
 8001056:	693b      	ldr	r3, [r7, #16]
 8001058:	1ad3      	subs	r3, r2, r3
 800105a:	2b64      	cmp	r3, #100	; 0x64
 800105c:	d901      	bls.n	8001062 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800105e:	2303      	movs	r3, #3
 8001060:	e204      	b.n	800146c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001062:	4b76      	ldr	r3, [pc, #472]	; (800123c <HAL_RCC_OscConfig+0x2ac>)
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800106a:	2b00      	cmp	r3, #0
 800106c:	d0f0      	beq.n	8001050 <HAL_RCC_OscConfig+0xc0>
 800106e:	e014      	b.n	800109a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001070:	f7ff fc5c 	bl	800092c <HAL_GetTick>
 8001074:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001076:	e008      	b.n	800108a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001078:	f7ff fc58 	bl	800092c <HAL_GetTick>
 800107c:	4602      	mov	r2, r0
 800107e:	693b      	ldr	r3, [r7, #16]
 8001080:	1ad3      	subs	r3, r2, r3
 8001082:	2b64      	cmp	r3, #100	; 0x64
 8001084:	d901      	bls.n	800108a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001086:	2303      	movs	r3, #3
 8001088:	e1f0      	b.n	800146c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800108a:	4b6c      	ldr	r3, [pc, #432]	; (800123c <HAL_RCC_OscConfig+0x2ac>)
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001092:	2b00      	cmp	r3, #0
 8001094:	d1f0      	bne.n	8001078 <HAL_RCC_OscConfig+0xe8>
 8001096:	e000      	b.n	800109a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001098:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	f003 0302 	and.w	r3, r3, #2
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d063      	beq.n	800116e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80010a6:	4b65      	ldr	r3, [pc, #404]	; (800123c <HAL_RCC_OscConfig+0x2ac>)
 80010a8:	689b      	ldr	r3, [r3, #8]
 80010aa:	f003 030c 	and.w	r3, r3, #12
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d00b      	beq.n	80010ca <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80010b2:	4b62      	ldr	r3, [pc, #392]	; (800123c <HAL_RCC_OscConfig+0x2ac>)
 80010b4:	689b      	ldr	r3, [r3, #8]
 80010b6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80010ba:	2b08      	cmp	r3, #8
 80010bc:	d11c      	bne.n	80010f8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80010be:	4b5f      	ldr	r3, [pc, #380]	; (800123c <HAL_RCC_OscConfig+0x2ac>)
 80010c0:	685b      	ldr	r3, [r3, #4]
 80010c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d116      	bne.n	80010f8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80010ca:	4b5c      	ldr	r3, [pc, #368]	; (800123c <HAL_RCC_OscConfig+0x2ac>)
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	f003 0302 	and.w	r3, r3, #2
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d005      	beq.n	80010e2 <HAL_RCC_OscConfig+0x152>
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	68db      	ldr	r3, [r3, #12]
 80010da:	2b01      	cmp	r3, #1
 80010dc:	d001      	beq.n	80010e2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80010de:	2301      	movs	r3, #1
 80010e0:	e1c4      	b.n	800146c <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010e2:	4b56      	ldr	r3, [pc, #344]	; (800123c <HAL_RCC_OscConfig+0x2ac>)
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	691b      	ldr	r3, [r3, #16]
 80010ee:	00db      	lsls	r3, r3, #3
 80010f0:	4952      	ldr	r1, [pc, #328]	; (800123c <HAL_RCC_OscConfig+0x2ac>)
 80010f2:	4313      	orrs	r3, r2
 80010f4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80010f6:	e03a      	b.n	800116e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	68db      	ldr	r3, [r3, #12]
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d020      	beq.n	8001142 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001100:	4b4f      	ldr	r3, [pc, #316]	; (8001240 <HAL_RCC_OscConfig+0x2b0>)
 8001102:	2201      	movs	r2, #1
 8001104:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001106:	f7ff fc11 	bl	800092c <HAL_GetTick>
 800110a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800110c:	e008      	b.n	8001120 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800110e:	f7ff fc0d 	bl	800092c <HAL_GetTick>
 8001112:	4602      	mov	r2, r0
 8001114:	693b      	ldr	r3, [r7, #16]
 8001116:	1ad3      	subs	r3, r2, r3
 8001118:	2b02      	cmp	r3, #2
 800111a:	d901      	bls.n	8001120 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800111c:	2303      	movs	r3, #3
 800111e:	e1a5      	b.n	800146c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001120:	4b46      	ldr	r3, [pc, #280]	; (800123c <HAL_RCC_OscConfig+0x2ac>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	f003 0302 	and.w	r3, r3, #2
 8001128:	2b00      	cmp	r3, #0
 800112a:	d0f0      	beq.n	800110e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800112c:	4b43      	ldr	r3, [pc, #268]	; (800123c <HAL_RCC_OscConfig+0x2ac>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	691b      	ldr	r3, [r3, #16]
 8001138:	00db      	lsls	r3, r3, #3
 800113a:	4940      	ldr	r1, [pc, #256]	; (800123c <HAL_RCC_OscConfig+0x2ac>)
 800113c:	4313      	orrs	r3, r2
 800113e:	600b      	str	r3, [r1, #0]
 8001140:	e015      	b.n	800116e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001142:	4b3f      	ldr	r3, [pc, #252]	; (8001240 <HAL_RCC_OscConfig+0x2b0>)
 8001144:	2200      	movs	r2, #0
 8001146:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001148:	f7ff fbf0 	bl	800092c <HAL_GetTick>
 800114c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800114e:	e008      	b.n	8001162 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001150:	f7ff fbec 	bl	800092c <HAL_GetTick>
 8001154:	4602      	mov	r2, r0
 8001156:	693b      	ldr	r3, [r7, #16]
 8001158:	1ad3      	subs	r3, r2, r3
 800115a:	2b02      	cmp	r3, #2
 800115c:	d901      	bls.n	8001162 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800115e:	2303      	movs	r3, #3
 8001160:	e184      	b.n	800146c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001162:	4b36      	ldr	r3, [pc, #216]	; (800123c <HAL_RCC_OscConfig+0x2ac>)
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	f003 0302 	and.w	r3, r3, #2
 800116a:	2b00      	cmp	r3, #0
 800116c:	d1f0      	bne.n	8001150 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	f003 0308 	and.w	r3, r3, #8
 8001176:	2b00      	cmp	r3, #0
 8001178:	d030      	beq.n	80011dc <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	695b      	ldr	r3, [r3, #20]
 800117e:	2b00      	cmp	r3, #0
 8001180:	d016      	beq.n	80011b0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001182:	4b30      	ldr	r3, [pc, #192]	; (8001244 <HAL_RCC_OscConfig+0x2b4>)
 8001184:	2201      	movs	r2, #1
 8001186:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001188:	f7ff fbd0 	bl	800092c <HAL_GetTick>
 800118c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800118e:	e008      	b.n	80011a2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001190:	f7ff fbcc 	bl	800092c <HAL_GetTick>
 8001194:	4602      	mov	r2, r0
 8001196:	693b      	ldr	r3, [r7, #16]
 8001198:	1ad3      	subs	r3, r2, r3
 800119a:	2b02      	cmp	r3, #2
 800119c:	d901      	bls.n	80011a2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800119e:	2303      	movs	r3, #3
 80011a0:	e164      	b.n	800146c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80011a2:	4b26      	ldr	r3, [pc, #152]	; (800123c <HAL_RCC_OscConfig+0x2ac>)
 80011a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80011a6:	f003 0302 	and.w	r3, r3, #2
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d0f0      	beq.n	8001190 <HAL_RCC_OscConfig+0x200>
 80011ae:	e015      	b.n	80011dc <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80011b0:	4b24      	ldr	r3, [pc, #144]	; (8001244 <HAL_RCC_OscConfig+0x2b4>)
 80011b2:	2200      	movs	r2, #0
 80011b4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011b6:	f7ff fbb9 	bl	800092c <HAL_GetTick>
 80011ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80011bc:	e008      	b.n	80011d0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80011be:	f7ff fbb5 	bl	800092c <HAL_GetTick>
 80011c2:	4602      	mov	r2, r0
 80011c4:	693b      	ldr	r3, [r7, #16]
 80011c6:	1ad3      	subs	r3, r2, r3
 80011c8:	2b02      	cmp	r3, #2
 80011ca:	d901      	bls.n	80011d0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80011cc:	2303      	movs	r3, #3
 80011ce:	e14d      	b.n	800146c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80011d0:	4b1a      	ldr	r3, [pc, #104]	; (800123c <HAL_RCC_OscConfig+0x2ac>)
 80011d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80011d4:	f003 0302 	and.w	r3, r3, #2
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d1f0      	bne.n	80011be <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	f003 0304 	and.w	r3, r3, #4
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	f000 80a0 	beq.w	800132a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80011ea:	2300      	movs	r3, #0
 80011ec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80011ee:	4b13      	ldr	r3, [pc, #76]	; (800123c <HAL_RCC_OscConfig+0x2ac>)
 80011f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d10f      	bne.n	800121a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80011fa:	2300      	movs	r3, #0
 80011fc:	60bb      	str	r3, [r7, #8]
 80011fe:	4b0f      	ldr	r3, [pc, #60]	; (800123c <HAL_RCC_OscConfig+0x2ac>)
 8001200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001202:	4a0e      	ldr	r2, [pc, #56]	; (800123c <HAL_RCC_OscConfig+0x2ac>)
 8001204:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001208:	6413      	str	r3, [r2, #64]	; 0x40
 800120a:	4b0c      	ldr	r3, [pc, #48]	; (800123c <HAL_RCC_OscConfig+0x2ac>)
 800120c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800120e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001212:	60bb      	str	r3, [r7, #8]
 8001214:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001216:	2301      	movs	r3, #1
 8001218:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800121a:	4b0b      	ldr	r3, [pc, #44]	; (8001248 <HAL_RCC_OscConfig+0x2b8>)
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001222:	2b00      	cmp	r3, #0
 8001224:	d121      	bne.n	800126a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001226:	4b08      	ldr	r3, [pc, #32]	; (8001248 <HAL_RCC_OscConfig+0x2b8>)
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	4a07      	ldr	r2, [pc, #28]	; (8001248 <HAL_RCC_OscConfig+0x2b8>)
 800122c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001230:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001232:	f7ff fb7b 	bl	800092c <HAL_GetTick>
 8001236:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001238:	e011      	b.n	800125e <HAL_RCC_OscConfig+0x2ce>
 800123a:	bf00      	nop
 800123c:	40023800 	.word	0x40023800
 8001240:	42470000 	.word	0x42470000
 8001244:	42470e80 	.word	0x42470e80
 8001248:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800124c:	f7ff fb6e 	bl	800092c <HAL_GetTick>
 8001250:	4602      	mov	r2, r0
 8001252:	693b      	ldr	r3, [r7, #16]
 8001254:	1ad3      	subs	r3, r2, r3
 8001256:	2b02      	cmp	r3, #2
 8001258:	d901      	bls.n	800125e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800125a:	2303      	movs	r3, #3
 800125c:	e106      	b.n	800146c <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800125e:	4b85      	ldr	r3, [pc, #532]	; (8001474 <HAL_RCC_OscConfig+0x4e4>)
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001266:	2b00      	cmp	r3, #0
 8001268:	d0f0      	beq.n	800124c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	689b      	ldr	r3, [r3, #8]
 800126e:	2b01      	cmp	r3, #1
 8001270:	d106      	bne.n	8001280 <HAL_RCC_OscConfig+0x2f0>
 8001272:	4b81      	ldr	r3, [pc, #516]	; (8001478 <HAL_RCC_OscConfig+0x4e8>)
 8001274:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001276:	4a80      	ldr	r2, [pc, #512]	; (8001478 <HAL_RCC_OscConfig+0x4e8>)
 8001278:	f043 0301 	orr.w	r3, r3, #1
 800127c:	6713      	str	r3, [r2, #112]	; 0x70
 800127e:	e01c      	b.n	80012ba <HAL_RCC_OscConfig+0x32a>
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	689b      	ldr	r3, [r3, #8]
 8001284:	2b05      	cmp	r3, #5
 8001286:	d10c      	bne.n	80012a2 <HAL_RCC_OscConfig+0x312>
 8001288:	4b7b      	ldr	r3, [pc, #492]	; (8001478 <HAL_RCC_OscConfig+0x4e8>)
 800128a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800128c:	4a7a      	ldr	r2, [pc, #488]	; (8001478 <HAL_RCC_OscConfig+0x4e8>)
 800128e:	f043 0304 	orr.w	r3, r3, #4
 8001292:	6713      	str	r3, [r2, #112]	; 0x70
 8001294:	4b78      	ldr	r3, [pc, #480]	; (8001478 <HAL_RCC_OscConfig+0x4e8>)
 8001296:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001298:	4a77      	ldr	r2, [pc, #476]	; (8001478 <HAL_RCC_OscConfig+0x4e8>)
 800129a:	f043 0301 	orr.w	r3, r3, #1
 800129e:	6713      	str	r3, [r2, #112]	; 0x70
 80012a0:	e00b      	b.n	80012ba <HAL_RCC_OscConfig+0x32a>
 80012a2:	4b75      	ldr	r3, [pc, #468]	; (8001478 <HAL_RCC_OscConfig+0x4e8>)
 80012a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80012a6:	4a74      	ldr	r2, [pc, #464]	; (8001478 <HAL_RCC_OscConfig+0x4e8>)
 80012a8:	f023 0301 	bic.w	r3, r3, #1
 80012ac:	6713      	str	r3, [r2, #112]	; 0x70
 80012ae:	4b72      	ldr	r3, [pc, #456]	; (8001478 <HAL_RCC_OscConfig+0x4e8>)
 80012b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80012b2:	4a71      	ldr	r2, [pc, #452]	; (8001478 <HAL_RCC_OscConfig+0x4e8>)
 80012b4:	f023 0304 	bic.w	r3, r3, #4
 80012b8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	689b      	ldr	r3, [r3, #8]
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d015      	beq.n	80012ee <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80012c2:	f7ff fb33 	bl	800092c <HAL_GetTick>
 80012c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80012c8:	e00a      	b.n	80012e0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80012ca:	f7ff fb2f 	bl	800092c <HAL_GetTick>
 80012ce:	4602      	mov	r2, r0
 80012d0:	693b      	ldr	r3, [r7, #16]
 80012d2:	1ad3      	subs	r3, r2, r3
 80012d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80012d8:	4293      	cmp	r3, r2
 80012da:	d901      	bls.n	80012e0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80012dc:	2303      	movs	r3, #3
 80012de:	e0c5      	b.n	800146c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80012e0:	4b65      	ldr	r3, [pc, #404]	; (8001478 <HAL_RCC_OscConfig+0x4e8>)
 80012e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80012e4:	f003 0302 	and.w	r3, r3, #2
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d0ee      	beq.n	80012ca <HAL_RCC_OscConfig+0x33a>
 80012ec:	e014      	b.n	8001318 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012ee:	f7ff fb1d 	bl	800092c <HAL_GetTick>
 80012f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80012f4:	e00a      	b.n	800130c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80012f6:	f7ff fb19 	bl	800092c <HAL_GetTick>
 80012fa:	4602      	mov	r2, r0
 80012fc:	693b      	ldr	r3, [r7, #16]
 80012fe:	1ad3      	subs	r3, r2, r3
 8001300:	f241 3288 	movw	r2, #5000	; 0x1388
 8001304:	4293      	cmp	r3, r2
 8001306:	d901      	bls.n	800130c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001308:	2303      	movs	r3, #3
 800130a:	e0af      	b.n	800146c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800130c:	4b5a      	ldr	r3, [pc, #360]	; (8001478 <HAL_RCC_OscConfig+0x4e8>)
 800130e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001310:	f003 0302 	and.w	r3, r3, #2
 8001314:	2b00      	cmp	r3, #0
 8001316:	d1ee      	bne.n	80012f6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001318:	7dfb      	ldrb	r3, [r7, #23]
 800131a:	2b01      	cmp	r3, #1
 800131c:	d105      	bne.n	800132a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800131e:	4b56      	ldr	r3, [pc, #344]	; (8001478 <HAL_RCC_OscConfig+0x4e8>)
 8001320:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001322:	4a55      	ldr	r2, [pc, #340]	; (8001478 <HAL_RCC_OscConfig+0x4e8>)
 8001324:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001328:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	699b      	ldr	r3, [r3, #24]
 800132e:	2b00      	cmp	r3, #0
 8001330:	f000 809b 	beq.w	800146a <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001334:	4b50      	ldr	r3, [pc, #320]	; (8001478 <HAL_RCC_OscConfig+0x4e8>)
 8001336:	689b      	ldr	r3, [r3, #8]
 8001338:	f003 030c 	and.w	r3, r3, #12
 800133c:	2b08      	cmp	r3, #8
 800133e:	d05c      	beq.n	80013fa <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	699b      	ldr	r3, [r3, #24]
 8001344:	2b02      	cmp	r3, #2
 8001346:	d141      	bne.n	80013cc <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001348:	4b4c      	ldr	r3, [pc, #304]	; (800147c <HAL_RCC_OscConfig+0x4ec>)
 800134a:	2200      	movs	r2, #0
 800134c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800134e:	f7ff faed 	bl	800092c <HAL_GetTick>
 8001352:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001354:	e008      	b.n	8001368 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001356:	f7ff fae9 	bl	800092c <HAL_GetTick>
 800135a:	4602      	mov	r2, r0
 800135c:	693b      	ldr	r3, [r7, #16]
 800135e:	1ad3      	subs	r3, r2, r3
 8001360:	2b02      	cmp	r3, #2
 8001362:	d901      	bls.n	8001368 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001364:	2303      	movs	r3, #3
 8001366:	e081      	b.n	800146c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001368:	4b43      	ldr	r3, [pc, #268]	; (8001478 <HAL_RCC_OscConfig+0x4e8>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001370:	2b00      	cmp	r3, #0
 8001372:	d1f0      	bne.n	8001356 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	69da      	ldr	r2, [r3, #28]
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	6a1b      	ldr	r3, [r3, #32]
 800137c:	431a      	orrs	r2, r3
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001382:	019b      	lsls	r3, r3, #6
 8001384:	431a      	orrs	r2, r3
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800138a:	085b      	lsrs	r3, r3, #1
 800138c:	3b01      	subs	r3, #1
 800138e:	041b      	lsls	r3, r3, #16
 8001390:	431a      	orrs	r2, r3
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001396:	061b      	lsls	r3, r3, #24
 8001398:	4937      	ldr	r1, [pc, #220]	; (8001478 <HAL_RCC_OscConfig+0x4e8>)
 800139a:	4313      	orrs	r3, r2
 800139c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800139e:	4b37      	ldr	r3, [pc, #220]	; (800147c <HAL_RCC_OscConfig+0x4ec>)
 80013a0:	2201      	movs	r2, #1
 80013a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013a4:	f7ff fac2 	bl	800092c <HAL_GetTick>
 80013a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80013aa:	e008      	b.n	80013be <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80013ac:	f7ff fabe 	bl	800092c <HAL_GetTick>
 80013b0:	4602      	mov	r2, r0
 80013b2:	693b      	ldr	r3, [r7, #16]
 80013b4:	1ad3      	subs	r3, r2, r3
 80013b6:	2b02      	cmp	r3, #2
 80013b8:	d901      	bls.n	80013be <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80013ba:	2303      	movs	r3, #3
 80013bc:	e056      	b.n	800146c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80013be:	4b2e      	ldr	r3, [pc, #184]	; (8001478 <HAL_RCC_OscConfig+0x4e8>)
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d0f0      	beq.n	80013ac <HAL_RCC_OscConfig+0x41c>
 80013ca:	e04e      	b.n	800146a <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80013cc:	4b2b      	ldr	r3, [pc, #172]	; (800147c <HAL_RCC_OscConfig+0x4ec>)
 80013ce:	2200      	movs	r2, #0
 80013d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013d2:	f7ff faab 	bl	800092c <HAL_GetTick>
 80013d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80013d8:	e008      	b.n	80013ec <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80013da:	f7ff faa7 	bl	800092c <HAL_GetTick>
 80013de:	4602      	mov	r2, r0
 80013e0:	693b      	ldr	r3, [r7, #16]
 80013e2:	1ad3      	subs	r3, r2, r3
 80013e4:	2b02      	cmp	r3, #2
 80013e6:	d901      	bls.n	80013ec <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80013e8:	2303      	movs	r3, #3
 80013ea:	e03f      	b.n	800146c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80013ec:	4b22      	ldr	r3, [pc, #136]	; (8001478 <HAL_RCC_OscConfig+0x4e8>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d1f0      	bne.n	80013da <HAL_RCC_OscConfig+0x44a>
 80013f8:	e037      	b.n	800146a <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	699b      	ldr	r3, [r3, #24]
 80013fe:	2b01      	cmp	r3, #1
 8001400:	d101      	bne.n	8001406 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8001402:	2301      	movs	r3, #1
 8001404:	e032      	b.n	800146c <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001406:	4b1c      	ldr	r3, [pc, #112]	; (8001478 <HAL_RCC_OscConfig+0x4e8>)
 8001408:	685b      	ldr	r3, [r3, #4]
 800140a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	699b      	ldr	r3, [r3, #24]
 8001410:	2b01      	cmp	r3, #1
 8001412:	d028      	beq.n	8001466 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800141e:	429a      	cmp	r2, r3
 8001420:	d121      	bne.n	8001466 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800142c:	429a      	cmp	r2, r3
 800142e:	d11a      	bne.n	8001466 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001430:	68fa      	ldr	r2, [r7, #12]
 8001432:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001436:	4013      	ands	r3, r2
 8001438:	687a      	ldr	r2, [r7, #4]
 800143a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800143c:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800143e:	4293      	cmp	r3, r2
 8001440:	d111      	bne.n	8001466 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800144c:	085b      	lsrs	r3, r3, #1
 800144e:	3b01      	subs	r3, #1
 8001450:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001452:	429a      	cmp	r2, r3
 8001454:	d107      	bne.n	8001466 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001460:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001462:	429a      	cmp	r2, r3
 8001464:	d001      	beq.n	800146a <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8001466:	2301      	movs	r3, #1
 8001468:	e000      	b.n	800146c <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800146a:	2300      	movs	r3, #0
}
 800146c:	4618      	mov	r0, r3
 800146e:	3718      	adds	r7, #24
 8001470:	46bd      	mov	sp, r7
 8001472:	bd80      	pop	{r7, pc}
 8001474:	40007000 	.word	0x40007000
 8001478:	40023800 	.word	0x40023800
 800147c:	42470060 	.word	0x42470060

08001480 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b084      	sub	sp, #16
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
 8001488:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	2b00      	cmp	r3, #0
 800148e:	d101      	bne.n	8001494 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001490:	2301      	movs	r3, #1
 8001492:	e0cc      	b.n	800162e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001494:	4b68      	ldr	r3, [pc, #416]	; (8001638 <HAL_RCC_ClockConfig+0x1b8>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	f003 030f 	and.w	r3, r3, #15
 800149c:	683a      	ldr	r2, [r7, #0]
 800149e:	429a      	cmp	r2, r3
 80014a0:	d90c      	bls.n	80014bc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014a2:	4b65      	ldr	r3, [pc, #404]	; (8001638 <HAL_RCC_ClockConfig+0x1b8>)
 80014a4:	683a      	ldr	r2, [r7, #0]
 80014a6:	b2d2      	uxtb	r2, r2
 80014a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80014aa:	4b63      	ldr	r3, [pc, #396]	; (8001638 <HAL_RCC_ClockConfig+0x1b8>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	f003 030f 	and.w	r3, r3, #15
 80014b2:	683a      	ldr	r2, [r7, #0]
 80014b4:	429a      	cmp	r2, r3
 80014b6:	d001      	beq.n	80014bc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80014b8:	2301      	movs	r3, #1
 80014ba:	e0b8      	b.n	800162e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	f003 0302 	and.w	r3, r3, #2
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d020      	beq.n	800150a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	f003 0304 	and.w	r3, r3, #4
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d005      	beq.n	80014e0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80014d4:	4b59      	ldr	r3, [pc, #356]	; (800163c <HAL_RCC_ClockConfig+0x1bc>)
 80014d6:	689b      	ldr	r3, [r3, #8]
 80014d8:	4a58      	ldr	r2, [pc, #352]	; (800163c <HAL_RCC_ClockConfig+0x1bc>)
 80014da:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80014de:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	f003 0308 	and.w	r3, r3, #8
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d005      	beq.n	80014f8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80014ec:	4b53      	ldr	r3, [pc, #332]	; (800163c <HAL_RCC_ClockConfig+0x1bc>)
 80014ee:	689b      	ldr	r3, [r3, #8]
 80014f0:	4a52      	ldr	r2, [pc, #328]	; (800163c <HAL_RCC_ClockConfig+0x1bc>)
 80014f2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80014f6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80014f8:	4b50      	ldr	r3, [pc, #320]	; (800163c <HAL_RCC_ClockConfig+0x1bc>)
 80014fa:	689b      	ldr	r3, [r3, #8]
 80014fc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	689b      	ldr	r3, [r3, #8]
 8001504:	494d      	ldr	r1, [pc, #308]	; (800163c <HAL_RCC_ClockConfig+0x1bc>)
 8001506:	4313      	orrs	r3, r2
 8001508:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	f003 0301 	and.w	r3, r3, #1
 8001512:	2b00      	cmp	r3, #0
 8001514:	d044      	beq.n	80015a0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	685b      	ldr	r3, [r3, #4]
 800151a:	2b01      	cmp	r3, #1
 800151c:	d107      	bne.n	800152e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800151e:	4b47      	ldr	r3, [pc, #284]	; (800163c <HAL_RCC_ClockConfig+0x1bc>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001526:	2b00      	cmp	r3, #0
 8001528:	d119      	bne.n	800155e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800152a:	2301      	movs	r3, #1
 800152c:	e07f      	b.n	800162e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	685b      	ldr	r3, [r3, #4]
 8001532:	2b02      	cmp	r3, #2
 8001534:	d003      	beq.n	800153e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800153a:	2b03      	cmp	r3, #3
 800153c:	d107      	bne.n	800154e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800153e:	4b3f      	ldr	r3, [pc, #252]	; (800163c <HAL_RCC_ClockConfig+0x1bc>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001546:	2b00      	cmp	r3, #0
 8001548:	d109      	bne.n	800155e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800154a:	2301      	movs	r3, #1
 800154c:	e06f      	b.n	800162e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800154e:	4b3b      	ldr	r3, [pc, #236]	; (800163c <HAL_RCC_ClockConfig+0x1bc>)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	f003 0302 	and.w	r3, r3, #2
 8001556:	2b00      	cmp	r3, #0
 8001558:	d101      	bne.n	800155e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800155a:	2301      	movs	r3, #1
 800155c:	e067      	b.n	800162e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800155e:	4b37      	ldr	r3, [pc, #220]	; (800163c <HAL_RCC_ClockConfig+0x1bc>)
 8001560:	689b      	ldr	r3, [r3, #8]
 8001562:	f023 0203 	bic.w	r2, r3, #3
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	685b      	ldr	r3, [r3, #4]
 800156a:	4934      	ldr	r1, [pc, #208]	; (800163c <HAL_RCC_ClockConfig+0x1bc>)
 800156c:	4313      	orrs	r3, r2
 800156e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001570:	f7ff f9dc 	bl	800092c <HAL_GetTick>
 8001574:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001576:	e00a      	b.n	800158e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001578:	f7ff f9d8 	bl	800092c <HAL_GetTick>
 800157c:	4602      	mov	r2, r0
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	1ad3      	subs	r3, r2, r3
 8001582:	f241 3288 	movw	r2, #5000	; 0x1388
 8001586:	4293      	cmp	r3, r2
 8001588:	d901      	bls.n	800158e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800158a:	2303      	movs	r3, #3
 800158c:	e04f      	b.n	800162e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800158e:	4b2b      	ldr	r3, [pc, #172]	; (800163c <HAL_RCC_ClockConfig+0x1bc>)
 8001590:	689b      	ldr	r3, [r3, #8]
 8001592:	f003 020c 	and.w	r2, r3, #12
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	685b      	ldr	r3, [r3, #4]
 800159a:	009b      	lsls	r3, r3, #2
 800159c:	429a      	cmp	r2, r3
 800159e:	d1eb      	bne.n	8001578 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80015a0:	4b25      	ldr	r3, [pc, #148]	; (8001638 <HAL_RCC_ClockConfig+0x1b8>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	f003 030f 	and.w	r3, r3, #15
 80015a8:	683a      	ldr	r2, [r7, #0]
 80015aa:	429a      	cmp	r2, r3
 80015ac:	d20c      	bcs.n	80015c8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015ae:	4b22      	ldr	r3, [pc, #136]	; (8001638 <HAL_RCC_ClockConfig+0x1b8>)
 80015b0:	683a      	ldr	r2, [r7, #0]
 80015b2:	b2d2      	uxtb	r2, r2
 80015b4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80015b6:	4b20      	ldr	r3, [pc, #128]	; (8001638 <HAL_RCC_ClockConfig+0x1b8>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	f003 030f 	and.w	r3, r3, #15
 80015be:	683a      	ldr	r2, [r7, #0]
 80015c0:	429a      	cmp	r2, r3
 80015c2:	d001      	beq.n	80015c8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80015c4:	2301      	movs	r3, #1
 80015c6:	e032      	b.n	800162e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	f003 0304 	and.w	r3, r3, #4
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d008      	beq.n	80015e6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80015d4:	4b19      	ldr	r3, [pc, #100]	; (800163c <HAL_RCC_ClockConfig+0x1bc>)
 80015d6:	689b      	ldr	r3, [r3, #8]
 80015d8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	68db      	ldr	r3, [r3, #12]
 80015e0:	4916      	ldr	r1, [pc, #88]	; (800163c <HAL_RCC_ClockConfig+0x1bc>)
 80015e2:	4313      	orrs	r3, r2
 80015e4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	f003 0308 	and.w	r3, r3, #8
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d009      	beq.n	8001606 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80015f2:	4b12      	ldr	r3, [pc, #72]	; (800163c <HAL_RCC_ClockConfig+0x1bc>)
 80015f4:	689b      	ldr	r3, [r3, #8]
 80015f6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	691b      	ldr	r3, [r3, #16]
 80015fe:	00db      	lsls	r3, r3, #3
 8001600:	490e      	ldr	r1, [pc, #56]	; (800163c <HAL_RCC_ClockConfig+0x1bc>)
 8001602:	4313      	orrs	r3, r2
 8001604:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001606:	f000 f821 	bl	800164c <HAL_RCC_GetSysClockFreq>
 800160a:	4602      	mov	r2, r0
 800160c:	4b0b      	ldr	r3, [pc, #44]	; (800163c <HAL_RCC_ClockConfig+0x1bc>)
 800160e:	689b      	ldr	r3, [r3, #8]
 8001610:	091b      	lsrs	r3, r3, #4
 8001612:	f003 030f 	and.w	r3, r3, #15
 8001616:	490a      	ldr	r1, [pc, #40]	; (8001640 <HAL_RCC_ClockConfig+0x1c0>)
 8001618:	5ccb      	ldrb	r3, [r1, r3]
 800161a:	fa22 f303 	lsr.w	r3, r2, r3
 800161e:	4a09      	ldr	r2, [pc, #36]	; (8001644 <HAL_RCC_ClockConfig+0x1c4>)
 8001620:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001622:	4b09      	ldr	r3, [pc, #36]	; (8001648 <HAL_RCC_ClockConfig+0x1c8>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	4618      	mov	r0, r3
 8001628:	f7ff f93c 	bl	80008a4 <HAL_InitTick>

  return HAL_OK;
 800162c:	2300      	movs	r3, #0
}
 800162e:	4618      	mov	r0, r3
 8001630:	3710      	adds	r7, #16
 8001632:	46bd      	mov	sp, r7
 8001634:	bd80      	pop	{r7, pc}
 8001636:	bf00      	nop
 8001638:	40023c00 	.word	0x40023c00
 800163c:	40023800 	.word	0x40023800
 8001640:	080030d8 	.word	0x080030d8
 8001644:	2000000c 	.word	0x2000000c
 8001648:	20000010 	.word	0x20000010

0800164c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800164c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001650:	b084      	sub	sp, #16
 8001652:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001654:	2300      	movs	r3, #0
 8001656:	607b      	str	r3, [r7, #4]
 8001658:	2300      	movs	r3, #0
 800165a:	60fb      	str	r3, [r7, #12]
 800165c:	2300      	movs	r3, #0
 800165e:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001660:	2300      	movs	r3, #0
 8001662:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001664:	4b67      	ldr	r3, [pc, #412]	; (8001804 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001666:	689b      	ldr	r3, [r3, #8]
 8001668:	f003 030c 	and.w	r3, r3, #12
 800166c:	2b08      	cmp	r3, #8
 800166e:	d00d      	beq.n	800168c <HAL_RCC_GetSysClockFreq+0x40>
 8001670:	2b08      	cmp	r3, #8
 8001672:	f200 80bd 	bhi.w	80017f0 <HAL_RCC_GetSysClockFreq+0x1a4>
 8001676:	2b00      	cmp	r3, #0
 8001678:	d002      	beq.n	8001680 <HAL_RCC_GetSysClockFreq+0x34>
 800167a:	2b04      	cmp	r3, #4
 800167c:	d003      	beq.n	8001686 <HAL_RCC_GetSysClockFreq+0x3a>
 800167e:	e0b7      	b.n	80017f0 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001680:	4b61      	ldr	r3, [pc, #388]	; (8001808 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8001682:	60bb      	str	r3, [r7, #8]
       break;
 8001684:	e0b7      	b.n	80017f6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001686:	4b61      	ldr	r3, [pc, #388]	; (800180c <HAL_RCC_GetSysClockFreq+0x1c0>)
 8001688:	60bb      	str	r3, [r7, #8]
      break;
 800168a:	e0b4      	b.n	80017f6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800168c:	4b5d      	ldr	r3, [pc, #372]	; (8001804 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800168e:	685b      	ldr	r3, [r3, #4]
 8001690:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001694:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001696:	4b5b      	ldr	r3, [pc, #364]	; (8001804 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001698:	685b      	ldr	r3, [r3, #4]
 800169a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d04d      	beq.n	800173e <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80016a2:	4b58      	ldr	r3, [pc, #352]	; (8001804 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80016a4:	685b      	ldr	r3, [r3, #4]
 80016a6:	099b      	lsrs	r3, r3, #6
 80016a8:	461a      	mov	r2, r3
 80016aa:	f04f 0300 	mov.w	r3, #0
 80016ae:	f240 10ff 	movw	r0, #511	; 0x1ff
 80016b2:	f04f 0100 	mov.w	r1, #0
 80016b6:	ea02 0800 	and.w	r8, r2, r0
 80016ba:	ea03 0901 	and.w	r9, r3, r1
 80016be:	4640      	mov	r0, r8
 80016c0:	4649      	mov	r1, r9
 80016c2:	f04f 0200 	mov.w	r2, #0
 80016c6:	f04f 0300 	mov.w	r3, #0
 80016ca:	014b      	lsls	r3, r1, #5
 80016cc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80016d0:	0142      	lsls	r2, r0, #5
 80016d2:	4610      	mov	r0, r2
 80016d4:	4619      	mov	r1, r3
 80016d6:	ebb0 0008 	subs.w	r0, r0, r8
 80016da:	eb61 0109 	sbc.w	r1, r1, r9
 80016de:	f04f 0200 	mov.w	r2, #0
 80016e2:	f04f 0300 	mov.w	r3, #0
 80016e6:	018b      	lsls	r3, r1, #6
 80016e8:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80016ec:	0182      	lsls	r2, r0, #6
 80016ee:	1a12      	subs	r2, r2, r0
 80016f0:	eb63 0301 	sbc.w	r3, r3, r1
 80016f4:	f04f 0000 	mov.w	r0, #0
 80016f8:	f04f 0100 	mov.w	r1, #0
 80016fc:	00d9      	lsls	r1, r3, #3
 80016fe:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001702:	00d0      	lsls	r0, r2, #3
 8001704:	4602      	mov	r2, r0
 8001706:	460b      	mov	r3, r1
 8001708:	eb12 0208 	adds.w	r2, r2, r8
 800170c:	eb43 0309 	adc.w	r3, r3, r9
 8001710:	f04f 0000 	mov.w	r0, #0
 8001714:	f04f 0100 	mov.w	r1, #0
 8001718:	0259      	lsls	r1, r3, #9
 800171a:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800171e:	0250      	lsls	r0, r2, #9
 8001720:	4602      	mov	r2, r0
 8001722:	460b      	mov	r3, r1
 8001724:	4610      	mov	r0, r2
 8001726:	4619      	mov	r1, r3
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	461a      	mov	r2, r3
 800172c:	f04f 0300 	mov.w	r3, #0
 8001730:	f7fe fdae 	bl	8000290 <__aeabi_uldivmod>
 8001734:	4602      	mov	r2, r0
 8001736:	460b      	mov	r3, r1
 8001738:	4613      	mov	r3, r2
 800173a:	60fb      	str	r3, [r7, #12]
 800173c:	e04a      	b.n	80017d4 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800173e:	4b31      	ldr	r3, [pc, #196]	; (8001804 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001740:	685b      	ldr	r3, [r3, #4]
 8001742:	099b      	lsrs	r3, r3, #6
 8001744:	461a      	mov	r2, r3
 8001746:	f04f 0300 	mov.w	r3, #0
 800174a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800174e:	f04f 0100 	mov.w	r1, #0
 8001752:	ea02 0400 	and.w	r4, r2, r0
 8001756:	ea03 0501 	and.w	r5, r3, r1
 800175a:	4620      	mov	r0, r4
 800175c:	4629      	mov	r1, r5
 800175e:	f04f 0200 	mov.w	r2, #0
 8001762:	f04f 0300 	mov.w	r3, #0
 8001766:	014b      	lsls	r3, r1, #5
 8001768:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800176c:	0142      	lsls	r2, r0, #5
 800176e:	4610      	mov	r0, r2
 8001770:	4619      	mov	r1, r3
 8001772:	1b00      	subs	r0, r0, r4
 8001774:	eb61 0105 	sbc.w	r1, r1, r5
 8001778:	f04f 0200 	mov.w	r2, #0
 800177c:	f04f 0300 	mov.w	r3, #0
 8001780:	018b      	lsls	r3, r1, #6
 8001782:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001786:	0182      	lsls	r2, r0, #6
 8001788:	1a12      	subs	r2, r2, r0
 800178a:	eb63 0301 	sbc.w	r3, r3, r1
 800178e:	f04f 0000 	mov.w	r0, #0
 8001792:	f04f 0100 	mov.w	r1, #0
 8001796:	00d9      	lsls	r1, r3, #3
 8001798:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800179c:	00d0      	lsls	r0, r2, #3
 800179e:	4602      	mov	r2, r0
 80017a0:	460b      	mov	r3, r1
 80017a2:	1912      	adds	r2, r2, r4
 80017a4:	eb45 0303 	adc.w	r3, r5, r3
 80017a8:	f04f 0000 	mov.w	r0, #0
 80017ac:	f04f 0100 	mov.w	r1, #0
 80017b0:	0299      	lsls	r1, r3, #10
 80017b2:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80017b6:	0290      	lsls	r0, r2, #10
 80017b8:	4602      	mov	r2, r0
 80017ba:	460b      	mov	r3, r1
 80017bc:	4610      	mov	r0, r2
 80017be:	4619      	mov	r1, r3
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	461a      	mov	r2, r3
 80017c4:	f04f 0300 	mov.w	r3, #0
 80017c8:	f7fe fd62 	bl	8000290 <__aeabi_uldivmod>
 80017cc:	4602      	mov	r2, r0
 80017ce:	460b      	mov	r3, r1
 80017d0:	4613      	mov	r3, r2
 80017d2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80017d4:	4b0b      	ldr	r3, [pc, #44]	; (8001804 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80017d6:	685b      	ldr	r3, [r3, #4]
 80017d8:	0c1b      	lsrs	r3, r3, #16
 80017da:	f003 0303 	and.w	r3, r3, #3
 80017de:	3301      	adds	r3, #1
 80017e0:	005b      	lsls	r3, r3, #1
 80017e2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80017e4:	68fa      	ldr	r2, [r7, #12]
 80017e6:	683b      	ldr	r3, [r7, #0]
 80017e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80017ec:	60bb      	str	r3, [r7, #8]
      break;
 80017ee:	e002      	b.n	80017f6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80017f0:	4b05      	ldr	r3, [pc, #20]	; (8001808 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80017f2:	60bb      	str	r3, [r7, #8]
      break;
 80017f4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80017f6:	68bb      	ldr	r3, [r7, #8]
}
 80017f8:	4618      	mov	r0, r3
 80017fa:	3710      	adds	r7, #16
 80017fc:	46bd      	mov	sp, r7
 80017fe:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001802:	bf00      	nop
 8001804:	40023800 	.word	0x40023800
 8001808:	00f42400 	.word	0x00f42400
 800180c:	007a1200 	.word	0x007a1200

08001810 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001810:	b480      	push	{r7}
 8001812:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001814:	4b03      	ldr	r3, [pc, #12]	; (8001824 <HAL_RCC_GetHCLKFreq+0x14>)
 8001816:	681b      	ldr	r3, [r3, #0]
}
 8001818:	4618      	mov	r0, r3
 800181a:	46bd      	mov	sp, r7
 800181c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001820:	4770      	bx	lr
 8001822:	bf00      	nop
 8001824:	2000000c 	.word	0x2000000c

08001828 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800182c:	f7ff fff0 	bl	8001810 <HAL_RCC_GetHCLKFreq>
 8001830:	4602      	mov	r2, r0
 8001832:	4b05      	ldr	r3, [pc, #20]	; (8001848 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001834:	689b      	ldr	r3, [r3, #8]
 8001836:	0a9b      	lsrs	r3, r3, #10
 8001838:	f003 0307 	and.w	r3, r3, #7
 800183c:	4903      	ldr	r1, [pc, #12]	; (800184c <HAL_RCC_GetPCLK1Freq+0x24>)
 800183e:	5ccb      	ldrb	r3, [r1, r3]
 8001840:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001844:	4618      	mov	r0, r3
 8001846:	bd80      	pop	{r7, pc}
 8001848:	40023800 	.word	0x40023800
 800184c:	080030e8 	.word	0x080030e8

08001850 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001854:	f7ff ffdc 	bl	8001810 <HAL_RCC_GetHCLKFreq>
 8001858:	4602      	mov	r2, r0
 800185a:	4b05      	ldr	r3, [pc, #20]	; (8001870 <HAL_RCC_GetPCLK2Freq+0x20>)
 800185c:	689b      	ldr	r3, [r3, #8]
 800185e:	0b5b      	lsrs	r3, r3, #13
 8001860:	f003 0307 	and.w	r3, r3, #7
 8001864:	4903      	ldr	r1, [pc, #12]	; (8001874 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001866:	5ccb      	ldrb	r3, [r1, r3]
 8001868:	fa22 f303 	lsr.w	r3, r2, r3
}
 800186c:	4618      	mov	r0, r3
 800186e:	bd80      	pop	{r7, pc}
 8001870:	40023800 	.word	0x40023800
 8001874:	080030e8 	.word	0x080030e8

08001878 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b082      	sub	sp, #8
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	2b00      	cmp	r3, #0
 8001884:	d101      	bne.n	800188a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001886:	2301      	movs	r3, #1
 8001888:	e03f      	b.n	800190a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001890:	b2db      	uxtb	r3, r3
 8001892:	2b00      	cmp	r3, #0
 8001894:	d106      	bne.n	80018a4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	2200      	movs	r2, #0
 800189a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800189e:	6878      	ldr	r0, [r7, #4]
 80018a0:	f000 fb26 	bl	8001ef0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	2224      	movs	r2, #36	; 0x24
 80018a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	68da      	ldr	r2, [r3, #12]
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80018ba:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80018bc:	6878      	ldr	r0, [r7, #4]
 80018be:	f000 f929 	bl	8001b14 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	691a      	ldr	r2, [r3, #16]
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80018d0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	695a      	ldr	r2, [r3, #20]
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80018e0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	68da      	ldr	r2, [r3, #12]
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80018f0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	2200      	movs	r2, #0
 80018f6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	2220      	movs	r2, #32
 80018fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	2220      	movs	r2, #32
 8001904:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001908:	2300      	movs	r3, #0
}
 800190a:	4618      	mov	r0, r3
 800190c:	3708      	adds	r7, #8
 800190e:	46bd      	mov	sp, r7
 8001910:	bd80      	pop	{r7, pc}

08001912 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001912:	b580      	push	{r7, lr}
 8001914:	b08a      	sub	sp, #40	; 0x28
 8001916:	af02      	add	r7, sp, #8
 8001918:	60f8      	str	r0, [r7, #12]
 800191a:	60b9      	str	r1, [r7, #8]
 800191c:	603b      	str	r3, [r7, #0]
 800191e:	4613      	mov	r3, r2
 8001920:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001922:	2300      	movs	r3, #0
 8001924:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800192c:	b2db      	uxtb	r3, r3
 800192e:	2b20      	cmp	r3, #32
 8001930:	d17c      	bne.n	8001a2c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001932:	68bb      	ldr	r3, [r7, #8]
 8001934:	2b00      	cmp	r3, #0
 8001936:	d002      	beq.n	800193e <HAL_UART_Transmit+0x2c>
 8001938:	88fb      	ldrh	r3, [r7, #6]
 800193a:	2b00      	cmp	r3, #0
 800193c:	d101      	bne.n	8001942 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800193e:	2301      	movs	r3, #1
 8001940:	e075      	b.n	8001a2e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001948:	2b01      	cmp	r3, #1
 800194a:	d101      	bne.n	8001950 <HAL_UART_Transmit+0x3e>
 800194c:	2302      	movs	r3, #2
 800194e:	e06e      	b.n	8001a2e <HAL_UART_Transmit+0x11c>
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	2201      	movs	r2, #1
 8001954:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	2200      	movs	r2, #0
 800195c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	2221      	movs	r2, #33	; 0x21
 8001962:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001966:	f7fe ffe1 	bl	800092c <HAL_GetTick>
 800196a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	88fa      	ldrh	r2, [r7, #6]
 8001970:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	88fa      	ldrh	r2, [r7, #6]
 8001976:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	689b      	ldr	r3, [r3, #8]
 800197c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001980:	d108      	bne.n	8001994 <HAL_UART_Transmit+0x82>
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	691b      	ldr	r3, [r3, #16]
 8001986:	2b00      	cmp	r3, #0
 8001988:	d104      	bne.n	8001994 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800198a:	2300      	movs	r3, #0
 800198c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800198e:	68bb      	ldr	r3, [r7, #8]
 8001990:	61bb      	str	r3, [r7, #24]
 8001992:	e003      	b.n	800199c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8001994:	68bb      	ldr	r3, [r7, #8]
 8001996:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001998:	2300      	movs	r3, #0
 800199a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	2200      	movs	r2, #0
 80019a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80019a4:	e02a      	b.n	80019fc <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80019a6:	683b      	ldr	r3, [r7, #0]
 80019a8:	9300      	str	r3, [sp, #0]
 80019aa:	697b      	ldr	r3, [r7, #20]
 80019ac:	2200      	movs	r2, #0
 80019ae:	2180      	movs	r1, #128	; 0x80
 80019b0:	68f8      	ldr	r0, [r7, #12]
 80019b2:	f000 f840 	bl	8001a36 <UART_WaitOnFlagUntilTimeout>
 80019b6:	4603      	mov	r3, r0
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d001      	beq.n	80019c0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80019bc:	2303      	movs	r3, #3
 80019be:	e036      	b.n	8001a2e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80019c0:	69fb      	ldr	r3, [r7, #28]
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d10b      	bne.n	80019de <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80019c6:	69bb      	ldr	r3, [r7, #24]
 80019c8:	881b      	ldrh	r3, [r3, #0]
 80019ca:	461a      	mov	r2, r3
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80019d4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80019d6:	69bb      	ldr	r3, [r7, #24]
 80019d8:	3302      	adds	r3, #2
 80019da:	61bb      	str	r3, [r7, #24]
 80019dc:	e007      	b.n	80019ee <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80019de:	69fb      	ldr	r3, [r7, #28]
 80019e0:	781a      	ldrb	r2, [r3, #0]
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80019e8:	69fb      	ldr	r3, [r7, #28]
 80019ea:	3301      	adds	r3, #1
 80019ec:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80019f2:	b29b      	uxth	r3, r3
 80019f4:	3b01      	subs	r3, #1
 80019f6:	b29a      	uxth	r2, r3
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001a00:	b29b      	uxth	r3, r3
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d1cf      	bne.n	80019a6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001a06:	683b      	ldr	r3, [r7, #0]
 8001a08:	9300      	str	r3, [sp, #0]
 8001a0a:	697b      	ldr	r3, [r7, #20]
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	2140      	movs	r1, #64	; 0x40
 8001a10:	68f8      	ldr	r0, [r7, #12]
 8001a12:	f000 f810 	bl	8001a36 <UART_WaitOnFlagUntilTimeout>
 8001a16:	4603      	mov	r3, r0
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d001      	beq.n	8001a20 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8001a1c:	2303      	movs	r3, #3
 8001a1e:	e006      	b.n	8001a2e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	2220      	movs	r2, #32
 8001a24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8001a28:	2300      	movs	r3, #0
 8001a2a:	e000      	b.n	8001a2e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8001a2c:	2302      	movs	r3, #2
  }
}
 8001a2e:	4618      	mov	r0, r3
 8001a30:	3720      	adds	r7, #32
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bd80      	pop	{r7, pc}

08001a36 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8001a36:	b580      	push	{r7, lr}
 8001a38:	b090      	sub	sp, #64	; 0x40
 8001a3a:	af00      	add	r7, sp, #0
 8001a3c:	60f8      	str	r0, [r7, #12]
 8001a3e:	60b9      	str	r1, [r7, #8]
 8001a40:	603b      	str	r3, [r7, #0]
 8001a42:	4613      	mov	r3, r2
 8001a44:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001a46:	e050      	b.n	8001aea <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001a48:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001a4a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001a4e:	d04c      	beq.n	8001aea <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001a50:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d007      	beq.n	8001a66 <UART_WaitOnFlagUntilTimeout+0x30>
 8001a56:	f7fe ff69 	bl	800092c <HAL_GetTick>
 8001a5a:	4602      	mov	r2, r0
 8001a5c:	683b      	ldr	r3, [r7, #0]
 8001a5e:	1ad3      	subs	r3, r2, r3
 8001a60:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001a62:	429a      	cmp	r2, r3
 8001a64:	d241      	bcs.n	8001aea <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	330c      	adds	r3, #12
 8001a6c:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001a6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a70:	e853 3f00 	ldrex	r3, [r3]
 8001a74:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8001a76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a78:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8001a7c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	330c      	adds	r3, #12
 8001a84:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001a86:	637a      	str	r2, [r7, #52]	; 0x34
 8001a88:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001a8a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001a8c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001a8e:	e841 2300 	strex	r3, r2, [r1]
 8001a92:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8001a94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d1e5      	bne.n	8001a66 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	3314      	adds	r3, #20
 8001aa0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001aa2:	697b      	ldr	r3, [r7, #20]
 8001aa4:	e853 3f00 	ldrex	r3, [r3]
 8001aa8:	613b      	str	r3, [r7, #16]
   return(result);
 8001aaa:	693b      	ldr	r3, [r7, #16]
 8001aac:	f023 0301 	bic.w	r3, r3, #1
 8001ab0:	63bb      	str	r3, [r7, #56]	; 0x38
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	3314      	adds	r3, #20
 8001ab8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001aba:	623a      	str	r2, [r7, #32]
 8001abc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001abe:	69f9      	ldr	r1, [r7, #28]
 8001ac0:	6a3a      	ldr	r2, [r7, #32]
 8001ac2:	e841 2300 	strex	r3, r2, [r1]
 8001ac6:	61bb      	str	r3, [r7, #24]
   return(result);
 8001ac8:	69bb      	ldr	r3, [r7, #24]
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d1e5      	bne.n	8001a9a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	2220      	movs	r2, #32
 8001ad2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	2220      	movs	r2, #32
 8001ada:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8001ae6:	2303      	movs	r3, #3
 8001ae8:	e00f      	b.n	8001b0a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	681a      	ldr	r2, [r3, #0]
 8001af0:	68bb      	ldr	r3, [r7, #8]
 8001af2:	4013      	ands	r3, r2
 8001af4:	68ba      	ldr	r2, [r7, #8]
 8001af6:	429a      	cmp	r2, r3
 8001af8:	bf0c      	ite	eq
 8001afa:	2301      	moveq	r3, #1
 8001afc:	2300      	movne	r3, #0
 8001afe:	b2db      	uxtb	r3, r3
 8001b00:	461a      	mov	r2, r3
 8001b02:	79fb      	ldrb	r3, [r7, #7]
 8001b04:	429a      	cmp	r2, r3
 8001b06:	d09f      	beq.n	8001a48 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001b08:	2300      	movs	r3, #0
}
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	3740      	adds	r7, #64	; 0x40
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	bd80      	pop	{r7, pc}
	...

08001b14 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001b14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001b18:	b09f      	sub	sp, #124	; 0x7c
 8001b1a:	af00      	add	r7, sp, #0
 8001b1c:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001b1e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	691b      	ldr	r3, [r3, #16]
 8001b24:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8001b28:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001b2a:	68d9      	ldr	r1, [r3, #12]
 8001b2c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001b2e:	681a      	ldr	r2, [r3, #0]
 8001b30:	ea40 0301 	orr.w	r3, r0, r1
 8001b34:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001b36:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001b38:	689a      	ldr	r2, [r3, #8]
 8001b3a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001b3c:	691b      	ldr	r3, [r3, #16]
 8001b3e:	431a      	orrs	r2, r3
 8001b40:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001b42:	695b      	ldr	r3, [r3, #20]
 8001b44:	431a      	orrs	r2, r3
 8001b46:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001b48:	69db      	ldr	r3, [r3, #28]
 8001b4a:	4313      	orrs	r3, r2
 8001b4c:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8001b4e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	68db      	ldr	r3, [r3, #12]
 8001b54:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8001b58:	f021 010c 	bic.w	r1, r1, #12
 8001b5c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001b5e:	681a      	ldr	r2, [r3, #0]
 8001b60:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001b62:	430b      	orrs	r3, r1
 8001b64:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001b66:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	695b      	ldr	r3, [r3, #20]
 8001b6c:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8001b70:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001b72:	6999      	ldr	r1, [r3, #24]
 8001b74:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001b76:	681a      	ldr	r2, [r3, #0]
 8001b78:	ea40 0301 	orr.w	r3, r0, r1
 8001b7c:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001b7e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001b80:	681a      	ldr	r2, [r3, #0]
 8001b82:	4bc5      	ldr	r3, [pc, #788]	; (8001e98 <UART_SetConfig+0x384>)
 8001b84:	429a      	cmp	r2, r3
 8001b86:	d004      	beq.n	8001b92 <UART_SetConfig+0x7e>
 8001b88:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001b8a:	681a      	ldr	r2, [r3, #0]
 8001b8c:	4bc3      	ldr	r3, [pc, #780]	; (8001e9c <UART_SetConfig+0x388>)
 8001b8e:	429a      	cmp	r2, r3
 8001b90:	d103      	bne.n	8001b9a <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8001b92:	f7ff fe5d 	bl	8001850 <HAL_RCC_GetPCLK2Freq>
 8001b96:	6778      	str	r0, [r7, #116]	; 0x74
 8001b98:	e002      	b.n	8001ba0 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8001b9a:	f7ff fe45 	bl	8001828 <HAL_RCC_GetPCLK1Freq>
 8001b9e:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001ba0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001ba2:	69db      	ldr	r3, [r3, #28]
 8001ba4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001ba8:	f040 80b6 	bne.w	8001d18 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8001bac:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001bae:	461c      	mov	r4, r3
 8001bb0:	f04f 0500 	mov.w	r5, #0
 8001bb4:	4622      	mov	r2, r4
 8001bb6:	462b      	mov	r3, r5
 8001bb8:	1891      	adds	r1, r2, r2
 8001bba:	6439      	str	r1, [r7, #64]	; 0x40
 8001bbc:	415b      	adcs	r3, r3
 8001bbe:	647b      	str	r3, [r7, #68]	; 0x44
 8001bc0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8001bc4:	1912      	adds	r2, r2, r4
 8001bc6:	eb45 0303 	adc.w	r3, r5, r3
 8001bca:	f04f 0000 	mov.w	r0, #0
 8001bce:	f04f 0100 	mov.w	r1, #0
 8001bd2:	00d9      	lsls	r1, r3, #3
 8001bd4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001bd8:	00d0      	lsls	r0, r2, #3
 8001bda:	4602      	mov	r2, r0
 8001bdc:	460b      	mov	r3, r1
 8001bde:	1911      	adds	r1, r2, r4
 8001be0:	6639      	str	r1, [r7, #96]	; 0x60
 8001be2:	416b      	adcs	r3, r5
 8001be4:	667b      	str	r3, [r7, #100]	; 0x64
 8001be6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001be8:	685b      	ldr	r3, [r3, #4]
 8001bea:	461a      	mov	r2, r3
 8001bec:	f04f 0300 	mov.w	r3, #0
 8001bf0:	1891      	adds	r1, r2, r2
 8001bf2:	63b9      	str	r1, [r7, #56]	; 0x38
 8001bf4:	415b      	adcs	r3, r3
 8001bf6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001bf8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001bfc:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8001c00:	f7fe fb46 	bl	8000290 <__aeabi_uldivmod>
 8001c04:	4602      	mov	r2, r0
 8001c06:	460b      	mov	r3, r1
 8001c08:	4ba5      	ldr	r3, [pc, #660]	; (8001ea0 <UART_SetConfig+0x38c>)
 8001c0a:	fba3 2302 	umull	r2, r3, r3, r2
 8001c0e:	095b      	lsrs	r3, r3, #5
 8001c10:	011e      	lsls	r6, r3, #4
 8001c12:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001c14:	461c      	mov	r4, r3
 8001c16:	f04f 0500 	mov.w	r5, #0
 8001c1a:	4622      	mov	r2, r4
 8001c1c:	462b      	mov	r3, r5
 8001c1e:	1891      	adds	r1, r2, r2
 8001c20:	6339      	str	r1, [r7, #48]	; 0x30
 8001c22:	415b      	adcs	r3, r3
 8001c24:	637b      	str	r3, [r7, #52]	; 0x34
 8001c26:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001c2a:	1912      	adds	r2, r2, r4
 8001c2c:	eb45 0303 	adc.w	r3, r5, r3
 8001c30:	f04f 0000 	mov.w	r0, #0
 8001c34:	f04f 0100 	mov.w	r1, #0
 8001c38:	00d9      	lsls	r1, r3, #3
 8001c3a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001c3e:	00d0      	lsls	r0, r2, #3
 8001c40:	4602      	mov	r2, r0
 8001c42:	460b      	mov	r3, r1
 8001c44:	1911      	adds	r1, r2, r4
 8001c46:	65b9      	str	r1, [r7, #88]	; 0x58
 8001c48:	416b      	adcs	r3, r5
 8001c4a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001c4c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001c4e:	685b      	ldr	r3, [r3, #4]
 8001c50:	461a      	mov	r2, r3
 8001c52:	f04f 0300 	mov.w	r3, #0
 8001c56:	1891      	adds	r1, r2, r2
 8001c58:	62b9      	str	r1, [r7, #40]	; 0x28
 8001c5a:	415b      	adcs	r3, r3
 8001c5c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001c5e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001c62:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8001c66:	f7fe fb13 	bl	8000290 <__aeabi_uldivmod>
 8001c6a:	4602      	mov	r2, r0
 8001c6c:	460b      	mov	r3, r1
 8001c6e:	4b8c      	ldr	r3, [pc, #560]	; (8001ea0 <UART_SetConfig+0x38c>)
 8001c70:	fba3 1302 	umull	r1, r3, r3, r2
 8001c74:	095b      	lsrs	r3, r3, #5
 8001c76:	2164      	movs	r1, #100	; 0x64
 8001c78:	fb01 f303 	mul.w	r3, r1, r3
 8001c7c:	1ad3      	subs	r3, r2, r3
 8001c7e:	00db      	lsls	r3, r3, #3
 8001c80:	3332      	adds	r3, #50	; 0x32
 8001c82:	4a87      	ldr	r2, [pc, #540]	; (8001ea0 <UART_SetConfig+0x38c>)
 8001c84:	fba2 2303 	umull	r2, r3, r2, r3
 8001c88:	095b      	lsrs	r3, r3, #5
 8001c8a:	005b      	lsls	r3, r3, #1
 8001c8c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8001c90:	441e      	add	r6, r3
 8001c92:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001c94:	4618      	mov	r0, r3
 8001c96:	f04f 0100 	mov.w	r1, #0
 8001c9a:	4602      	mov	r2, r0
 8001c9c:	460b      	mov	r3, r1
 8001c9e:	1894      	adds	r4, r2, r2
 8001ca0:	623c      	str	r4, [r7, #32]
 8001ca2:	415b      	adcs	r3, r3
 8001ca4:	627b      	str	r3, [r7, #36]	; 0x24
 8001ca6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001caa:	1812      	adds	r2, r2, r0
 8001cac:	eb41 0303 	adc.w	r3, r1, r3
 8001cb0:	f04f 0400 	mov.w	r4, #0
 8001cb4:	f04f 0500 	mov.w	r5, #0
 8001cb8:	00dd      	lsls	r5, r3, #3
 8001cba:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8001cbe:	00d4      	lsls	r4, r2, #3
 8001cc0:	4622      	mov	r2, r4
 8001cc2:	462b      	mov	r3, r5
 8001cc4:	1814      	adds	r4, r2, r0
 8001cc6:	653c      	str	r4, [r7, #80]	; 0x50
 8001cc8:	414b      	adcs	r3, r1
 8001cca:	657b      	str	r3, [r7, #84]	; 0x54
 8001ccc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001cce:	685b      	ldr	r3, [r3, #4]
 8001cd0:	461a      	mov	r2, r3
 8001cd2:	f04f 0300 	mov.w	r3, #0
 8001cd6:	1891      	adds	r1, r2, r2
 8001cd8:	61b9      	str	r1, [r7, #24]
 8001cda:	415b      	adcs	r3, r3
 8001cdc:	61fb      	str	r3, [r7, #28]
 8001cde:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001ce2:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8001ce6:	f7fe fad3 	bl	8000290 <__aeabi_uldivmod>
 8001cea:	4602      	mov	r2, r0
 8001cec:	460b      	mov	r3, r1
 8001cee:	4b6c      	ldr	r3, [pc, #432]	; (8001ea0 <UART_SetConfig+0x38c>)
 8001cf0:	fba3 1302 	umull	r1, r3, r3, r2
 8001cf4:	095b      	lsrs	r3, r3, #5
 8001cf6:	2164      	movs	r1, #100	; 0x64
 8001cf8:	fb01 f303 	mul.w	r3, r1, r3
 8001cfc:	1ad3      	subs	r3, r2, r3
 8001cfe:	00db      	lsls	r3, r3, #3
 8001d00:	3332      	adds	r3, #50	; 0x32
 8001d02:	4a67      	ldr	r2, [pc, #412]	; (8001ea0 <UART_SetConfig+0x38c>)
 8001d04:	fba2 2303 	umull	r2, r3, r2, r3
 8001d08:	095b      	lsrs	r3, r3, #5
 8001d0a:	f003 0207 	and.w	r2, r3, #7
 8001d0e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	4432      	add	r2, r6
 8001d14:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8001d16:	e0b9      	b.n	8001e8c <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001d18:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001d1a:	461c      	mov	r4, r3
 8001d1c:	f04f 0500 	mov.w	r5, #0
 8001d20:	4622      	mov	r2, r4
 8001d22:	462b      	mov	r3, r5
 8001d24:	1891      	adds	r1, r2, r2
 8001d26:	6139      	str	r1, [r7, #16]
 8001d28:	415b      	adcs	r3, r3
 8001d2a:	617b      	str	r3, [r7, #20]
 8001d2c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001d30:	1912      	adds	r2, r2, r4
 8001d32:	eb45 0303 	adc.w	r3, r5, r3
 8001d36:	f04f 0000 	mov.w	r0, #0
 8001d3a:	f04f 0100 	mov.w	r1, #0
 8001d3e:	00d9      	lsls	r1, r3, #3
 8001d40:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001d44:	00d0      	lsls	r0, r2, #3
 8001d46:	4602      	mov	r2, r0
 8001d48:	460b      	mov	r3, r1
 8001d4a:	eb12 0804 	adds.w	r8, r2, r4
 8001d4e:	eb43 0905 	adc.w	r9, r3, r5
 8001d52:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001d54:	685b      	ldr	r3, [r3, #4]
 8001d56:	4618      	mov	r0, r3
 8001d58:	f04f 0100 	mov.w	r1, #0
 8001d5c:	f04f 0200 	mov.w	r2, #0
 8001d60:	f04f 0300 	mov.w	r3, #0
 8001d64:	008b      	lsls	r3, r1, #2
 8001d66:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8001d6a:	0082      	lsls	r2, r0, #2
 8001d6c:	4640      	mov	r0, r8
 8001d6e:	4649      	mov	r1, r9
 8001d70:	f7fe fa8e 	bl	8000290 <__aeabi_uldivmod>
 8001d74:	4602      	mov	r2, r0
 8001d76:	460b      	mov	r3, r1
 8001d78:	4b49      	ldr	r3, [pc, #292]	; (8001ea0 <UART_SetConfig+0x38c>)
 8001d7a:	fba3 2302 	umull	r2, r3, r3, r2
 8001d7e:	095b      	lsrs	r3, r3, #5
 8001d80:	011e      	lsls	r6, r3, #4
 8001d82:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001d84:	4618      	mov	r0, r3
 8001d86:	f04f 0100 	mov.w	r1, #0
 8001d8a:	4602      	mov	r2, r0
 8001d8c:	460b      	mov	r3, r1
 8001d8e:	1894      	adds	r4, r2, r2
 8001d90:	60bc      	str	r4, [r7, #8]
 8001d92:	415b      	adcs	r3, r3
 8001d94:	60fb      	str	r3, [r7, #12]
 8001d96:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001d9a:	1812      	adds	r2, r2, r0
 8001d9c:	eb41 0303 	adc.w	r3, r1, r3
 8001da0:	f04f 0400 	mov.w	r4, #0
 8001da4:	f04f 0500 	mov.w	r5, #0
 8001da8:	00dd      	lsls	r5, r3, #3
 8001daa:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8001dae:	00d4      	lsls	r4, r2, #3
 8001db0:	4622      	mov	r2, r4
 8001db2:	462b      	mov	r3, r5
 8001db4:	1814      	adds	r4, r2, r0
 8001db6:	64bc      	str	r4, [r7, #72]	; 0x48
 8001db8:	414b      	adcs	r3, r1
 8001dba:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001dbc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001dbe:	685b      	ldr	r3, [r3, #4]
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	f04f 0100 	mov.w	r1, #0
 8001dc6:	f04f 0200 	mov.w	r2, #0
 8001dca:	f04f 0300 	mov.w	r3, #0
 8001dce:	008b      	lsls	r3, r1, #2
 8001dd0:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8001dd4:	0082      	lsls	r2, r0, #2
 8001dd6:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8001dda:	f7fe fa59 	bl	8000290 <__aeabi_uldivmod>
 8001dde:	4602      	mov	r2, r0
 8001de0:	460b      	mov	r3, r1
 8001de2:	4b2f      	ldr	r3, [pc, #188]	; (8001ea0 <UART_SetConfig+0x38c>)
 8001de4:	fba3 1302 	umull	r1, r3, r3, r2
 8001de8:	095b      	lsrs	r3, r3, #5
 8001dea:	2164      	movs	r1, #100	; 0x64
 8001dec:	fb01 f303 	mul.w	r3, r1, r3
 8001df0:	1ad3      	subs	r3, r2, r3
 8001df2:	011b      	lsls	r3, r3, #4
 8001df4:	3332      	adds	r3, #50	; 0x32
 8001df6:	4a2a      	ldr	r2, [pc, #168]	; (8001ea0 <UART_SetConfig+0x38c>)
 8001df8:	fba2 2303 	umull	r2, r3, r2, r3
 8001dfc:	095b      	lsrs	r3, r3, #5
 8001dfe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001e02:	441e      	add	r6, r3
 8001e04:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001e06:	4618      	mov	r0, r3
 8001e08:	f04f 0100 	mov.w	r1, #0
 8001e0c:	4602      	mov	r2, r0
 8001e0e:	460b      	mov	r3, r1
 8001e10:	1894      	adds	r4, r2, r2
 8001e12:	603c      	str	r4, [r7, #0]
 8001e14:	415b      	adcs	r3, r3
 8001e16:	607b      	str	r3, [r7, #4]
 8001e18:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001e1c:	1812      	adds	r2, r2, r0
 8001e1e:	eb41 0303 	adc.w	r3, r1, r3
 8001e22:	f04f 0400 	mov.w	r4, #0
 8001e26:	f04f 0500 	mov.w	r5, #0
 8001e2a:	00dd      	lsls	r5, r3, #3
 8001e2c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8001e30:	00d4      	lsls	r4, r2, #3
 8001e32:	4622      	mov	r2, r4
 8001e34:	462b      	mov	r3, r5
 8001e36:	eb12 0a00 	adds.w	sl, r2, r0
 8001e3a:	eb43 0b01 	adc.w	fp, r3, r1
 8001e3e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001e40:	685b      	ldr	r3, [r3, #4]
 8001e42:	4618      	mov	r0, r3
 8001e44:	f04f 0100 	mov.w	r1, #0
 8001e48:	f04f 0200 	mov.w	r2, #0
 8001e4c:	f04f 0300 	mov.w	r3, #0
 8001e50:	008b      	lsls	r3, r1, #2
 8001e52:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8001e56:	0082      	lsls	r2, r0, #2
 8001e58:	4650      	mov	r0, sl
 8001e5a:	4659      	mov	r1, fp
 8001e5c:	f7fe fa18 	bl	8000290 <__aeabi_uldivmod>
 8001e60:	4602      	mov	r2, r0
 8001e62:	460b      	mov	r3, r1
 8001e64:	4b0e      	ldr	r3, [pc, #56]	; (8001ea0 <UART_SetConfig+0x38c>)
 8001e66:	fba3 1302 	umull	r1, r3, r3, r2
 8001e6a:	095b      	lsrs	r3, r3, #5
 8001e6c:	2164      	movs	r1, #100	; 0x64
 8001e6e:	fb01 f303 	mul.w	r3, r1, r3
 8001e72:	1ad3      	subs	r3, r2, r3
 8001e74:	011b      	lsls	r3, r3, #4
 8001e76:	3332      	adds	r3, #50	; 0x32
 8001e78:	4a09      	ldr	r2, [pc, #36]	; (8001ea0 <UART_SetConfig+0x38c>)
 8001e7a:	fba2 2303 	umull	r2, r3, r2, r3
 8001e7e:	095b      	lsrs	r3, r3, #5
 8001e80:	f003 020f 	and.w	r2, r3, #15
 8001e84:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	4432      	add	r2, r6
 8001e8a:	609a      	str	r2, [r3, #8]
}
 8001e8c:	bf00      	nop
 8001e8e:	377c      	adds	r7, #124	; 0x7c
 8001e90:	46bd      	mov	sp, r7
 8001e92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001e96:	bf00      	nop
 8001e98:	40011000 	.word	0x40011000
 8001e9c:	40011400 	.word	0x40011400
 8001ea0:	51eb851f 	.word	0x51eb851f

08001ea4 <uartInit>:
///////////#else
//////////#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
//////////#endif /* __GNUC__ */
//static void SystemClock_Config(void);
//static void Error_Handler(void);
void uartInit(void){
 8001ea4:	b480      	push	{r7}
 8001ea6:	af00      	add	r7, sp, #0


	  UartHandle.Instance        = USARTx;
 8001ea8:	4b0f      	ldr	r3, [pc, #60]	; (8001ee8 <uartInit+0x44>)
 8001eaa:	4a10      	ldr	r2, [pc, #64]	; (8001eec <uartInit+0x48>)
 8001eac:	601a      	str	r2, [r3, #0]
	  UartHandle.Init.BaudRate   = 9600;
 8001eae:	4b0e      	ldr	r3, [pc, #56]	; (8001ee8 <uartInit+0x44>)
 8001eb0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001eb4:	605a      	str	r2, [r3, #4]
	  UartHandle.Init.WordLength = UART_WORDLENGTH_8B;
 8001eb6:	4b0c      	ldr	r3, [pc, #48]	; (8001ee8 <uartInit+0x44>)
 8001eb8:	2200      	movs	r2, #0
 8001eba:	609a      	str	r2, [r3, #8]
	  UartHandle.Init.StopBits   = UART_STOPBITS_1;
 8001ebc:	4b0a      	ldr	r3, [pc, #40]	; (8001ee8 <uartInit+0x44>)
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	60da      	str	r2, [r3, #12]
	  UartHandle.Init.Parity     = UART_PARITY_ODD;
 8001ec2:	4b09      	ldr	r3, [pc, #36]	; (8001ee8 <uartInit+0x44>)
 8001ec4:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8001ec8:	611a      	str	r2, [r3, #16]
	  UartHandle.Init.HwFlowCtl  = UART_HWCONTROL_NONE;
 8001eca:	4b07      	ldr	r3, [pc, #28]	; (8001ee8 <uartInit+0x44>)
 8001ecc:	2200      	movs	r2, #0
 8001ece:	619a      	str	r2, [r3, #24]
	  UartHandle.Init.Mode       = UART_MODE_TX_RX;
 8001ed0:	4b05      	ldr	r3, [pc, #20]	; (8001ee8 <uartInit+0x44>)
 8001ed2:	220c      	movs	r2, #12
 8001ed4:	615a      	str	r2, [r3, #20]
	  UartHandle.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ed6:	4b04      	ldr	r3, [pc, #16]	; (8001ee8 <uartInit+0x44>)
 8001ed8:	2200      	movs	r2, #0
 8001eda:	61da      	str	r2, [r3, #28]



}
 8001edc:	bf00      	nop
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee4:	4770      	bx	lr
 8001ee6:	bf00      	nop
 8001ee8:	200000a8 	.word	0x200000a8
 8001eec:	40004800 	.word	0x40004800

08001ef0 <HAL_UART_MspInit>:



void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b08a      	sub	sp, #40	; 0x28
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  GPIO_InitStruct;


  //##-1- Enable peripherals and GPIO Clocks #################################
  // Enable GPIO TX/RX clock
  USARTx_TX_GPIO_CLK_ENABLE();
 8001ef8:	2300      	movs	r3, #0
 8001efa:	613b      	str	r3, [r7, #16]
 8001efc:	4b23      	ldr	r3, [pc, #140]	; (8001f8c <HAL_UART_MspInit+0x9c>)
 8001efe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f00:	4a22      	ldr	r2, [pc, #136]	; (8001f8c <HAL_UART_MspInit+0x9c>)
 8001f02:	f043 0308 	orr.w	r3, r3, #8
 8001f06:	6313      	str	r3, [r2, #48]	; 0x30
 8001f08:	4b20      	ldr	r3, [pc, #128]	; (8001f8c <HAL_UART_MspInit+0x9c>)
 8001f0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f0c:	f003 0308 	and.w	r3, r3, #8
 8001f10:	613b      	str	r3, [r7, #16]
 8001f12:	693b      	ldr	r3, [r7, #16]
  USARTx_RX_GPIO_CLK_ENABLE();
 8001f14:	2300      	movs	r3, #0
 8001f16:	60fb      	str	r3, [r7, #12]
 8001f18:	4b1c      	ldr	r3, [pc, #112]	; (8001f8c <HAL_UART_MspInit+0x9c>)
 8001f1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f1c:	4a1b      	ldr	r2, [pc, #108]	; (8001f8c <HAL_UART_MspInit+0x9c>)
 8001f1e:	f043 0308 	orr.w	r3, r3, #8
 8001f22:	6313      	str	r3, [r2, #48]	; 0x30
 8001f24:	4b19      	ldr	r3, [pc, #100]	; (8001f8c <HAL_UART_MspInit+0x9c>)
 8001f26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f28:	f003 0308 	and.w	r3, r3, #8
 8001f2c:	60fb      	str	r3, [r7, #12]
 8001f2e:	68fb      	ldr	r3, [r7, #12]


  // Enable USARTx clock
  USARTx_CLK_ENABLE();
 8001f30:	2300      	movs	r3, #0
 8001f32:	60bb      	str	r3, [r7, #8]
 8001f34:	4b15      	ldr	r3, [pc, #84]	; (8001f8c <HAL_UART_MspInit+0x9c>)
 8001f36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f38:	4a14      	ldr	r2, [pc, #80]	; (8001f8c <HAL_UART_MspInit+0x9c>)
 8001f3a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f3e:	6413      	str	r3, [r2, #64]	; 0x40
 8001f40:	4b12      	ldr	r3, [pc, #72]	; (8001f8c <HAL_UART_MspInit+0x9c>)
 8001f42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f44:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001f48:	60bb      	str	r3, [r7, #8]
 8001f4a:	68bb      	ldr	r3, [r7, #8]

  //##-2- Configure peripheral GPIO ##########################################
  // UART TX GPIO pin configuration
  GPIO_InitStruct.Pin       = USARTx_TX_PIN;
 8001f4c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001f50:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 8001f52:	2302      	movs	r3, #2
 8001f54:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull      = GPIO_PULLUP;
 8001f56:	2301      	movs	r3, #1
 8001f58:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f5a:	2303      	movs	r3, #3
 8001f5c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = USARTx_TX_AF;
 8001f5e:	2307      	movs	r3, #7
 8001f60:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_GPIO_Init(USARTx_TX_GPIO_PORT, &GPIO_InitStruct);
 8001f62:	f107 0314 	add.w	r3, r7, #20
 8001f66:	4619      	mov	r1, r3
 8001f68:	4809      	ldr	r0, [pc, #36]	; (8001f90 <HAL_UART_MspInit+0xa0>)
 8001f6a:	f7fe fdf5 	bl	8000b58 <HAL_GPIO_Init>

  // UART RX GPIO pin configuration
  GPIO_InitStruct.Pin = USARTx_RX_PIN;
 8001f6e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001f72:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = USARTx_RX_AF;
 8001f74:	2307      	movs	r3, #7
 8001f76:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_GPIO_Init(USARTx_RX_GPIO_PORT, &GPIO_InitStruct);
 8001f78:	f107 0314 	add.w	r3, r7, #20
 8001f7c:	4619      	mov	r1, r3
 8001f7e:	4804      	ldr	r0, [pc, #16]	; (8001f90 <HAL_UART_MspInit+0xa0>)
 8001f80:	f7fe fdea 	bl	8000b58 <HAL_GPIO_Init>
}
 8001f84:	bf00      	nop
 8001f86:	3728      	adds	r7, #40	; 0x28
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	bd80      	pop	{r7, pc}
 8001f8c:	40023800 	.word	0x40023800
 8001f90:	40020c00 	.word	0x40020c00

08001f94 <main>:
  * @brief  Main program
  * @param  None
  * @retval None
  */
int main(void)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	af00      	add	r7, sp, #0
         duration should be kept 1ms since PPP_TIMEOUT_VALUEs are defined and 
         handled in milliseconds basis.
       - Set NVIC Group Priority to 4
       - Low Level Initialization
     */
  HAL_Init();
 8001f98:	f7fe fc68 	bl	800086c <HAL_Init>

  /* Configure the system clock to 180 MHz */
  SystemClock_Config();
 8001f9c:	f000 f836 	bl	800200c <SystemClock_Config>
  uartInit();
 8001fa0:	f7ff ff80 	bl	8001ea4 <uartInit>
  /* Initialize BSP Led for LED2 */
  BSP_LED_Init(LED2);
 8001fa4:	2001      	movs	r0, #1
 8001fa6:	f7fe faef 	bl	8000588 <BSP_LED_Init>
  UartHandle.Init.StopBits   = UART_STOPBITS_1;
  UartHandle.Init.Parity     = UART_PARITY_ODD;
  UartHandle.Init.HwFlowCtl  = UART_HWCONTROL_NONE;
  UartHandle.Init.Mode       = UART_MODE_TX_RX;
  UartHandle.Init.OverSampling = UART_OVERSAMPLING_16;*/
  if (HAL_UART_Init(&UartHandle) != HAL_OK)
 8001faa:	480c      	ldr	r0, [pc, #48]	; (8001fdc <main+0x48>)
 8001fac:	f7ff fc64 	bl	8001878 <HAL_UART_Init>
 8001fb0:	4603      	mov	r3, r0
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d001      	beq.n	8001fba <main+0x26>
  {
    // Initialization Error
    Error_Handler();
 8001fb6:	f000 f88b 	bl	80020d0 <Error_Handler>
  }

  /* Output a message on Hyperterminal using printf function */
  printf("\n\r UART Printf Example: retarget the C library printf function to the UART\n\r");
 8001fba:	4809      	ldr	r0, [pc, #36]	; (8001fe0 <main+0x4c>)
 8001fbc:	f000 f8ea 	bl	8002194 <iprintf>
  printf("** Test finished successfully. ** \n\r");
 8001fc0:	4808      	ldr	r0, [pc, #32]	; (8001fe4 <main+0x50>)
 8001fc2:	f000 f8e7 	bl	8002194 <iprintf>

  /* Infinite loop */
  while (1)
  {
	  printf("\n\r UART Printf Example: retarget the C library printf function to the UART\n\r");
 8001fc6:	4806      	ldr	r0, [pc, #24]	; (8001fe0 <main+0x4c>)
 8001fc8:	f000 f8e4 	bl	8002194 <iprintf>
	   printf("** Test finished successfully. ** \n\r");
 8001fcc:	4805      	ldr	r0, [pc, #20]	; (8001fe4 <main+0x50>)
 8001fce:	f000 f8e1 	bl	8002194 <iprintf>
	   HAL_Delay(500);
 8001fd2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001fd6:	f7fe fcb5 	bl	8000944 <HAL_Delay>
	  printf("\n\r UART Printf Example: retarget the C library printf function to the UART\n\r");
 8001fda:	e7f4      	b.n	8001fc6 <main+0x32>
 8001fdc:	200000a8 	.word	0x200000a8
 8001fe0:	08003058 	.word	0x08003058
 8001fe4:	080030a8 	.word	0x080030a8

08001fe8 <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b082      	sub	sp, #8
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART3 and Loop until the end of transmission */
  HAL_UART_Transmit(&UartHandle, (uint8_t *)&ch, 1, 0xFFFF);
 8001ff0:	1d39      	adds	r1, r7, #4
 8001ff2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001ff6:	2201      	movs	r2, #1
 8001ff8:	4803      	ldr	r0, [pc, #12]	; (8002008 <__io_putchar+0x20>)
 8001ffa:	f7ff fc8a 	bl	8001912 <HAL_UART_Transmit>

  return ch;
 8001ffe:	687b      	ldr	r3, [r7, #4]
}
 8002000:	4618      	mov	r0, r3
 8002002:	3708      	adds	r7, #8
 8002004:	46bd      	mov	sp, r7
 8002006:	bd80      	pop	{r7, pc}
 8002008:	200000a8 	.word	0x200000a8

0800200c <SystemClock_Config>:
  *            Flash Latency(WS)              = 5
  * @param  None
  * @retval None
  */
static void SystemClock_Config(void)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	b094      	sub	sp, #80	; 0x50
 8002010:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;

  /* Enable Power Control clock */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002012:	2300      	movs	r3, #0
 8002014:	60bb      	str	r3, [r7, #8]
 8002016:	4b2c      	ldr	r3, [pc, #176]	; (80020c8 <SystemClock_Config+0xbc>)
 8002018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800201a:	4a2b      	ldr	r2, [pc, #172]	; (80020c8 <SystemClock_Config+0xbc>)
 800201c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002020:	6413      	str	r3, [r2, #64]	; 0x40
 8002022:	4b29      	ldr	r3, [pc, #164]	; (80020c8 <SystemClock_Config+0xbc>)
 8002024:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002026:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800202a:	60bb      	str	r3, [r7, #8]
 800202c:	68bb      	ldr	r3, [r7, #8]
  
  /* The voltage scaling allows optimizing the power consumption when the device is 
     clocked below the maximum system frequency, to update the voltage scaling value 
     regarding system frequency refer to product datasheet.  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800202e:	2300      	movs	r3, #0
 8002030:	607b      	str	r3, [r7, #4]
 8002032:	4b26      	ldr	r3, [pc, #152]	; (80020cc <SystemClock_Config+0xc0>)
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	4a25      	ldr	r2, [pc, #148]	; (80020cc <SystemClock_Config+0xc0>)
 8002038:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800203c:	6013      	str	r3, [r2, #0]
 800203e:	4b23      	ldr	r3, [pc, #140]	; (80020cc <SystemClock_Config+0xc0>)
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002046:	607b      	str	r3, [r7, #4]
 8002048:	687b      	ldr	r3, [r7, #4]
  
  /* Enable HSE Oscillator and activate PLL with HSE as source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800204a:	2301      	movs	r3, #1
 800204c:	60fb      	str	r3, [r7, #12]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800204e:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8002052:	613b      	str	r3, [r7, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002054:	2302      	movs	r3, #2
 8002056:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002058:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800205c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLM = 8;
 800205e:	2308      	movs	r3, #8
 8002060:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLN = 360;
 8002062:	f44f 73b4 	mov.w	r3, #360	; 0x168
 8002066:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002068:	2302      	movs	r3, #2
 800206a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800206c:	2307      	movs	r3, #7
 800206e:	63bb      	str	r3, [r7, #56]	; 0x38
  if(HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002070:	f107 030c 	add.w	r3, r7, #12
 8002074:	4618      	mov	r0, r3
 8002076:	f7fe ff8b 	bl	8000f90 <HAL_RCC_OscConfig>
 800207a:	4603      	mov	r3, r0
 800207c:	2b00      	cmp	r3, #0
 800207e:	d001      	beq.n	8002084 <SystemClock_Config+0x78>
  {
    /* Initialization Error */
    Error_Handler();
 8002080:	f000 f826 	bl	80020d0 <Error_Handler>
  }
  
  if(HAL_PWREx_EnableOverDrive() != HAL_OK)
 8002084:	f7fe ff34 	bl	8000ef0 <HAL_PWREx_EnableOverDrive>
 8002088:	4603      	mov	r3, r0
 800208a:	2b00      	cmp	r3, #0
 800208c:	d001      	beq.n	8002092 <SystemClock_Config+0x86>
  {
    /* Initialization Error */
    Error_Handler();
 800208e:	f000 f81f 	bl	80020d0 <Error_Handler>
  }
  
  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2 
     clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 8002092:	230f      	movs	r3, #15
 8002094:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002096:	2302      	movs	r3, #2
 8002098:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800209a:	2300      	movs	r3, #0
 800209c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;  
 800209e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80020a2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;  
 80020a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80020a8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if(HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80020aa:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80020ae:	2105      	movs	r1, #5
 80020b0:	4618      	mov	r0, r3
 80020b2:	f7ff f9e5 	bl	8001480 <HAL_RCC_ClockConfig>
 80020b6:	4603      	mov	r3, r0
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d001      	beq.n	80020c0 <SystemClock_Config+0xb4>
  {
    /* Initialization Error */
    Error_Handler();
 80020bc:	f000 f808 	bl	80020d0 <Error_Handler>
  }
}
 80020c0:	bf00      	nop
 80020c2:	3750      	adds	r7, #80	; 0x50
 80020c4:	46bd      	mov	sp, r7
 80020c6:	bd80      	pop	{r7, pc}
 80020c8:	40023800 	.word	0x40023800
 80020cc:	40007000 	.word	0x40007000

080020d0 <Error_Handler>:
  * @brief  This function is executed in case of error occurrence.
  * @param  None
  * @retval None
  */
static void Error_Handler(void)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	af00      	add	r7, sp, #0
  /* Turn LED2 on */
  BSP_LED_On(LED2);
 80020d4:	2001      	movs	r0, #1
 80020d6:	f7fe faa7 	bl	8000628 <BSP_LED_On>
  while (1)
 80020da:	e7fe      	b.n	80020da <Error_Handler+0xa>

080020dc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80020dc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002114 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80020e0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80020e2:	e003      	b.n	80020ec <LoopCopyDataInit>

080020e4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80020e4:	4b0c      	ldr	r3, [pc, #48]	; (8002118 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80020e6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80020e8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80020ea:	3104      	adds	r1, #4

080020ec <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80020ec:	480b      	ldr	r0, [pc, #44]	; (800211c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80020ee:	4b0c      	ldr	r3, [pc, #48]	; (8002120 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80020f0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80020f2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80020f4:	d3f6      	bcc.n	80020e4 <CopyDataInit>
  ldr  r2, =_sbss
 80020f6:	4a0b      	ldr	r2, [pc, #44]	; (8002124 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80020f8:	e002      	b.n	8002100 <LoopFillZerobss>

080020fa <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80020fa:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80020fc:	f842 3b04 	str.w	r3, [r2], #4

08002100 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002100:	4b09      	ldr	r3, [pc, #36]	; (8002128 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002102:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002104:	d3f9      	bcc.n	80020fa <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002106:	f7fe faa9 	bl	800065c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800210a:	f000 f817 	bl	800213c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800210e:	f7ff ff41 	bl	8001f94 <main>
  bx  lr    
 8002112:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8002114:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8002118:	08003198 	.word	0x08003198
  ldr  r0, =_sdata
 800211c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002120:	2000007c 	.word	0x2000007c
  ldr  r2, =_sbss
 8002124:	2000007c 	.word	0x2000007c
  ldr  r3, = _ebss
 8002128:	200000fc 	.word	0x200000fc

0800212c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800212c:	e7fe      	b.n	800212c <ADC_IRQHandler>
	...

08002130 <__errno>:
 8002130:	4b01      	ldr	r3, [pc, #4]	; (8002138 <__errno+0x8>)
 8002132:	6818      	ldr	r0, [r3, #0]
 8002134:	4770      	bx	lr
 8002136:	bf00      	nop
 8002138:	20000018 	.word	0x20000018

0800213c <__libc_init_array>:
 800213c:	b570      	push	{r4, r5, r6, lr}
 800213e:	4d0d      	ldr	r5, [pc, #52]	; (8002174 <__libc_init_array+0x38>)
 8002140:	4c0d      	ldr	r4, [pc, #52]	; (8002178 <__libc_init_array+0x3c>)
 8002142:	1b64      	subs	r4, r4, r5
 8002144:	10a4      	asrs	r4, r4, #2
 8002146:	2600      	movs	r6, #0
 8002148:	42a6      	cmp	r6, r4
 800214a:	d109      	bne.n	8002160 <__libc_init_array+0x24>
 800214c:	4d0b      	ldr	r5, [pc, #44]	; (800217c <__libc_init_array+0x40>)
 800214e:	4c0c      	ldr	r4, [pc, #48]	; (8002180 <__libc_init_array+0x44>)
 8002150:	f000 ff76 	bl	8003040 <_init>
 8002154:	1b64      	subs	r4, r4, r5
 8002156:	10a4      	asrs	r4, r4, #2
 8002158:	2600      	movs	r6, #0
 800215a:	42a6      	cmp	r6, r4
 800215c:	d105      	bne.n	800216a <__libc_init_array+0x2e>
 800215e:	bd70      	pop	{r4, r5, r6, pc}
 8002160:	f855 3b04 	ldr.w	r3, [r5], #4
 8002164:	4798      	blx	r3
 8002166:	3601      	adds	r6, #1
 8002168:	e7ee      	b.n	8002148 <__libc_init_array+0xc>
 800216a:	f855 3b04 	ldr.w	r3, [r5], #4
 800216e:	4798      	blx	r3
 8002170:	3601      	adds	r6, #1
 8002172:	e7f2      	b.n	800215a <__libc_init_array+0x1e>
 8002174:	08003190 	.word	0x08003190
 8002178:	08003190 	.word	0x08003190
 800217c:	08003190 	.word	0x08003190
 8002180:	08003194 	.word	0x08003194

08002184 <memset>:
 8002184:	4402      	add	r2, r0
 8002186:	4603      	mov	r3, r0
 8002188:	4293      	cmp	r3, r2
 800218a:	d100      	bne.n	800218e <memset+0xa>
 800218c:	4770      	bx	lr
 800218e:	f803 1b01 	strb.w	r1, [r3], #1
 8002192:	e7f9      	b.n	8002188 <memset+0x4>

08002194 <iprintf>:
 8002194:	b40f      	push	{r0, r1, r2, r3}
 8002196:	4b0a      	ldr	r3, [pc, #40]	; (80021c0 <iprintf+0x2c>)
 8002198:	b513      	push	{r0, r1, r4, lr}
 800219a:	681c      	ldr	r4, [r3, #0]
 800219c:	b124      	cbz	r4, 80021a8 <iprintf+0x14>
 800219e:	69a3      	ldr	r3, [r4, #24]
 80021a0:	b913      	cbnz	r3, 80021a8 <iprintf+0x14>
 80021a2:	4620      	mov	r0, r4
 80021a4:	f000 f866 	bl	8002274 <__sinit>
 80021a8:	ab05      	add	r3, sp, #20
 80021aa:	9a04      	ldr	r2, [sp, #16]
 80021ac:	68a1      	ldr	r1, [r4, #8]
 80021ae:	9301      	str	r3, [sp, #4]
 80021b0:	4620      	mov	r0, r4
 80021b2:	f000 f983 	bl	80024bc <_vfiprintf_r>
 80021b6:	b002      	add	sp, #8
 80021b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80021bc:	b004      	add	sp, #16
 80021be:	4770      	bx	lr
 80021c0:	20000018 	.word	0x20000018

080021c4 <std>:
 80021c4:	2300      	movs	r3, #0
 80021c6:	b510      	push	{r4, lr}
 80021c8:	4604      	mov	r4, r0
 80021ca:	e9c0 3300 	strd	r3, r3, [r0]
 80021ce:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80021d2:	6083      	str	r3, [r0, #8]
 80021d4:	8181      	strh	r1, [r0, #12]
 80021d6:	6643      	str	r3, [r0, #100]	; 0x64
 80021d8:	81c2      	strh	r2, [r0, #14]
 80021da:	6183      	str	r3, [r0, #24]
 80021dc:	4619      	mov	r1, r3
 80021de:	2208      	movs	r2, #8
 80021e0:	305c      	adds	r0, #92	; 0x5c
 80021e2:	f7ff ffcf 	bl	8002184 <memset>
 80021e6:	4b05      	ldr	r3, [pc, #20]	; (80021fc <std+0x38>)
 80021e8:	6263      	str	r3, [r4, #36]	; 0x24
 80021ea:	4b05      	ldr	r3, [pc, #20]	; (8002200 <std+0x3c>)
 80021ec:	62a3      	str	r3, [r4, #40]	; 0x28
 80021ee:	4b05      	ldr	r3, [pc, #20]	; (8002204 <std+0x40>)
 80021f0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80021f2:	4b05      	ldr	r3, [pc, #20]	; (8002208 <std+0x44>)
 80021f4:	6224      	str	r4, [r4, #32]
 80021f6:	6323      	str	r3, [r4, #48]	; 0x30
 80021f8:	bd10      	pop	{r4, pc}
 80021fa:	bf00      	nop
 80021fc:	08002a65 	.word	0x08002a65
 8002200:	08002a87 	.word	0x08002a87
 8002204:	08002abf 	.word	0x08002abf
 8002208:	08002ae3 	.word	0x08002ae3

0800220c <_cleanup_r>:
 800220c:	4901      	ldr	r1, [pc, #4]	; (8002214 <_cleanup_r+0x8>)
 800220e:	f000 b8af 	b.w	8002370 <_fwalk_reent>
 8002212:	bf00      	nop
 8002214:	08002dbd 	.word	0x08002dbd

08002218 <__sfmoreglue>:
 8002218:	b570      	push	{r4, r5, r6, lr}
 800221a:	1e4a      	subs	r2, r1, #1
 800221c:	2568      	movs	r5, #104	; 0x68
 800221e:	4355      	muls	r5, r2
 8002220:	460e      	mov	r6, r1
 8002222:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8002226:	f000 f8c5 	bl	80023b4 <_malloc_r>
 800222a:	4604      	mov	r4, r0
 800222c:	b140      	cbz	r0, 8002240 <__sfmoreglue+0x28>
 800222e:	2100      	movs	r1, #0
 8002230:	e9c0 1600 	strd	r1, r6, [r0]
 8002234:	300c      	adds	r0, #12
 8002236:	60a0      	str	r0, [r4, #8]
 8002238:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800223c:	f7ff ffa2 	bl	8002184 <memset>
 8002240:	4620      	mov	r0, r4
 8002242:	bd70      	pop	{r4, r5, r6, pc}

08002244 <__sfp_lock_acquire>:
 8002244:	4801      	ldr	r0, [pc, #4]	; (800224c <__sfp_lock_acquire+0x8>)
 8002246:	f000 b8b3 	b.w	80023b0 <__retarget_lock_acquire_recursive>
 800224a:	bf00      	nop
 800224c:	200000f4 	.word	0x200000f4

08002250 <__sfp_lock_release>:
 8002250:	4801      	ldr	r0, [pc, #4]	; (8002258 <__sfp_lock_release+0x8>)
 8002252:	f000 b8ae 	b.w	80023b2 <__retarget_lock_release_recursive>
 8002256:	bf00      	nop
 8002258:	200000f4 	.word	0x200000f4

0800225c <__sinit_lock_acquire>:
 800225c:	4801      	ldr	r0, [pc, #4]	; (8002264 <__sinit_lock_acquire+0x8>)
 800225e:	f000 b8a7 	b.w	80023b0 <__retarget_lock_acquire_recursive>
 8002262:	bf00      	nop
 8002264:	200000ef 	.word	0x200000ef

08002268 <__sinit_lock_release>:
 8002268:	4801      	ldr	r0, [pc, #4]	; (8002270 <__sinit_lock_release+0x8>)
 800226a:	f000 b8a2 	b.w	80023b2 <__retarget_lock_release_recursive>
 800226e:	bf00      	nop
 8002270:	200000ef 	.word	0x200000ef

08002274 <__sinit>:
 8002274:	b510      	push	{r4, lr}
 8002276:	4604      	mov	r4, r0
 8002278:	f7ff fff0 	bl	800225c <__sinit_lock_acquire>
 800227c:	69a3      	ldr	r3, [r4, #24]
 800227e:	b11b      	cbz	r3, 8002288 <__sinit+0x14>
 8002280:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002284:	f7ff bff0 	b.w	8002268 <__sinit_lock_release>
 8002288:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800228c:	6523      	str	r3, [r4, #80]	; 0x50
 800228e:	4b13      	ldr	r3, [pc, #76]	; (80022dc <__sinit+0x68>)
 8002290:	4a13      	ldr	r2, [pc, #76]	; (80022e0 <__sinit+0x6c>)
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	62a2      	str	r2, [r4, #40]	; 0x28
 8002296:	42a3      	cmp	r3, r4
 8002298:	bf04      	itt	eq
 800229a:	2301      	moveq	r3, #1
 800229c:	61a3      	streq	r3, [r4, #24]
 800229e:	4620      	mov	r0, r4
 80022a0:	f000 f820 	bl	80022e4 <__sfp>
 80022a4:	6060      	str	r0, [r4, #4]
 80022a6:	4620      	mov	r0, r4
 80022a8:	f000 f81c 	bl	80022e4 <__sfp>
 80022ac:	60a0      	str	r0, [r4, #8]
 80022ae:	4620      	mov	r0, r4
 80022b0:	f000 f818 	bl	80022e4 <__sfp>
 80022b4:	2200      	movs	r2, #0
 80022b6:	60e0      	str	r0, [r4, #12]
 80022b8:	2104      	movs	r1, #4
 80022ba:	6860      	ldr	r0, [r4, #4]
 80022bc:	f7ff ff82 	bl	80021c4 <std>
 80022c0:	68a0      	ldr	r0, [r4, #8]
 80022c2:	2201      	movs	r2, #1
 80022c4:	2109      	movs	r1, #9
 80022c6:	f7ff ff7d 	bl	80021c4 <std>
 80022ca:	68e0      	ldr	r0, [r4, #12]
 80022cc:	2202      	movs	r2, #2
 80022ce:	2112      	movs	r1, #18
 80022d0:	f7ff ff78 	bl	80021c4 <std>
 80022d4:	2301      	movs	r3, #1
 80022d6:	61a3      	str	r3, [r4, #24]
 80022d8:	e7d2      	b.n	8002280 <__sinit+0xc>
 80022da:	bf00      	nop
 80022dc:	080030f0 	.word	0x080030f0
 80022e0:	0800220d 	.word	0x0800220d

080022e4 <__sfp>:
 80022e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80022e6:	4607      	mov	r7, r0
 80022e8:	f7ff ffac 	bl	8002244 <__sfp_lock_acquire>
 80022ec:	4b1e      	ldr	r3, [pc, #120]	; (8002368 <__sfp+0x84>)
 80022ee:	681e      	ldr	r6, [r3, #0]
 80022f0:	69b3      	ldr	r3, [r6, #24]
 80022f2:	b913      	cbnz	r3, 80022fa <__sfp+0x16>
 80022f4:	4630      	mov	r0, r6
 80022f6:	f7ff ffbd 	bl	8002274 <__sinit>
 80022fa:	3648      	adds	r6, #72	; 0x48
 80022fc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8002300:	3b01      	subs	r3, #1
 8002302:	d503      	bpl.n	800230c <__sfp+0x28>
 8002304:	6833      	ldr	r3, [r6, #0]
 8002306:	b30b      	cbz	r3, 800234c <__sfp+0x68>
 8002308:	6836      	ldr	r6, [r6, #0]
 800230a:	e7f7      	b.n	80022fc <__sfp+0x18>
 800230c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8002310:	b9d5      	cbnz	r5, 8002348 <__sfp+0x64>
 8002312:	4b16      	ldr	r3, [pc, #88]	; (800236c <__sfp+0x88>)
 8002314:	60e3      	str	r3, [r4, #12]
 8002316:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800231a:	6665      	str	r5, [r4, #100]	; 0x64
 800231c:	f000 f847 	bl	80023ae <__retarget_lock_init_recursive>
 8002320:	f7ff ff96 	bl	8002250 <__sfp_lock_release>
 8002324:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8002328:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800232c:	6025      	str	r5, [r4, #0]
 800232e:	61a5      	str	r5, [r4, #24]
 8002330:	2208      	movs	r2, #8
 8002332:	4629      	mov	r1, r5
 8002334:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8002338:	f7ff ff24 	bl	8002184 <memset>
 800233c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8002340:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8002344:	4620      	mov	r0, r4
 8002346:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002348:	3468      	adds	r4, #104	; 0x68
 800234a:	e7d9      	b.n	8002300 <__sfp+0x1c>
 800234c:	2104      	movs	r1, #4
 800234e:	4638      	mov	r0, r7
 8002350:	f7ff ff62 	bl	8002218 <__sfmoreglue>
 8002354:	4604      	mov	r4, r0
 8002356:	6030      	str	r0, [r6, #0]
 8002358:	2800      	cmp	r0, #0
 800235a:	d1d5      	bne.n	8002308 <__sfp+0x24>
 800235c:	f7ff ff78 	bl	8002250 <__sfp_lock_release>
 8002360:	230c      	movs	r3, #12
 8002362:	603b      	str	r3, [r7, #0]
 8002364:	e7ee      	b.n	8002344 <__sfp+0x60>
 8002366:	bf00      	nop
 8002368:	080030f0 	.word	0x080030f0
 800236c:	ffff0001 	.word	0xffff0001

08002370 <_fwalk_reent>:
 8002370:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002374:	4606      	mov	r6, r0
 8002376:	4688      	mov	r8, r1
 8002378:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800237c:	2700      	movs	r7, #0
 800237e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002382:	f1b9 0901 	subs.w	r9, r9, #1
 8002386:	d505      	bpl.n	8002394 <_fwalk_reent+0x24>
 8002388:	6824      	ldr	r4, [r4, #0]
 800238a:	2c00      	cmp	r4, #0
 800238c:	d1f7      	bne.n	800237e <_fwalk_reent+0xe>
 800238e:	4638      	mov	r0, r7
 8002390:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002394:	89ab      	ldrh	r3, [r5, #12]
 8002396:	2b01      	cmp	r3, #1
 8002398:	d907      	bls.n	80023aa <_fwalk_reent+0x3a>
 800239a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800239e:	3301      	adds	r3, #1
 80023a0:	d003      	beq.n	80023aa <_fwalk_reent+0x3a>
 80023a2:	4629      	mov	r1, r5
 80023a4:	4630      	mov	r0, r6
 80023a6:	47c0      	blx	r8
 80023a8:	4307      	orrs	r7, r0
 80023aa:	3568      	adds	r5, #104	; 0x68
 80023ac:	e7e9      	b.n	8002382 <_fwalk_reent+0x12>

080023ae <__retarget_lock_init_recursive>:
 80023ae:	4770      	bx	lr

080023b0 <__retarget_lock_acquire_recursive>:
 80023b0:	4770      	bx	lr

080023b2 <__retarget_lock_release_recursive>:
 80023b2:	4770      	bx	lr

080023b4 <_malloc_r>:
 80023b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80023b6:	1ccd      	adds	r5, r1, #3
 80023b8:	f025 0503 	bic.w	r5, r5, #3
 80023bc:	3508      	adds	r5, #8
 80023be:	2d0c      	cmp	r5, #12
 80023c0:	bf38      	it	cc
 80023c2:	250c      	movcc	r5, #12
 80023c4:	2d00      	cmp	r5, #0
 80023c6:	4606      	mov	r6, r0
 80023c8:	db01      	blt.n	80023ce <_malloc_r+0x1a>
 80023ca:	42a9      	cmp	r1, r5
 80023cc:	d903      	bls.n	80023d6 <_malloc_r+0x22>
 80023ce:	230c      	movs	r3, #12
 80023d0:	6033      	str	r3, [r6, #0]
 80023d2:	2000      	movs	r0, #0
 80023d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80023d6:	f000 fda3 	bl	8002f20 <__malloc_lock>
 80023da:	4921      	ldr	r1, [pc, #132]	; (8002460 <_malloc_r+0xac>)
 80023dc:	680a      	ldr	r2, [r1, #0]
 80023de:	4614      	mov	r4, r2
 80023e0:	b99c      	cbnz	r4, 800240a <_malloc_r+0x56>
 80023e2:	4f20      	ldr	r7, [pc, #128]	; (8002464 <_malloc_r+0xb0>)
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	b923      	cbnz	r3, 80023f2 <_malloc_r+0x3e>
 80023e8:	4621      	mov	r1, r4
 80023ea:	4630      	mov	r0, r6
 80023ec:	f000 fb2a 	bl	8002a44 <_sbrk_r>
 80023f0:	6038      	str	r0, [r7, #0]
 80023f2:	4629      	mov	r1, r5
 80023f4:	4630      	mov	r0, r6
 80023f6:	f000 fb25 	bl	8002a44 <_sbrk_r>
 80023fa:	1c43      	adds	r3, r0, #1
 80023fc:	d123      	bne.n	8002446 <_malloc_r+0x92>
 80023fe:	230c      	movs	r3, #12
 8002400:	6033      	str	r3, [r6, #0]
 8002402:	4630      	mov	r0, r6
 8002404:	f000 fd92 	bl	8002f2c <__malloc_unlock>
 8002408:	e7e3      	b.n	80023d2 <_malloc_r+0x1e>
 800240a:	6823      	ldr	r3, [r4, #0]
 800240c:	1b5b      	subs	r3, r3, r5
 800240e:	d417      	bmi.n	8002440 <_malloc_r+0x8c>
 8002410:	2b0b      	cmp	r3, #11
 8002412:	d903      	bls.n	800241c <_malloc_r+0x68>
 8002414:	6023      	str	r3, [r4, #0]
 8002416:	441c      	add	r4, r3
 8002418:	6025      	str	r5, [r4, #0]
 800241a:	e004      	b.n	8002426 <_malloc_r+0x72>
 800241c:	6863      	ldr	r3, [r4, #4]
 800241e:	42a2      	cmp	r2, r4
 8002420:	bf0c      	ite	eq
 8002422:	600b      	streq	r3, [r1, #0]
 8002424:	6053      	strne	r3, [r2, #4]
 8002426:	4630      	mov	r0, r6
 8002428:	f000 fd80 	bl	8002f2c <__malloc_unlock>
 800242c:	f104 000b 	add.w	r0, r4, #11
 8002430:	1d23      	adds	r3, r4, #4
 8002432:	f020 0007 	bic.w	r0, r0, #7
 8002436:	1ac2      	subs	r2, r0, r3
 8002438:	d0cc      	beq.n	80023d4 <_malloc_r+0x20>
 800243a:	1a1b      	subs	r3, r3, r0
 800243c:	50a3      	str	r3, [r4, r2]
 800243e:	e7c9      	b.n	80023d4 <_malloc_r+0x20>
 8002440:	4622      	mov	r2, r4
 8002442:	6864      	ldr	r4, [r4, #4]
 8002444:	e7cc      	b.n	80023e0 <_malloc_r+0x2c>
 8002446:	1cc4      	adds	r4, r0, #3
 8002448:	f024 0403 	bic.w	r4, r4, #3
 800244c:	42a0      	cmp	r0, r4
 800244e:	d0e3      	beq.n	8002418 <_malloc_r+0x64>
 8002450:	1a21      	subs	r1, r4, r0
 8002452:	4630      	mov	r0, r6
 8002454:	f000 faf6 	bl	8002a44 <_sbrk_r>
 8002458:	3001      	adds	r0, #1
 800245a:	d1dd      	bne.n	8002418 <_malloc_r+0x64>
 800245c:	e7cf      	b.n	80023fe <_malloc_r+0x4a>
 800245e:	bf00      	nop
 8002460:	2000009c 	.word	0x2000009c
 8002464:	200000a0 	.word	0x200000a0

08002468 <__sfputc_r>:
 8002468:	6893      	ldr	r3, [r2, #8]
 800246a:	3b01      	subs	r3, #1
 800246c:	2b00      	cmp	r3, #0
 800246e:	b410      	push	{r4}
 8002470:	6093      	str	r3, [r2, #8]
 8002472:	da08      	bge.n	8002486 <__sfputc_r+0x1e>
 8002474:	6994      	ldr	r4, [r2, #24]
 8002476:	42a3      	cmp	r3, r4
 8002478:	db01      	blt.n	800247e <__sfputc_r+0x16>
 800247a:	290a      	cmp	r1, #10
 800247c:	d103      	bne.n	8002486 <__sfputc_r+0x1e>
 800247e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002482:	f000 bb33 	b.w	8002aec <__swbuf_r>
 8002486:	6813      	ldr	r3, [r2, #0]
 8002488:	1c58      	adds	r0, r3, #1
 800248a:	6010      	str	r0, [r2, #0]
 800248c:	7019      	strb	r1, [r3, #0]
 800248e:	4608      	mov	r0, r1
 8002490:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002494:	4770      	bx	lr

08002496 <__sfputs_r>:
 8002496:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002498:	4606      	mov	r6, r0
 800249a:	460f      	mov	r7, r1
 800249c:	4614      	mov	r4, r2
 800249e:	18d5      	adds	r5, r2, r3
 80024a0:	42ac      	cmp	r4, r5
 80024a2:	d101      	bne.n	80024a8 <__sfputs_r+0x12>
 80024a4:	2000      	movs	r0, #0
 80024a6:	e007      	b.n	80024b8 <__sfputs_r+0x22>
 80024a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80024ac:	463a      	mov	r2, r7
 80024ae:	4630      	mov	r0, r6
 80024b0:	f7ff ffda 	bl	8002468 <__sfputc_r>
 80024b4:	1c43      	adds	r3, r0, #1
 80024b6:	d1f3      	bne.n	80024a0 <__sfputs_r+0xa>
 80024b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080024bc <_vfiprintf_r>:
 80024bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80024c0:	460d      	mov	r5, r1
 80024c2:	b09d      	sub	sp, #116	; 0x74
 80024c4:	4614      	mov	r4, r2
 80024c6:	4698      	mov	r8, r3
 80024c8:	4606      	mov	r6, r0
 80024ca:	b118      	cbz	r0, 80024d4 <_vfiprintf_r+0x18>
 80024cc:	6983      	ldr	r3, [r0, #24]
 80024ce:	b90b      	cbnz	r3, 80024d4 <_vfiprintf_r+0x18>
 80024d0:	f7ff fed0 	bl	8002274 <__sinit>
 80024d4:	4b89      	ldr	r3, [pc, #548]	; (80026fc <_vfiprintf_r+0x240>)
 80024d6:	429d      	cmp	r5, r3
 80024d8:	d11b      	bne.n	8002512 <_vfiprintf_r+0x56>
 80024da:	6875      	ldr	r5, [r6, #4]
 80024dc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80024de:	07d9      	lsls	r1, r3, #31
 80024e0:	d405      	bmi.n	80024ee <_vfiprintf_r+0x32>
 80024e2:	89ab      	ldrh	r3, [r5, #12]
 80024e4:	059a      	lsls	r2, r3, #22
 80024e6:	d402      	bmi.n	80024ee <_vfiprintf_r+0x32>
 80024e8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80024ea:	f7ff ff61 	bl	80023b0 <__retarget_lock_acquire_recursive>
 80024ee:	89ab      	ldrh	r3, [r5, #12]
 80024f0:	071b      	lsls	r3, r3, #28
 80024f2:	d501      	bpl.n	80024f8 <_vfiprintf_r+0x3c>
 80024f4:	692b      	ldr	r3, [r5, #16]
 80024f6:	b9eb      	cbnz	r3, 8002534 <_vfiprintf_r+0x78>
 80024f8:	4629      	mov	r1, r5
 80024fa:	4630      	mov	r0, r6
 80024fc:	f000 fb5a 	bl	8002bb4 <__swsetup_r>
 8002500:	b1c0      	cbz	r0, 8002534 <_vfiprintf_r+0x78>
 8002502:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002504:	07dc      	lsls	r4, r3, #31
 8002506:	d50e      	bpl.n	8002526 <_vfiprintf_r+0x6a>
 8002508:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800250c:	b01d      	add	sp, #116	; 0x74
 800250e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002512:	4b7b      	ldr	r3, [pc, #492]	; (8002700 <_vfiprintf_r+0x244>)
 8002514:	429d      	cmp	r5, r3
 8002516:	d101      	bne.n	800251c <_vfiprintf_r+0x60>
 8002518:	68b5      	ldr	r5, [r6, #8]
 800251a:	e7df      	b.n	80024dc <_vfiprintf_r+0x20>
 800251c:	4b79      	ldr	r3, [pc, #484]	; (8002704 <_vfiprintf_r+0x248>)
 800251e:	429d      	cmp	r5, r3
 8002520:	bf08      	it	eq
 8002522:	68f5      	ldreq	r5, [r6, #12]
 8002524:	e7da      	b.n	80024dc <_vfiprintf_r+0x20>
 8002526:	89ab      	ldrh	r3, [r5, #12]
 8002528:	0598      	lsls	r0, r3, #22
 800252a:	d4ed      	bmi.n	8002508 <_vfiprintf_r+0x4c>
 800252c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800252e:	f7ff ff40 	bl	80023b2 <__retarget_lock_release_recursive>
 8002532:	e7e9      	b.n	8002508 <_vfiprintf_r+0x4c>
 8002534:	2300      	movs	r3, #0
 8002536:	9309      	str	r3, [sp, #36]	; 0x24
 8002538:	2320      	movs	r3, #32
 800253a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800253e:	f8cd 800c 	str.w	r8, [sp, #12]
 8002542:	2330      	movs	r3, #48	; 0x30
 8002544:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8002708 <_vfiprintf_r+0x24c>
 8002548:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800254c:	f04f 0901 	mov.w	r9, #1
 8002550:	4623      	mov	r3, r4
 8002552:	469a      	mov	sl, r3
 8002554:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002558:	b10a      	cbz	r2, 800255e <_vfiprintf_r+0xa2>
 800255a:	2a25      	cmp	r2, #37	; 0x25
 800255c:	d1f9      	bne.n	8002552 <_vfiprintf_r+0x96>
 800255e:	ebba 0b04 	subs.w	fp, sl, r4
 8002562:	d00b      	beq.n	800257c <_vfiprintf_r+0xc0>
 8002564:	465b      	mov	r3, fp
 8002566:	4622      	mov	r2, r4
 8002568:	4629      	mov	r1, r5
 800256a:	4630      	mov	r0, r6
 800256c:	f7ff ff93 	bl	8002496 <__sfputs_r>
 8002570:	3001      	adds	r0, #1
 8002572:	f000 80aa 	beq.w	80026ca <_vfiprintf_r+0x20e>
 8002576:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002578:	445a      	add	r2, fp
 800257a:	9209      	str	r2, [sp, #36]	; 0x24
 800257c:	f89a 3000 	ldrb.w	r3, [sl]
 8002580:	2b00      	cmp	r3, #0
 8002582:	f000 80a2 	beq.w	80026ca <_vfiprintf_r+0x20e>
 8002586:	2300      	movs	r3, #0
 8002588:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800258c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002590:	f10a 0a01 	add.w	sl, sl, #1
 8002594:	9304      	str	r3, [sp, #16]
 8002596:	9307      	str	r3, [sp, #28]
 8002598:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800259c:	931a      	str	r3, [sp, #104]	; 0x68
 800259e:	4654      	mov	r4, sl
 80025a0:	2205      	movs	r2, #5
 80025a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80025a6:	4858      	ldr	r0, [pc, #352]	; (8002708 <_vfiprintf_r+0x24c>)
 80025a8:	f7fd fe22 	bl	80001f0 <memchr>
 80025ac:	9a04      	ldr	r2, [sp, #16]
 80025ae:	b9d8      	cbnz	r0, 80025e8 <_vfiprintf_r+0x12c>
 80025b0:	06d1      	lsls	r1, r2, #27
 80025b2:	bf44      	itt	mi
 80025b4:	2320      	movmi	r3, #32
 80025b6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80025ba:	0713      	lsls	r3, r2, #28
 80025bc:	bf44      	itt	mi
 80025be:	232b      	movmi	r3, #43	; 0x2b
 80025c0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80025c4:	f89a 3000 	ldrb.w	r3, [sl]
 80025c8:	2b2a      	cmp	r3, #42	; 0x2a
 80025ca:	d015      	beq.n	80025f8 <_vfiprintf_r+0x13c>
 80025cc:	9a07      	ldr	r2, [sp, #28]
 80025ce:	4654      	mov	r4, sl
 80025d0:	2000      	movs	r0, #0
 80025d2:	f04f 0c0a 	mov.w	ip, #10
 80025d6:	4621      	mov	r1, r4
 80025d8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80025dc:	3b30      	subs	r3, #48	; 0x30
 80025de:	2b09      	cmp	r3, #9
 80025e0:	d94e      	bls.n	8002680 <_vfiprintf_r+0x1c4>
 80025e2:	b1b0      	cbz	r0, 8002612 <_vfiprintf_r+0x156>
 80025e4:	9207      	str	r2, [sp, #28]
 80025e6:	e014      	b.n	8002612 <_vfiprintf_r+0x156>
 80025e8:	eba0 0308 	sub.w	r3, r0, r8
 80025ec:	fa09 f303 	lsl.w	r3, r9, r3
 80025f0:	4313      	orrs	r3, r2
 80025f2:	9304      	str	r3, [sp, #16]
 80025f4:	46a2      	mov	sl, r4
 80025f6:	e7d2      	b.n	800259e <_vfiprintf_r+0xe2>
 80025f8:	9b03      	ldr	r3, [sp, #12]
 80025fa:	1d19      	adds	r1, r3, #4
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	9103      	str	r1, [sp, #12]
 8002600:	2b00      	cmp	r3, #0
 8002602:	bfbb      	ittet	lt
 8002604:	425b      	neglt	r3, r3
 8002606:	f042 0202 	orrlt.w	r2, r2, #2
 800260a:	9307      	strge	r3, [sp, #28]
 800260c:	9307      	strlt	r3, [sp, #28]
 800260e:	bfb8      	it	lt
 8002610:	9204      	strlt	r2, [sp, #16]
 8002612:	7823      	ldrb	r3, [r4, #0]
 8002614:	2b2e      	cmp	r3, #46	; 0x2e
 8002616:	d10c      	bne.n	8002632 <_vfiprintf_r+0x176>
 8002618:	7863      	ldrb	r3, [r4, #1]
 800261a:	2b2a      	cmp	r3, #42	; 0x2a
 800261c:	d135      	bne.n	800268a <_vfiprintf_r+0x1ce>
 800261e:	9b03      	ldr	r3, [sp, #12]
 8002620:	1d1a      	adds	r2, r3, #4
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	9203      	str	r2, [sp, #12]
 8002626:	2b00      	cmp	r3, #0
 8002628:	bfb8      	it	lt
 800262a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800262e:	3402      	adds	r4, #2
 8002630:	9305      	str	r3, [sp, #20]
 8002632:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8002718 <_vfiprintf_r+0x25c>
 8002636:	7821      	ldrb	r1, [r4, #0]
 8002638:	2203      	movs	r2, #3
 800263a:	4650      	mov	r0, sl
 800263c:	f7fd fdd8 	bl	80001f0 <memchr>
 8002640:	b140      	cbz	r0, 8002654 <_vfiprintf_r+0x198>
 8002642:	2340      	movs	r3, #64	; 0x40
 8002644:	eba0 000a 	sub.w	r0, r0, sl
 8002648:	fa03 f000 	lsl.w	r0, r3, r0
 800264c:	9b04      	ldr	r3, [sp, #16]
 800264e:	4303      	orrs	r3, r0
 8002650:	3401      	adds	r4, #1
 8002652:	9304      	str	r3, [sp, #16]
 8002654:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002658:	482c      	ldr	r0, [pc, #176]	; (800270c <_vfiprintf_r+0x250>)
 800265a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800265e:	2206      	movs	r2, #6
 8002660:	f7fd fdc6 	bl	80001f0 <memchr>
 8002664:	2800      	cmp	r0, #0
 8002666:	d03f      	beq.n	80026e8 <_vfiprintf_r+0x22c>
 8002668:	4b29      	ldr	r3, [pc, #164]	; (8002710 <_vfiprintf_r+0x254>)
 800266a:	bb1b      	cbnz	r3, 80026b4 <_vfiprintf_r+0x1f8>
 800266c:	9b03      	ldr	r3, [sp, #12]
 800266e:	3307      	adds	r3, #7
 8002670:	f023 0307 	bic.w	r3, r3, #7
 8002674:	3308      	adds	r3, #8
 8002676:	9303      	str	r3, [sp, #12]
 8002678:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800267a:	443b      	add	r3, r7
 800267c:	9309      	str	r3, [sp, #36]	; 0x24
 800267e:	e767      	b.n	8002550 <_vfiprintf_r+0x94>
 8002680:	fb0c 3202 	mla	r2, ip, r2, r3
 8002684:	460c      	mov	r4, r1
 8002686:	2001      	movs	r0, #1
 8002688:	e7a5      	b.n	80025d6 <_vfiprintf_r+0x11a>
 800268a:	2300      	movs	r3, #0
 800268c:	3401      	adds	r4, #1
 800268e:	9305      	str	r3, [sp, #20]
 8002690:	4619      	mov	r1, r3
 8002692:	f04f 0c0a 	mov.w	ip, #10
 8002696:	4620      	mov	r0, r4
 8002698:	f810 2b01 	ldrb.w	r2, [r0], #1
 800269c:	3a30      	subs	r2, #48	; 0x30
 800269e:	2a09      	cmp	r2, #9
 80026a0:	d903      	bls.n	80026aa <_vfiprintf_r+0x1ee>
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d0c5      	beq.n	8002632 <_vfiprintf_r+0x176>
 80026a6:	9105      	str	r1, [sp, #20]
 80026a8:	e7c3      	b.n	8002632 <_vfiprintf_r+0x176>
 80026aa:	fb0c 2101 	mla	r1, ip, r1, r2
 80026ae:	4604      	mov	r4, r0
 80026b0:	2301      	movs	r3, #1
 80026b2:	e7f0      	b.n	8002696 <_vfiprintf_r+0x1da>
 80026b4:	ab03      	add	r3, sp, #12
 80026b6:	9300      	str	r3, [sp, #0]
 80026b8:	462a      	mov	r2, r5
 80026ba:	4b16      	ldr	r3, [pc, #88]	; (8002714 <_vfiprintf_r+0x258>)
 80026bc:	a904      	add	r1, sp, #16
 80026be:	4630      	mov	r0, r6
 80026c0:	f3af 8000 	nop.w
 80026c4:	4607      	mov	r7, r0
 80026c6:	1c78      	adds	r0, r7, #1
 80026c8:	d1d6      	bne.n	8002678 <_vfiprintf_r+0x1bc>
 80026ca:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80026cc:	07d9      	lsls	r1, r3, #31
 80026ce:	d405      	bmi.n	80026dc <_vfiprintf_r+0x220>
 80026d0:	89ab      	ldrh	r3, [r5, #12]
 80026d2:	059a      	lsls	r2, r3, #22
 80026d4:	d402      	bmi.n	80026dc <_vfiprintf_r+0x220>
 80026d6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80026d8:	f7ff fe6b 	bl	80023b2 <__retarget_lock_release_recursive>
 80026dc:	89ab      	ldrh	r3, [r5, #12]
 80026de:	065b      	lsls	r3, r3, #25
 80026e0:	f53f af12 	bmi.w	8002508 <_vfiprintf_r+0x4c>
 80026e4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80026e6:	e711      	b.n	800250c <_vfiprintf_r+0x50>
 80026e8:	ab03      	add	r3, sp, #12
 80026ea:	9300      	str	r3, [sp, #0]
 80026ec:	462a      	mov	r2, r5
 80026ee:	4b09      	ldr	r3, [pc, #36]	; (8002714 <_vfiprintf_r+0x258>)
 80026f0:	a904      	add	r1, sp, #16
 80026f2:	4630      	mov	r0, r6
 80026f4:	f000 f880 	bl	80027f8 <_printf_i>
 80026f8:	e7e4      	b.n	80026c4 <_vfiprintf_r+0x208>
 80026fa:	bf00      	nop
 80026fc:	08003114 	.word	0x08003114
 8002700:	08003134 	.word	0x08003134
 8002704:	080030f4 	.word	0x080030f4
 8002708:	08003154 	.word	0x08003154
 800270c:	0800315e 	.word	0x0800315e
 8002710:	00000000 	.word	0x00000000
 8002714:	08002497 	.word	0x08002497
 8002718:	0800315a 	.word	0x0800315a

0800271c <_printf_common>:
 800271c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002720:	4616      	mov	r6, r2
 8002722:	4699      	mov	r9, r3
 8002724:	688a      	ldr	r2, [r1, #8]
 8002726:	690b      	ldr	r3, [r1, #16]
 8002728:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800272c:	4293      	cmp	r3, r2
 800272e:	bfb8      	it	lt
 8002730:	4613      	movlt	r3, r2
 8002732:	6033      	str	r3, [r6, #0]
 8002734:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002738:	4607      	mov	r7, r0
 800273a:	460c      	mov	r4, r1
 800273c:	b10a      	cbz	r2, 8002742 <_printf_common+0x26>
 800273e:	3301      	adds	r3, #1
 8002740:	6033      	str	r3, [r6, #0]
 8002742:	6823      	ldr	r3, [r4, #0]
 8002744:	0699      	lsls	r1, r3, #26
 8002746:	bf42      	ittt	mi
 8002748:	6833      	ldrmi	r3, [r6, #0]
 800274a:	3302      	addmi	r3, #2
 800274c:	6033      	strmi	r3, [r6, #0]
 800274e:	6825      	ldr	r5, [r4, #0]
 8002750:	f015 0506 	ands.w	r5, r5, #6
 8002754:	d106      	bne.n	8002764 <_printf_common+0x48>
 8002756:	f104 0a19 	add.w	sl, r4, #25
 800275a:	68e3      	ldr	r3, [r4, #12]
 800275c:	6832      	ldr	r2, [r6, #0]
 800275e:	1a9b      	subs	r3, r3, r2
 8002760:	42ab      	cmp	r3, r5
 8002762:	dc26      	bgt.n	80027b2 <_printf_common+0x96>
 8002764:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002768:	1e13      	subs	r3, r2, #0
 800276a:	6822      	ldr	r2, [r4, #0]
 800276c:	bf18      	it	ne
 800276e:	2301      	movne	r3, #1
 8002770:	0692      	lsls	r2, r2, #26
 8002772:	d42b      	bmi.n	80027cc <_printf_common+0xb0>
 8002774:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002778:	4649      	mov	r1, r9
 800277a:	4638      	mov	r0, r7
 800277c:	47c0      	blx	r8
 800277e:	3001      	adds	r0, #1
 8002780:	d01e      	beq.n	80027c0 <_printf_common+0xa4>
 8002782:	6823      	ldr	r3, [r4, #0]
 8002784:	68e5      	ldr	r5, [r4, #12]
 8002786:	6832      	ldr	r2, [r6, #0]
 8002788:	f003 0306 	and.w	r3, r3, #6
 800278c:	2b04      	cmp	r3, #4
 800278e:	bf08      	it	eq
 8002790:	1aad      	subeq	r5, r5, r2
 8002792:	68a3      	ldr	r3, [r4, #8]
 8002794:	6922      	ldr	r2, [r4, #16]
 8002796:	bf0c      	ite	eq
 8002798:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800279c:	2500      	movne	r5, #0
 800279e:	4293      	cmp	r3, r2
 80027a0:	bfc4      	itt	gt
 80027a2:	1a9b      	subgt	r3, r3, r2
 80027a4:	18ed      	addgt	r5, r5, r3
 80027a6:	2600      	movs	r6, #0
 80027a8:	341a      	adds	r4, #26
 80027aa:	42b5      	cmp	r5, r6
 80027ac:	d11a      	bne.n	80027e4 <_printf_common+0xc8>
 80027ae:	2000      	movs	r0, #0
 80027b0:	e008      	b.n	80027c4 <_printf_common+0xa8>
 80027b2:	2301      	movs	r3, #1
 80027b4:	4652      	mov	r2, sl
 80027b6:	4649      	mov	r1, r9
 80027b8:	4638      	mov	r0, r7
 80027ba:	47c0      	blx	r8
 80027bc:	3001      	adds	r0, #1
 80027be:	d103      	bne.n	80027c8 <_printf_common+0xac>
 80027c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80027c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80027c8:	3501      	adds	r5, #1
 80027ca:	e7c6      	b.n	800275a <_printf_common+0x3e>
 80027cc:	18e1      	adds	r1, r4, r3
 80027ce:	1c5a      	adds	r2, r3, #1
 80027d0:	2030      	movs	r0, #48	; 0x30
 80027d2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80027d6:	4422      	add	r2, r4
 80027d8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80027dc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80027e0:	3302      	adds	r3, #2
 80027e2:	e7c7      	b.n	8002774 <_printf_common+0x58>
 80027e4:	2301      	movs	r3, #1
 80027e6:	4622      	mov	r2, r4
 80027e8:	4649      	mov	r1, r9
 80027ea:	4638      	mov	r0, r7
 80027ec:	47c0      	blx	r8
 80027ee:	3001      	adds	r0, #1
 80027f0:	d0e6      	beq.n	80027c0 <_printf_common+0xa4>
 80027f2:	3601      	adds	r6, #1
 80027f4:	e7d9      	b.n	80027aa <_printf_common+0x8e>
	...

080027f8 <_printf_i>:
 80027f8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80027fc:	460c      	mov	r4, r1
 80027fe:	4691      	mov	r9, r2
 8002800:	7e27      	ldrb	r7, [r4, #24]
 8002802:	990c      	ldr	r1, [sp, #48]	; 0x30
 8002804:	2f78      	cmp	r7, #120	; 0x78
 8002806:	4680      	mov	r8, r0
 8002808:	469a      	mov	sl, r3
 800280a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800280e:	d807      	bhi.n	8002820 <_printf_i+0x28>
 8002810:	2f62      	cmp	r7, #98	; 0x62
 8002812:	d80a      	bhi.n	800282a <_printf_i+0x32>
 8002814:	2f00      	cmp	r7, #0
 8002816:	f000 80d8 	beq.w	80029ca <_printf_i+0x1d2>
 800281a:	2f58      	cmp	r7, #88	; 0x58
 800281c:	f000 80a3 	beq.w	8002966 <_printf_i+0x16e>
 8002820:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8002824:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002828:	e03a      	b.n	80028a0 <_printf_i+0xa8>
 800282a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800282e:	2b15      	cmp	r3, #21
 8002830:	d8f6      	bhi.n	8002820 <_printf_i+0x28>
 8002832:	a001      	add	r0, pc, #4	; (adr r0, 8002838 <_printf_i+0x40>)
 8002834:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8002838:	08002891 	.word	0x08002891
 800283c:	080028a5 	.word	0x080028a5
 8002840:	08002821 	.word	0x08002821
 8002844:	08002821 	.word	0x08002821
 8002848:	08002821 	.word	0x08002821
 800284c:	08002821 	.word	0x08002821
 8002850:	080028a5 	.word	0x080028a5
 8002854:	08002821 	.word	0x08002821
 8002858:	08002821 	.word	0x08002821
 800285c:	08002821 	.word	0x08002821
 8002860:	08002821 	.word	0x08002821
 8002864:	080029b1 	.word	0x080029b1
 8002868:	080028d5 	.word	0x080028d5
 800286c:	08002993 	.word	0x08002993
 8002870:	08002821 	.word	0x08002821
 8002874:	08002821 	.word	0x08002821
 8002878:	080029d3 	.word	0x080029d3
 800287c:	08002821 	.word	0x08002821
 8002880:	080028d5 	.word	0x080028d5
 8002884:	08002821 	.word	0x08002821
 8002888:	08002821 	.word	0x08002821
 800288c:	0800299b 	.word	0x0800299b
 8002890:	680b      	ldr	r3, [r1, #0]
 8002892:	1d1a      	adds	r2, r3, #4
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	600a      	str	r2, [r1, #0]
 8002898:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800289c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80028a0:	2301      	movs	r3, #1
 80028a2:	e0a3      	b.n	80029ec <_printf_i+0x1f4>
 80028a4:	6825      	ldr	r5, [r4, #0]
 80028a6:	6808      	ldr	r0, [r1, #0]
 80028a8:	062e      	lsls	r6, r5, #24
 80028aa:	f100 0304 	add.w	r3, r0, #4
 80028ae:	d50a      	bpl.n	80028c6 <_printf_i+0xce>
 80028b0:	6805      	ldr	r5, [r0, #0]
 80028b2:	600b      	str	r3, [r1, #0]
 80028b4:	2d00      	cmp	r5, #0
 80028b6:	da03      	bge.n	80028c0 <_printf_i+0xc8>
 80028b8:	232d      	movs	r3, #45	; 0x2d
 80028ba:	426d      	negs	r5, r5
 80028bc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80028c0:	485e      	ldr	r0, [pc, #376]	; (8002a3c <_printf_i+0x244>)
 80028c2:	230a      	movs	r3, #10
 80028c4:	e019      	b.n	80028fa <_printf_i+0x102>
 80028c6:	f015 0f40 	tst.w	r5, #64	; 0x40
 80028ca:	6805      	ldr	r5, [r0, #0]
 80028cc:	600b      	str	r3, [r1, #0]
 80028ce:	bf18      	it	ne
 80028d0:	b22d      	sxthne	r5, r5
 80028d2:	e7ef      	b.n	80028b4 <_printf_i+0xbc>
 80028d4:	680b      	ldr	r3, [r1, #0]
 80028d6:	6825      	ldr	r5, [r4, #0]
 80028d8:	1d18      	adds	r0, r3, #4
 80028da:	6008      	str	r0, [r1, #0]
 80028dc:	0628      	lsls	r0, r5, #24
 80028de:	d501      	bpl.n	80028e4 <_printf_i+0xec>
 80028e0:	681d      	ldr	r5, [r3, #0]
 80028e2:	e002      	b.n	80028ea <_printf_i+0xf2>
 80028e4:	0669      	lsls	r1, r5, #25
 80028e6:	d5fb      	bpl.n	80028e0 <_printf_i+0xe8>
 80028e8:	881d      	ldrh	r5, [r3, #0]
 80028ea:	4854      	ldr	r0, [pc, #336]	; (8002a3c <_printf_i+0x244>)
 80028ec:	2f6f      	cmp	r7, #111	; 0x6f
 80028ee:	bf0c      	ite	eq
 80028f0:	2308      	moveq	r3, #8
 80028f2:	230a      	movne	r3, #10
 80028f4:	2100      	movs	r1, #0
 80028f6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80028fa:	6866      	ldr	r6, [r4, #4]
 80028fc:	60a6      	str	r6, [r4, #8]
 80028fe:	2e00      	cmp	r6, #0
 8002900:	bfa2      	ittt	ge
 8002902:	6821      	ldrge	r1, [r4, #0]
 8002904:	f021 0104 	bicge.w	r1, r1, #4
 8002908:	6021      	strge	r1, [r4, #0]
 800290a:	b90d      	cbnz	r5, 8002910 <_printf_i+0x118>
 800290c:	2e00      	cmp	r6, #0
 800290e:	d04d      	beq.n	80029ac <_printf_i+0x1b4>
 8002910:	4616      	mov	r6, r2
 8002912:	fbb5 f1f3 	udiv	r1, r5, r3
 8002916:	fb03 5711 	mls	r7, r3, r1, r5
 800291a:	5dc7      	ldrb	r7, [r0, r7]
 800291c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8002920:	462f      	mov	r7, r5
 8002922:	42bb      	cmp	r3, r7
 8002924:	460d      	mov	r5, r1
 8002926:	d9f4      	bls.n	8002912 <_printf_i+0x11a>
 8002928:	2b08      	cmp	r3, #8
 800292a:	d10b      	bne.n	8002944 <_printf_i+0x14c>
 800292c:	6823      	ldr	r3, [r4, #0]
 800292e:	07df      	lsls	r7, r3, #31
 8002930:	d508      	bpl.n	8002944 <_printf_i+0x14c>
 8002932:	6923      	ldr	r3, [r4, #16]
 8002934:	6861      	ldr	r1, [r4, #4]
 8002936:	4299      	cmp	r1, r3
 8002938:	bfde      	ittt	le
 800293a:	2330      	movle	r3, #48	; 0x30
 800293c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8002940:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8002944:	1b92      	subs	r2, r2, r6
 8002946:	6122      	str	r2, [r4, #16]
 8002948:	f8cd a000 	str.w	sl, [sp]
 800294c:	464b      	mov	r3, r9
 800294e:	aa03      	add	r2, sp, #12
 8002950:	4621      	mov	r1, r4
 8002952:	4640      	mov	r0, r8
 8002954:	f7ff fee2 	bl	800271c <_printf_common>
 8002958:	3001      	adds	r0, #1
 800295a:	d14c      	bne.n	80029f6 <_printf_i+0x1fe>
 800295c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002960:	b004      	add	sp, #16
 8002962:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002966:	4835      	ldr	r0, [pc, #212]	; (8002a3c <_printf_i+0x244>)
 8002968:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800296c:	6823      	ldr	r3, [r4, #0]
 800296e:	680e      	ldr	r6, [r1, #0]
 8002970:	061f      	lsls	r7, r3, #24
 8002972:	f856 5b04 	ldr.w	r5, [r6], #4
 8002976:	600e      	str	r6, [r1, #0]
 8002978:	d514      	bpl.n	80029a4 <_printf_i+0x1ac>
 800297a:	07d9      	lsls	r1, r3, #31
 800297c:	bf44      	itt	mi
 800297e:	f043 0320 	orrmi.w	r3, r3, #32
 8002982:	6023      	strmi	r3, [r4, #0]
 8002984:	b91d      	cbnz	r5, 800298e <_printf_i+0x196>
 8002986:	6823      	ldr	r3, [r4, #0]
 8002988:	f023 0320 	bic.w	r3, r3, #32
 800298c:	6023      	str	r3, [r4, #0]
 800298e:	2310      	movs	r3, #16
 8002990:	e7b0      	b.n	80028f4 <_printf_i+0xfc>
 8002992:	6823      	ldr	r3, [r4, #0]
 8002994:	f043 0320 	orr.w	r3, r3, #32
 8002998:	6023      	str	r3, [r4, #0]
 800299a:	2378      	movs	r3, #120	; 0x78
 800299c:	4828      	ldr	r0, [pc, #160]	; (8002a40 <_printf_i+0x248>)
 800299e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80029a2:	e7e3      	b.n	800296c <_printf_i+0x174>
 80029a4:	065e      	lsls	r6, r3, #25
 80029a6:	bf48      	it	mi
 80029a8:	b2ad      	uxthmi	r5, r5
 80029aa:	e7e6      	b.n	800297a <_printf_i+0x182>
 80029ac:	4616      	mov	r6, r2
 80029ae:	e7bb      	b.n	8002928 <_printf_i+0x130>
 80029b0:	680b      	ldr	r3, [r1, #0]
 80029b2:	6826      	ldr	r6, [r4, #0]
 80029b4:	6960      	ldr	r0, [r4, #20]
 80029b6:	1d1d      	adds	r5, r3, #4
 80029b8:	600d      	str	r5, [r1, #0]
 80029ba:	0635      	lsls	r5, r6, #24
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	d501      	bpl.n	80029c4 <_printf_i+0x1cc>
 80029c0:	6018      	str	r0, [r3, #0]
 80029c2:	e002      	b.n	80029ca <_printf_i+0x1d2>
 80029c4:	0671      	lsls	r1, r6, #25
 80029c6:	d5fb      	bpl.n	80029c0 <_printf_i+0x1c8>
 80029c8:	8018      	strh	r0, [r3, #0]
 80029ca:	2300      	movs	r3, #0
 80029cc:	6123      	str	r3, [r4, #16]
 80029ce:	4616      	mov	r6, r2
 80029d0:	e7ba      	b.n	8002948 <_printf_i+0x150>
 80029d2:	680b      	ldr	r3, [r1, #0]
 80029d4:	1d1a      	adds	r2, r3, #4
 80029d6:	600a      	str	r2, [r1, #0]
 80029d8:	681e      	ldr	r6, [r3, #0]
 80029da:	6862      	ldr	r2, [r4, #4]
 80029dc:	2100      	movs	r1, #0
 80029de:	4630      	mov	r0, r6
 80029e0:	f7fd fc06 	bl	80001f0 <memchr>
 80029e4:	b108      	cbz	r0, 80029ea <_printf_i+0x1f2>
 80029e6:	1b80      	subs	r0, r0, r6
 80029e8:	6060      	str	r0, [r4, #4]
 80029ea:	6863      	ldr	r3, [r4, #4]
 80029ec:	6123      	str	r3, [r4, #16]
 80029ee:	2300      	movs	r3, #0
 80029f0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80029f4:	e7a8      	b.n	8002948 <_printf_i+0x150>
 80029f6:	6923      	ldr	r3, [r4, #16]
 80029f8:	4632      	mov	r2, r6
 80029fa:	4649      	mov	r1, r9
 80029fc:	4640      	mov	r0, r8
 80029fe:	47d0      	blx	sl
 8002a00:	3001      	adds	r0, #1
 8002a02:	d0ab      	beq.n	800295c <_printf_i+0x164>
 8002a04:	6823      	ldr	r3, [r4, #0]
 8002a06:	079b      	lsls	r3, r3, #30
 8002a08:	d413      	bmi.n	8002a32 <_printf_i+0x23a>
 8002a0a:	68e0      	ldr	r0, [r4, #12]
 8002a0c:	9b03      	ldr	r3, [sp, #12]
 8002a0e:	4298      	cmp	r0, r3
 8002a10:	bfb8      	it	lt
 8002a12:	4618      	movlt	r0, r3
 8002a14:	e7a4      	b.n	8002960 <_printf_i+0x168>
 8002a16:	2301      	movs	r3, #1
 8002a18:	4632      	mov	r2, r6
 8002a1a:	4649      	mov	r1, r9
 8002a1c:	4640      	mov	r0, r8
 8002a1e:	47d0      	blx	sl
 8002a20:	3001      	adds	r0, #1
 8002a22:	d09b      	beq.n	800295c <_printf_i+0x164>
 8002a24:	3501      	adds	r5, #1
 8002a26:	68e3      	ldr	r3, [r4, #12]
 8002a28:	9903      	ldr	r1, [sp, #12]
 8002a2a:	1a5b      	subs	r3, r3, r1
 8002a2c:	42ab      	cmp	r3, r5
 8002a2e:	dcf2      	bgt.n	8002a16 <_printf_i+0x21e>
 8002a30:	e7eb      	b.n	8002a0a <_printf_i+0x212>
 8002a32:	2500      	movs	r5, #0
 8002a34:	f104 0619 	add.w	r6, r4, #25
 8002a38:	e7f5      	b.n	8002a26 <_printf_i+0x22e>
 8002a3a:	bf00      	nop
 8002a3c:	08003165 	.word	0x08003165
 8002a40:	08003176 	.word	0x08003176

08002a44 <_sbrk_r>:
 8002a44:	b538      	push	{r3, r4, r5, lr}
 8002a46:	4d06      	ldr	r5, [pc, #24]	; (8002a60 <_sbrk_r+0x1c>)
 8002a48:	2300      	movs	r3, #0
 8002a4a:	4604      	mov	r4, r0
 8002a4c:	4608      	mov	r0, r1
 8002a4e:	602b      	str	r3, [r5, #0]
 8002a50:	f7fd fed6 	bl	8000800 <_sbrk>
 8002a54:	1c43      	adds	r3, r0, #1
 8002a56:	d102      	bne.n	8002a5e <_sbrk_r+0x1a>
 8002a58:	682b      	ldr	r3, [r5, #0]
 8002a5a:	b103      	cbz	r3, 8002a5e <_sbrk_r+0x1a>
 8002a5c:	6023      	str	r3, [r4, #0]
 8002a5e:	bd38      	pop	{r3, r4, r5, pc}
 8002a60:	200000f8 	.word	0x200000f8

08002a64 <__sread>:
 8002a64:	b510      	push	{r4, lr}
 8002a66:	460c      	mov	r4, r1
 8002a68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002a6c:	f000 fab4 	bl	8002fd8 <_read_r>
 8002a70:	2800      	cmp	r0, #0
 8002a72:	bfab      	itete	ge
 8002a74:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8002a76:	89a3      	ldrhlt	r3, [r4, #12]
 8002a78:	181b      	addge	r3, r3, r0
 8002a7a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8002a7e:	bfac      	ite	ge
 8002a80:	6563      	strge	r3, [r4, #84]	; 0x54
 8002a82:	81a3      	strhlt	r3, [r4, #12]
 8002a84:	bd10      	pop	{r4, pc}

08002a86 <__swrite>:
 8002a86:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002a8a:	461f      	mov	r7, r3
 8002a8c:	898b      	ldrh	r3, [r1, #12]
 8002a8e:	05db      	lsls	r3, r3, #23
 8002a90:	4605      	mov	r5, r0
 8002a92:	460c      	mov	r4, r1
 8002a94:	4616      	mov	r6, r2
 8002a96:	d505      	bpl.n	8002aa4 <__swrite+0x1e>
 8002a98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002a9c:	2302      	movs	r3, #2
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	f000 f9c8 	bl	8002e34 <_lseek_r>
 8002aa4:	89a3      	ldrh	r3, [r4, #12]
 8002aa6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002aaa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002aae:	81a3      	strh	r3, [r4, #12]
 8002ab0:	4632      	mov	r2, r6
 8002ab2:	463b      	mov	r3, r7
 8002ab4:	4628      	mov	r0, r5
 8002ab6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002aba:	f000 b869 	b.w	8002b90 <_write_r>

08002abe <__sseek>:
 8002abe:	b510      	push	{r4, lr}
 8002ac0:	460c      	mov	r4, r1
 8002ac2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002ac6:	f000 f9b5 	bl	8002e34 <_lseek_r>
 8002aca:	1c43      	adds	r3, r0, #1
 8002acc:	89a3      	ldrh	r3, [r4, #12]
 8002ace:	bf15      	itete	ne
 8002ad0:	6560      	strne	r0, [r4, #84]	; 0x54
 8002ad2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8002ad6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8002ada:	81a3      	strheq	r3, [r4, #12]
 8002adc:	bf18      	it	ne
 8002ade:	81a3      	strhne	r3, [r4, #12]
 8002ae0:	bd10      	pop	{r4, pc}

08002ae2 <__sclose>:
 8002ae2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002ae6:	f000 b8d3 	b.w	8002c90 <_close_r>
	...

08002aec <__swbuf_r>:
 8002aec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002aee:	460e      	mov	r6, r1
 8002af0:	4614      	mov	r4, r2
 8002af2:	4605      	mov	r5, r0
 8002af4:	b118      	cbz	r0, 8002afe <__swbuf_r+0x12>
 8002af6:	6983      	ldr	r3, [r0, #24]
 8002af8:	b90b      	cbnz	r3, 8002afe <__swbuf_r+0x12>
 8002afa:	f7ff fbbb 	bl	8002274 <__sinit>
 8002afe:	4b21      	ldr	r3, [pc, #132]	; (8002b84 <__swbuf_r+0x98>)
 8002b00:	429c      	cmp	r4, r3
 8002b02:	d12b      	bne.n	8002b5c <__swbuf_r+0x70>
 8002b04:	686c      	ldr	r4, [r5, #4]
 8002b06:	69a3      	ldr	r3, [r4, #24]
 8002b08:	60a3      	str	r3, [r4, #8]
 8002b0a:	89a3      	ldrh	r3, [r4, #12]
 8002b0c:	071a      	lsls	r2, r3, #28
 8002b0e:	d52f      	bpl.n	8002b70 <__swbuf_r+0x84>
 8002b10:	6923      	ldr	r3, [r4, #16]
 8002b12:	b36b      	cbz	r3, 8002b70 <__swbuf_r+0x84>
 8002b14:	6923      	ldr	r3, [r4, #16]
 8002b16:	6820      	ldr	r0, [r4, #0]
 8002b18:	1ac0      	subs	r0, r0, r3
 8002b1a:	6963      	ldr	r3, [r4, #20]
 8002b1c:	b2f6      	uxtb	r6, r6
 8002b1e:	4283      	cmp	r3, r0
 8002b20:	4637      	mov	r7, r6
 8002b22:	dc04      	bgt.n	8002b2e <__swbuf_r+0x42>
 8002b24:	4621      	mov	r1, r4
 8002b26:	4628      	mov	r0, r5
 8002b28:	f000 f948 	bl	8002dbc <_fflush_r>
 8002b2c:	bb30      	cbnz	r0, 8002b7c <__swbuf_r+0x90>
 8002b2e:	68a3      	ldr	r3, [r4, #8]
 8002b30:	3b01      	subs	r3, #1
 8002b32:	60a3      	str	r3, [r4, #8]
 8002b34:	6823      	ldr	r3, [r4, #0]
 8002b36:	1c5a      	adds	r2, r3, #1
 8002b38:	6022      	str	r2, [r4, #0]
 8002b3a:	701e      	strb	r6, [r3, #0]
 8002b3c:	6963      	ldr	r3, [r4, #20]
 8002b3e:	3001      	adds	r0, #1
 8002b40:	4283      	cmp	r3, r0
 8002b42:	d004      	beq.n	8002b4e <__swbuf_r+0x62>
 8002b44:	89a3      	ldrh	r3, [r4, #12]
 8002b46:	07db      	lsls	r3, r3, #31
 8002b48:	d506      	bpl.n	8002b58 <__swbuf_r+0x6c>
 8002b4a:	2e0a      	cmp	r6, #10
 8002b4c:	d104      	bne.n	8002b58 <__swbuf_r+0x6c>
 8002b4e:	4621      	mov	r1, r4
 8002b50:	4628      	mov	r0, r5
 8002b52:	f000 f933 	bl	8002dbc <_fflush_r>
 8002b56:	b988      	cbnz	r0, 8002b7c <__swbuf_r+0x90>
 8002b58:	4638      	mov	r0, r7
 8002b5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002b5c:	4b0a      	ldr	r3, [pc, #40]	; (8002b88 <__swbuf_r+0x9c>)
 8002b5e:	429c      	cmp	r4, r3
 8002b60:	d101      	bne.n	8002b66 <__swbuf_r+0x7a>
 8002b62:	68ac      	ldr	r4, [r5, #8]
 8002b64:	e7cf      	b.n	8002b06 <__swbuf_r+0x1a>
 8002b66:	4b09      	ldr	r3, [pc, #36]	; (8002b8c <__swbuf_r+0xa0>)
 8002b68:	429c      	cmp	r4, r3
 8002b6a:	bf08      	it	eq
 8002b6c:	68ec      	ldreq	r4, [r5, #12]
 8002b6e:	e7ca      	b.n	8002b06 <__swbuf_r+0x1a>
 8002b70:	4621      	mov	r1, r4
 8002b72:	4628      	mov	r0, r5
 8002b74:	f000 f81e 	bl	8002bb4 <__swsetup_r>
 8002b78:	2800      	cmp	r0, #0
 8002b7a:	d0cb      	beq.n	8002b14 <__swbuf_r+0x28>
 8002b7c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8002b80:	e7ea      	b.n	8002b58 <__swbuf_r+0x6c>
 8002b82:	bf00      	nop
 8002b84:	08003114 	.word	0x08003114
 8002b88:	08003134 	.word	0x08003134
 8002b8c:	080030f4 	.word	0x080030f4

08002b90 <_write_r>:
 8002b90:	b538      	push	{r3, r4, r5, lr}
 8002b92:	4d07      	ldr	r5, [pc, #28]	; (8002bb0 <_write_r+0x20>)
 8002b94:	4604      	mov	r4, r0
 8002b96:	4608      	mov	r0, r1
 8002b98:	4611      	mov	r1, r2
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	602a      	str	r2, [r5, #0]
 8002b9e:	461a      	mov	r2, r3
 8002ba0:	f7fd fddd 	bl	800075e <_write>
 8002ba4:	1c43      	adds	r3, r0, #1
 8002ba6:	d102      	bne.n	8002bae <_write_r+0x1e>
 8002ba8:	682b      	ldr	r3, [r5, #0]
 8002baa:	b103      	cbz	r3, 8002bae <_write_r+0x1e>
 8002bac:	6023      	str	r3, [r4, #0]
 8002bae:	bd38      	pop	{r3, r4, r5, pc}
 8002bb0:	200000f8 	.word	0x200000f8

08002bb4 <__swsetup_r>:
 8002bb4:	4b32      	ldr	r3, [pc, #200]	; (8002c80 <__swsetup_r+0xcc>)
 8002bb6:	b570      	push	{r4, r5, r6, lr}
 8002bb8:	681d      	ldr	r5, [r3, #0]
 8002bba:	4606      	mov	r6, r0
 8002bbc:	460c      	mov	r4, r1
 8002bbe:	b125      	cbz	r5, 8002bca <__swsetup_r+0x16>
 8002bc0:	69ab      	ldr	r3, [r5, #24]
 8002bc2:	b913      	cbnz	r3, 8002bca <__swsetup_r+0x16>
 8002bc4:	4628      	mov	r0, r5
 8002bc6:	f7ff fb55 	bl	8002274 <__sinit>
 8002bca:	4b2e      	ldr	r3, [pc, #184]	; (8002c84 <__swsetup_r+0xd0>)
 8002bcc:	429c      	cmp	r4, r3
 8002bce:	d10f      	bne.n	8002bf0 <__swsetup_r+0x3c>
 8002bd0:	686c      	ldr	r4, [r5, #4]
 8002bd2:	89a3      	ldrh	r3, [r4, #12]
 8002bd4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002bd8:	0719      	lsls	r1, r3, #28
 8002bda:	d42c      	bmi.n	8002c36 <__swsetup_r+0x82>
 8002bdc:	06dd      	lsls	r5, r3, #27
 8002bde:	d411      	bmi.n	8002c04 <__swsetup_r+0x50>
 8002be0:	2309      	movs	r3, #9
 8002be2:	6033      	str	r3, [r6, #0]
 8002be4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8002be8:	81a3      	strh	r3, [r4, #12]
 8002bea:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002bee:	e03e      	b.n	8002c6e <__swsetup_r+0xba>
 8002bf0:	4b25      	ldr	r3, [pc, #148]	; (8002c88 <__swsetup_r+0xd4>)
 8002bf2:	429c      	cmp	r4, r3
 8002bf4:	d101      	bne.n	8002bfa <__swsetup_r+0x46>
 8002bf6:	68ac      	ldr	r4, [r5, #8]
 8002bf8:	e7eb      	b.n	8002bd2 <__swsetup_r+0x1e>
 8002bfa:	4b24      	ldr	r3, [pc, #144]	; (8002c8c <__swsetup_r+0xd8>)
 8002bfc:	429c      	cmp	r4, r3
 8002bfe:	bf08      	it	eq
 8002c00:	68ec      	ldreq	r4, [r5, #12]
 8002c02:	e7e6      	b.n	8002bd2 <__swsetup_r+0x1e>
 8002c04:	0758      	lsls	r0, r3, #29
 8002c06:	d512      	bpl.n	8002c2e <__swsetup_r+0x7a>
 8002c08:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002c0a:	b141      	cbz	r1, 8002c1e <__swsetup_r+0x6a>
 8002c0c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002c10:	4299      	cmp	r1, r3
 8002c12:	d002      	beq.n	8002c1a <__swsetup_r+0x66>
 8002c14:	4630      	mov	r0, r6
 8002c16:	f000 f98f 	bl	8002f38 <_free_r>
 8002c1a:	2300      	movs	r3, #0
 8002c1c:	6363      	str	r3, [r4, #52]	; 0x34
 8002c1e:	89a3      	ldrh	r3, [r4, #12]
 8002c20:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8002c24:	81a3      	strh	r3, [r4, #12]
 8002c26:	2300      	movs	r3, #0
 8002c28:	6063      	str	r3, [r4, #4]
 8002c2a:	6923      	ldr	r3, [r4, #16]
 8002c2c:	6023      	str	r3, [r4, #0]
 8002c2e:	89a3      	ldrh	r3, [r4, #12]
 8002c30:	f043 0308 	orr.w	r3, r3, #8
 8002c34:	81a3      	strh	r3, [r4, #12]
 8002c36:	6923      	ldr	r3, [r4, #16]
 8002c38:	b94b      	cbnz	r3, 8002c4e <__swsetup_r+0x9a>
 8002c3a:	89a3      	ldrh	r3, [r4, #12]
 8002c3c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8002c40:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002c44:	d003      	beq.n	8002c4e <__swsetup_r+0x9a>
 8002c46:	4621      	mov	r1, r4
 8002c48:	4630      	mov	r0, r6
 8002c4a:	f000 f929 	bl	8002ea0 <__smakebuf_r>
 8002c4e:	89a0      	ldrh	r0, [r4, #12]
 8002c50:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002c54:	f010 0301 	ands.w	r3, r0, #1
 8002c58:	d00a      	beq.n	8002c70 <__swsetup_r+0xbc>
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	60a3      	str	r3, [r4, #8]
 8002c5e:	6963      	ldr	r3, [r4, #20]
 8002c60:	425b      	negs	r3, r3
 8002c62:	61a3      	str	r3, [r4, #24]
 8002c64:	6923      	ldr	r3, [r4, #16]
 8002c66:	b943      	cbnz	r3, 8002c7a <__swsetup_r+0xc6>
 8002c68:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8002c6c:	d1ba      	bne.n	8002be4 <__swsetup_r+0x30>
 8002c6e:	bd70      	pop	{r4, r5, r6, pc}
 8002c70:	0781      	lsls	r1, r0, #30
 8002c72:	bf58      	it	pl
 8002c74:	6963      	ldrpl	r3, [r4, #20]
 8002c76:	60a3      	str	r3, [r4, #8]
 8002c78:	e7f4      	b.n	8002c64 <__swsetup_r+0xb0>
 8002c7a:	2000      	movs	r0, #0
 8002c7c:	e7f7      	b.n	8002c6e <__swsetup_r+0xba>
 8002c7e:	bf00      	nop
 8002c80:	20000018 	.word	0x20000018
 8002c84:	08003114 	.word	0x08003114
 8002c88:	08003134 	.word	0x08003134
 8002c8c:	080030f4 	.word	0x080030f4

08002c90 <_close_r>:
 8002c90:	b538      	push	{r3, r4, r5, lr}
 8002c92:	4d06      	ldr	r5, [pc, #24]	; (8002cac <_close_r+0x1c>)
 8002c94:	2300      	movs	r3, #0
 8002c96:	4604      	mov	r4, r0
 8002c98:	4608      	mov	r0, r1
 8002c9a:	602b      	str	r3, [r5, #0]
 8002c9c:	f7fd fd7b 	bl	8000796 <_close>
 8002ca0:	1c43      	adds	r3, r0, #1
 8002ca2:	d102      	bne.n	8002caa <_close_r+0x1a>
 8002ca4:	682b      	ldr	r3, [r5, #0]
 8002ca6:	b103      	cbz	r3, 8002caa <_close_r+0x1a>
 8002ca8:	6023      	str	r3, [r4, #0]
 8002caa:	bd38      	pop	{r3, r4, r5, pc}
 8002cac:	200000f8 	.word	0x200000f8

08002cb0 <__sflush_r>:
 8002cb0:	898a      	ldrh	r2, [r1, #12]
 8002cb2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002cb6:	4605      	mov	r5, r0
 8002cb8:	0710      	lsls	r0, r2, #28
 8002cba:	460c      	mov	r4, r1
 8002cbc:	d458      	bmi.n	8002d70 <__sflush_r+0xc0>
 8002cbe:	684b      	ldr	r3, [r1, #4]
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	dc05      	bgt.n	8002cd0 <__sflush_r+0x20>
 8002cc4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	dc02      	bgt.n	8002cd0 <__sflush_r+0x20>
 8002cca:	2000      	movs	r0, #0
 8002ccc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002cd0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002cd2:	2e00      	cmp	r6, #0
 8002cd4:	d0f9      	beq.n	8002cca <__sflush_r+0x1a>
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8002cdc:	682f      	ldr	r7, [r5, #0]
 8002cde:	602b      	str	r3, [r5, #0]
 8002ce0:	d032      	beq.n	8002d48 <__sflush_r+0x98>
 8002ce2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002ce4:	89a3      	ldrh	r3, [r4, #12]
 8002ce6:	075a      	lsls	r2, r3, #29
 8002ce8:	d505      	bpl.n	8002cf6 <__sflush_r+0x46>
 8002cea:	6863      	ldr	r3, [r4, #4]
 8002cec:	1ac0      	subs	r0, r0, r3
 8002cee:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002cf0:	b10b      	cbz	r3, 8002cf6 <__sflush_r+0x46>
 8002cf2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002cf4:	1ac0      	subs	r0, r0, r3
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	4602      	mov	r2, r0
 8002cfa:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002cfc:	6a21      	ldr	r1, [r4, #32]
 8002cfe:	4628      	mov	r0, r5
 8002d00:	47b0      	blx	r6
 8002d02:	1c43      	adds	r3, r0, #1
 8002d04:	89a3      	ldrh	r3, [r4, #12]
 8002d06:	d106      	bne.n	8002d16 <__sflush_r+0x66>
 8002d08:	6829      	ldr	r1, [r5, #0]
 8002d0a:	291d      	cmp	r1, #29
 8002d0c:	d82c      	bhi.n	8002d68 <__sflush_r+0xb8>
 8002d0e:	4a2a      	ldr	r2, [pc, #168]	; (8002db8 <__sflush_r+0x108>)
 8002d10:	40ca      	lsrs	r2, r1
 8002d12:	07d6      	lsls	r6, r2, #31
 8002d14:	d528      	bpl.n	8002d68 <__sflush_r+0xb8>
 8002d16:	2200      	movs	r2, #0
 8002d18:	6062      	str	r2, [r4, #4]
 8002d1a:	04d9      	lsls	r1, r3, #19
 8002d1c:	6922      	ldr	r2, [r4, #16]
 8002d1e:	6022      	str	r2, [r4, #0]
 8002d20:	d504      	bpl.n	8002d2c <__sflush_r+0x7c>
 8002d22:	1c42      	adds	r2, r0, #1
 8002d24:	d101      	bne.n	8002d2a <__sflush_r+0x7a>
 8002d26:	682b      	ldr	r3, [r5, #0]
 8002d28:	b903      	cbnz	r3, 8002d2c <__sflush_r+0x7c>
 8002d2a:	6560      	str	r0, [r4, #84]	; 0x54
 8002d2c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002d2e:	602f      	str	r7, [r5, #0]
 8002d30:	2900      	cmp	r1, #0
 8002d32:	d0ca      	beq.n	8002cca <__sflush_r+0x1a>
 8002d34:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002d38:	4299      	cmp	r1, r3
 8002d3a:	d002      	beq.n	8002d42 <__sflush_r+0x92>
 8002d3c:	4628      	mov	r0, r5
 8002d3e:	f000 f8fb 	bl	8002f38 <_free_r>
 8002d42:	2000      	movs	r0, #0
 8002d44:	6360      	str	r0, [r4, #52]	; 0x34
 8002d46:	e7c1      	b.n	8002ccc <__sflush_r+0x1c>
 8002d48:	6a21      	ldr	r1, [r4, #32]
 8002d4a:	2301      	movs	r3, #1
 8002d4c:	4628      	mov	r0, r5
 8002d4e:	47b0      	blx	r6
 8002d50:	1c41      	adds	r1, r0, #1
 8002d52:	d1c7      	bne.n	8002ce4 <__sflush_r+0x34>
 8002d54:	682b      	ldr	r3, [r5, #0]
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d0c4      	beq.n	8002ce4 <__sflush_r+0x34>
 8002d5a:	2b1d      	cmp	r3, #29
 8002d5c:	d001      	beq.n	8002d62 <__sflush_r+0xb2>
 8002d5e:	2b16      	cmp	r3, #22
 8002d60:	d101      	bne.n	8002d66 <__sflush_r+0xb6>
 8002d62:	602f      	str	r7, [r5, #0]
 8002d64:	e7b1      	b.n	8002cca <__sflush_r+0x1a>
 8002d66:	89a3      	ldrh	r3, [r4, #12]
 8002d68:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002d6c:	81a3      	strh	r3, [r4, #12]
 8002d6e:	e7ad      	b.n	8002ccc <__sflush_r+0x1c>
 8002d70:	690f      	ldr	r7, [r1, #16]
 8002d72:	2f00      	cmp	r7, #0
 8002d74:	d0a9      	beq.n	8002cca <__sflush_r+0x1a>
 8002d76:	0793      	lsls	r3, r2, #30
 8002d78:	680e      	ldr	r6, [r1, #0]
 8002d7a:	bf08      	it	eq
 8002d7c:	694b      	ldreq	r3, [r1, #20]
 8002d7e:	600f      	str	r7, [r1, #0]
 8002d80:	bf18      	it	ne
 8002d82:	2300      	movne	r3, #0
 8002d84:	eba6 0807 	sub.w	r8, r6, r7
 8002d88:	608b      	str	r3, [r1, #8]
 8002d8a:	f1b8 0f00 	cmp.w	r8, #0
 8002d8e:	dd9c      	ble.n	8002cca <__sflush_r+0x1a>
 8002d90:	6a21      	ldr	r1, [r4, #32]
 8002d92:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8002d94:	4643      	mov	r3, r8
 8002d96:	463a      	mov	r2, r7
 8002d98:	4628      	mov	r0, r5
 8002d9a:	47b0      	blx	r6
 8002d9c:	2800      	cmp	r0, #0
 8002d9e:	dc06      	bgt.n	8002dae <__sflush_r+0xfe>
 8002da0:	89a3      	ldrh	r3, [r4, #12]
 8002da2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002da6:	81a3      	strh	r3, [r4, #12]
 8002da8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002dac:	e78e      	b.n	8002ccc <__sflush_r+0x1c>
 8002dae:	4407      	add	r7, r0
 8002db0:	eba8 0800 	sub.w	r8, r8, r0
 8002db4:	e7e9      	b.n	8002d8a <__sflush_r+0xda>
 8002db6:	bf00      	nop
 8002db8:	20400001 	.word	0x20400001

08002dbc <_fflush_r>:
 8002dbc:	b538      	push	{r3, r4, r5, lr}
 8002dbe:	690b      	ldr	r3, [r1, #16]
 8002dc0:	4605      	mov	r5, r0
 8002dc2:	460c      	mov	r4, r1
 8002dc4:	b913      	cbnz	r3, 8002dcc <_fflush_r+0x10>
 8002dc6:	2500      	movs	r5, #0
 8002dc8:	4628      	mov	r0, r5
 8002dca:	bd38      	pop	{r3, r4, r5, pc}
 8002dcc:	b118      	cbz	r0, 8002dd6 <_fflush_r+0x1a>
 8002dce:	6983      	ldr	r3, [r0, #24]
 8002dd0:	b90b      	cbnz	r3, 8002dd6 <_fflush_r+0x1a>
 8002dd2:	f7ff fa4f 	bl	8002274 <__sinit>
 8002dd6:	4b14      	ldr	r3, [pc, #80]	; (8002e28 <_fflush_r+0x6c>)
 8002dd8:	429c      	cmp	r4, r3
 8002dda:	d11b      	bne.n	8002e14 <_fflush_r+0x58>
 8002ddc:	686c      	ldr	r4, [r5, #4]
 8002dde:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d0ef      	beq.n	8002dc6 <_fflush_r+0xa>
 8002de6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8002de8:	07d0      	lsls	r0, r2, #31
 8002dea:	d404      	bmi.n	8002df6 <_fflush_r+0x3a>
 8002dec:	0599      	lsls	r1, r3, #22
 8002dee:	d402      	bmi.n	8002df6 <_fflush_r+0x3a>
 8002df0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002df2:	f7ff fadd 	bl	80023b0 <__retarget_lock_acquire_recursive>
 8002df6:	4628      	mov	r0, r5
 8002df8:	4621      	mov	r1, r4
 8002dfa:	f7ff ff59 	bl	8002cb0 <__sflush_r>
 8002dfe:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002e00:	07da      	lsls	r2, r3, #31
 8002e02:	4605      	mov	r5, r0
 8002e04:	d4e0      	bmi.n	8002dc8 <_fflush_r+0xc>
 8002e06:	89a3      	ldrh	r3, [r4, #12]
 8002e08:	059b      	lsls	r3, r3, #22
 8002e0a:	d4dd      	bmi.n	8002dc8 <_fflush_r+0xc>
 8002e0c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002e0e:	f7ff fad0 	bl	80023b2 <__retarget_lock_release_recursive>
 8002e12:	e7d9      	b.n	8002dc8 <_fflush_r+0xc>
 8002e14:	4b05      	ldr	r3, [pc, #20]	; (8002e2c <_fflush_r+0x70>)
 8002e16:	429c      	cmp	r4, r3
 8002e18:	d101      	bne.n	8002e1e <_fflush_r+0x62>
 8002e1a:	68ac      	ldr	r4, [r5, #8]
 8002e1c:	e7df      	b.n	8002dde <_fflush_r+0x22>
 8002e1e:	4b04      	ldr	r3, [pc, #16]	; (8002e30 <_fflush_r+0x74>)
 8002e20:	429c      	cmp	r4, r3
 8002e22:	bf08      	it	eq
 8002e24:	68ec      	ldreq	r4, [r5, #12]
 8002e26:	e7da      	b.n	8002dde <_fflush_r+0x22>
 8002e28:	08003114 	.word	0x08003114
 8002e2c:	08003134 	.word	0x08003134
 8002e30:	080030f4 	.word	0x080030f4

08002e34 <_lseek_r>:
 8002e34:	b538      	push	{r3, r4, r5, lr}
 8002e36:	4d07      	ldr	r5, [pc, #28]	; (8002e54 <_lseek_r+0x20>)
 8002e38:	4604      	mov	r4, r0
 8002e3a:	4608      	mov	r0, r1
 8002e3c:	4611      	mov	r1, r2
 8002e3e:	2200      	movs	r2, #0
 8002e40:	602a      	str	r2, [r5, #0]
 8002e42:	461a      	mov	r2, r3
 8002e44:	f7fd fcce 	bl	80007e4 <_lseek>
 8002e48:	1c43      	adds	r3, r0, #1
 8002e4a:	d102      	bne.n	8002e52 <_lseek_r+0x1e>
 8002e4c:	682b      	ldr	r3, [r5, #0]
 8002e4e:	b103      	cbz	r3, 8002e52 <_lseek_r+0x1e>
 8002e50:	6023      	str	r3, [r4, #0]
 8002e52:	bd38      	pop	{r3, r4, r5, pc}
 8002e54:	200000f8 	.word	0x200000f8

08002e58 <__swhatbuf_r>:
 8002e58:	b570      	push	{r4, r5, r6, lr}
 8002e5a:	460e      	mov	r6, r1
 8002e5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002e60:	2900      	cmp	r1, #0
 8002e62:	b096      	sub	sp, #88	; 0x58
 8002e64:	4614      	mov	r4, r2
 8002e66:	461d      	mov	r5, r3
 8002e68:	da07      	bge.n	8002e7a <__swhatbuf_r+0x22>
 8002e6a:	2300      	movs	r3, #0
 8002e6c:	602b      	str	r3, [r5, #0]
 8002e6e:	89b3      	ldrh	r3, [r6, #12]
 8002e70:	061a      	lsls	r2, r3, #24
 8002e72:	d410      	bmi.n	8002e96 <__swhatbuf_r+0x3e>
 8002e74:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002e78:	e00e      	b.n	8002e98 <__swhatbuf_r+0x40>
 8002e7a:	466a      	mov	r2, sp
 8002e7c:	f000 f8be 	bl	8002ffc <_fstat_r>
 8002e80:	2800      	cmp	r0, #0
 8002e82:	dbf2      	blt.n	8002e6a <__swhatbuf_r+0x12>
 8002e84:	9a01      	ldr	r2, [sp, #4]
 8002e86:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8002e8a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8002e8e:	425a      	negs	r2, r3
 8002e90:	415a      	adcs	r2, r3
 8002e92:	602a      	str	r2, [r5, #0]
 8002e94:	e7ee      	b.n	8002e74 <__swhatbuf_r+0x1c>
 8002e96:	2340      	movs	r3, #64	; 0x40
 8002e98:	2000      	movs	r0, #0
 8002e9a:	6023      	str	r3, [r4, #0]
 8002e9c:	b016      	add	sp, #88	; 0x58
 8002e9e:	bd70      	pop	{r4, r5, r6, pc}

08002ea0 <__smakebuf_r>:
 8002ea0:	898b      	ldrh	r3, [r1, #12]
 8002ea2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002ea4:	079d      	lsls	r5, r3, #30
 8002ea6:	4606      	mov	r6, r0
 8002ea8:	460c      	mov	r4, r1
 8002eaa:	d507      	bpl.n	8002ebc <__smakebuf_r+0x1c>
 8002eac:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8002eb0:	6023      	str	r3, [r4, #0]
 8002eb2:	6123      	str	r3, [r4, #16]
 8002eb4:	2301      	movs	r3, #1
 8002eb6:	6163      	str	r3, [r4, #20]
 8002eb8:	b002      	add	sp, #8
 8002eba:	bd70      	pop	{r4, r5, r6, pc}
 8002ebc:	ab01      	add	r3, sp, #4
 8002ebe:	466a      	mov	r2, sp
 8002ec0:	f7ff ffca 	bl	8002e58 <__swhatbuf_r>
 8002ec4:	9900      	ldr	r1, [sp, #0]
 8002ec6:	4605      	mov	r5, r0
 8002ec8:	4630      	mov	r0, r6
 8002eca:	f7ff fa73 	bl	80023b4 <_malloc_r>
 8002ece:	b948      	cbnz	r0, 8002ee4 <__smakebuf_r+0x44>
 8002ed0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002ed4:	059a      	lsls	r2, r3, #22
 8002ed6:	d4ef      	bmi.n	8002eb8 <__smakebuf_r+0x18>
 8002ed8:	f023 0303 	bic.w	r3, r3, #3
 8002edc:	f043 0302 	orr.w	r3, r3, #2
 8002ee0:	81a3      	strh	r3, [r4, #12]
 8002ee2:	e7e3      	b.n	8002eac <__smakebuf_r+0xc>
 8002ee4:	4b0d      	ldr	r3, [pc, #52]	; (8002f1c <__smakebuf_r+0x7c>)
 8002ee6:	62b3      	str	r3, [r6, #40]	; 0x28
 8002ee8:	89a3      	ldrh	r3, [r4, #12]
 8002eea:	6020      	str	r0, [r4, #0]
 8002eec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ef0:	81a3      	strh	r3, [r4, #12]
 8002ef2:	9b00      	ldr	r3, [sp, #0]
 8002ef4:	6163      	str	r3, [r4, #20]
 8002ef6:	9b01      	ldr	r3, [sp, #4]
 8002ef8:	6120      	str	r0, [r4, #16]
 8002efa:	b15b      	cbz	r3, 8002f14 <__smakebuf_r+0x74>
 8002efc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002f00:	4630      	mov	r0, r6
 8002f02:	f000 f88d 	bl	8003020 <_isatty_r>
 8002f06:	b128      	cbz	r0, 8002f14 <__smakebuf_r+0x74>
 8002f08:	89a3      	ldrh	r3, [r4, #12]
 8002f0a:	f023 0303 	bic.w	r3, r3, #3
 8002f0e:	f043 0301 	orr.w	r3, r3, #1
 8002f12:	81a3      	strh	r3, [r4, #12]
 8002f14:	89a0      	ldrh	r0, [r4, #12]
 8002f16:	4305      	orrs	r5, r0
 8002f18:	81a5      	strh	r5, [r4, #12]
 8002f1a:	e7cd      	b.n	8002eb8 <__smakebuf_r+0x18>
 8002f1c:	0800220d 	.word	0x0800220d

08002f20 <__malloc_lock>:
 8002f20:	4801      	ldr	r0, [pc, #4]	; (8002f28 <__malloc_lock+0x8>)
 8002f22:	f7ff ba45 	b.w	80023b0 <__retarget_lock_acquire_recursive>
 8002f26:	bf00      	nop
 8002f28:	200000f0 	.word	0x200000f0

08002f2c <__malloc_unlock>:
 8002f2c:	4801      	ldr	r0, [pc, #4]	; (8002f34 <__malloc_unlock+0x8>)
 8002f2e:	f7ff ba40 	b.w	80023b2 <__retarget_lock_release_recursive>
 8002f32:	bf00      	nop
 8002f34:	200000f0 	.word	0x200000f0

08002f38 <_free_r>:
 8002f38:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002f3a:	2900      	cmp	r1, #0
 8002f3c:	d048      	beq.n	8002fd0 <_free_r+0x98>
 8002f3e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002f42:	9001      	str	r0, [sp, #4]
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	f1a1 0404 	sub.w	r4, r1, #4
 8002f4a:	bfb8      	it	lt
 8002f4c:	18e4      	addlt	r4, r4, r3
 8002f4e:	f7ff ffe7 	bl	8002f20 <__malloc_lock>
 8002f52:	4a20      	ldr	r2, [pc, #128]	; (8002fd4 <_free_r+0x9c>)
 8002f54:	9801      	ldr	r0, [sp, #4]
 8002f56:	6813      	ldr	r3, [r2, #0]
 8002f58:	4615      	mov	r5, r2
 8002f5a:	b933      	cbnz	r3, 8002f6a <_free_r+0x32>
 8002f5c:	6063      	str	r3, [r4, #4]
 8002f5e:	6014      	str	r4, [r2, #0]
 8002f60:	b003      	add	sp, #12
 8002f62:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002f66:	f7ff bfe1 	b.w	8002f2c <__malloc_unlock>
 8002f6a:	42a3      	cmp	r3, r4
 8002f6c:	d90b      	bls.n	8002f86 <_free_r+0x4e>
 8002f6e:	6821      	ldr	r1, [r4, #0]
 8002f70:	1862      	adds	r2, r4, r1
 8002f72:	4293      	cmp	r3, r2
 8002f74:	bf04      	itt	eq
 8002f76:	681a      	ldreq	r2, [r3, #0]
 8002f78:	685b      	ldreq	r3, [r3, #4]
 8002f7a:	6063      	str	r3, [r4, #4]
 8002f7c:	bf04      	itt	eq
 8002f7e:	1852      	addeq	r2, r2, r1
 8002f80:	6022      	streq	r2, [r4, #0]
 8002f82:	602c      	str	r4, [r5, #0]
 8002f84:	e7ec      	b.n	8002f60 <_free_r+0x28>
 8002f86:	461a      	mov	r2, r3
 8002f88:	685b      	ldr	r3, [r3, #4]
 8002f8a:	b10b      	cbz	r3, 8002f90 <_free_r+0x58>
 8002f8c:	42a3      	cmp	r3, r4
 8002f8e:	d9fa      	bls.n	8002f86 <_free_r+0x4e>
 8002f90:	6811      	ldr	r1, [r2, #0]
 8002f92:	1855      	adds	r5, r2, r1
 8002f94:	42a5      	cmp	r5, r4
 8002f96:	d10b      	bne.n	8002fb0 <_free_r+0x78>
 8002f98:	6824      	ldr	r4, [r4, #0]
 8002f9a:	4421      	add	r1, r4
 8002f9c:	1854      	adds	r4, r2, r1
 8002f9e:	42a3      	cmp	r3, r4
 8002fa0:	6011      	str	r1, [r2, #0]
 8002fa2:	d1dd      	bne.n	8002f60 <_free_r+0x28>
 8002fa4:	681c      	ldr	r4, [r3, #0]
 8002fa6:	685b      	ldr	r3, [r3, #4]
 8002fa8:	6053      	str	r3, [r2, #4]
 8002faa:	4421      	add	r1, r4
 8002fac:	6011      	str	r1, [r2, #0]
 8002fae:	e7d7      	b.n	8002f60 <_free_r+0x28>
 8002fb0:	d902      	bls.n	8002fb8 <_free_r+0x80>
 8002fb2:	230c      	movs	r3, #12
 8002fb4:	6003      	str	r3, [r0, #0]
 8002fb6:	e7d3      	b.n	8002f60 <_free_r+0x28>
 8002fb8:	6825      	ldr	r5, [r4, #0]
 8002fba:	1961      	adds	r1, r4, r5
 8002fbc:	428b      	cmp	r3, r1
 8002fbe:	bf04      	itt	eq
 8002fc0:	6819      	ldreq	r1, [r3, #0]
 8002fc2:	685b      	ldreq	r3, [r3, #4]
 8002fc4:	6063      	str	r3, [r4, #4]
 8002fc6:	bf04      	itt	eq
 8002fc8:	1949      	addeq	r1, r1, r5
 8002fca:	6021      	streq	r1, [r4, #0]
 8002fcc:	6054      	str	r4, [r2, #4]
 8002fce:	e7c7      	b.n	8002f60 <_free_r+0x28>
 8002fd0:	b003      	add	sp, #12
 8002fd2:	bd30      	pop	{r4, r5, pc}
 8002fd4:	2000009c 	.word	0x2000009c

08002fd8 <_read_r>:
 8002fd8:	b538      	push	{r3, r4, r5, lr}
 8002fda:	4d07      	ldr	r5, [pc, #28]	; (8002ff8 <_read_r+0x20>)
 8002fdc:	4604      	mov	r4, r0
 8002fde:	4608      	mov	r0, r1
 8002fe0:	4611      	mov	r1, r2
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	602a      	str	r2, [r5, #0]
 8002fe6:	461a      	mov	r2, r3
 8002fe8:	f7fd fb9c 	bl	8000724 <_read>
 8002fec:	1c43      	adds	r3, r0, #1
 8002fee:	d102      	bne.n	8002ff6 <_read_r+0x1e>
 8002ff0:	682b      	ldr	r3, [r5, #0]
 8002ff2:	b103      	cbz	r3, 8002ff6 <_read_r+0x1e>
 8002ff4:	6023      	str	r3, [r4, #0]
 8002ff6:	bd38      	pop	{r3, r4, r5, pc}
 8002ff8:	200000f8 	.word	0x200000f8

08002ffc <_fstat_r>:
 8002ffc:	b538      	push	{r3, r4, r5, lr}
 8002ffe:	4d07      	ldr	r5, [pc, #28]	; (800301c <_fstat_r+0x20>)
 8003000:	2300      	movs	r3, #0
 8003002:	4604      	mov	r4, r0
 8003004:	4608      	mov	r0, r1
 8003006:	4611      	mov	r1, r2
 8003008:	602b      	str	r3, [r5, #0]
 800300a:	f7fd fbd0 	bl	80007ae <_fstat>
 800300e:	1c43      	adds	r3, r0, #1
 8003010:	d102      	bne.n	8003018 <_fstat_r+0x1c>
 8003012:	682b      	ldr	r3, [r5, #0]
 8003014:	b103      	cbz	r3, 8003018 <_fstat_r+0x1c>
 8003016:	6023      	str	r3, [r4, #0]
 8003018:	bd38      	pop	{r3, r4, r5, pc}
 800301a:	bf00      	nop
 800301c:	200000f8 	.word	0x200000f8

08003020 <_isatty_r>:
 8003020:	b538      	push	{r3, r4, r5, lr}
 8003022:	4d06      	ldr	r5, [pc, #24]	; (800303c <_isatty_r+0x1c>)
 8003024:	2300      	movs	r3, #0
 8003026:	4604      	mov	r4, r0
 8003028:	4608      	mov	r0, r1
 800302a:	602b      	str	r3, [r5, #0]
 800302c:	f7fd fbcf 	bl	80007ce <_isatty>
 8003030:	1c43      	adds	r3, r0, #1
 8003032:	d102      	bne.n	800303a <_isatty_r+0x1a>
 8003034:	682b      	ldr	r3, [r5, #0]
 8003036:	b103      	cbz	r3, 800303a <_isatty_r+0x1a>
 8003038:	6023      	str	r3, [r4, #0]
 800303a:	bd38      	pop	{r3, r4, r5, pc}
 800303c:	200000f8 	.word	0x200000f8

08003040 <_init>:
 8003040:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003042:	bf00      	nop
 8003044:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003046:	bc08      	pop	{r3}
 8003048:	469e      	mov	lr, r3
 800304a:	4770      	bx	lr

0800304c <_fini>:
 800304c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800304e:	bf00      	nop
 8003050:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003052:	bc08      	pop	{r3}
 8003054:	469e      	mov	lr, r3
 8003056:	4770      	bx	lr
