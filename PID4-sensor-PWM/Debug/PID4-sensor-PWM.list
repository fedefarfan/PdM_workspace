
PID4-sensor-PWM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000043ec  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001d4  0800459c  0800459c  0001459c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004770  08004770  000200e4  2**0
                  CONTENTS
  4 .ARM          00000008  08004770  08004770  00014770  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004778  08004778  000200e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004778  08004778  00014778  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800477c  0800477c  0001477c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000e4  20000000  08004780  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000200e4  2**0
                  CONTENTS
 10 .bss          00000cd0  200000e4  200000e4  000200e4  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000db4  20000db4  000200e4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000200e4  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000f113  00000000  00000000  00020114  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002407  00000000  00000000  0002f227  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000870  00000000  00000000  00031630  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000788  00000000  00000000  00031ea0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00003dbd  00000000  00000000  00032628  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000e164  00000000  00000000  000363e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e3814  00000000  00000000  00044549  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00127d5d  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002a20  00000000  00000000  00127db0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200000e4 	.word	0x200000e4
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08004584 	.word	0x08004584

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200000e8 	.word	0x200000e8
 80001ec:	08004584 	.word	0x08004584

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__aeabi_d2f>:
 8000a3c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a40:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a44:	bf24      	itt	cs
 8000a46:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a4a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a4e:	d90d      	bls.n	8000a6c <__aeabi_d2f+0x30>
 8000a50:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a54:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a58:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a5c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a60:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a64:	bf08      	it	eq
 8000a66:	f020 0001 	biceq.w	r0, r0, #1
 8000a6a:	4770      	bx	lr
 8000a6c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a70:	d121      	bne.n	8000ab6 <__aeabi_d2f+0x7a>
 8000a72:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a76:	bfbc      	itt	lt
 8000a78:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a7c:	4770      	bxlt	lr
 8000a7e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a82:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a86:	f1c2 0218 	rsb	r2, r2, #24
 8000a8a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a8e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a92:	fa20 f002 	lsr.w	r0, r0, r2
 8000a96:	bf18      	it	ne
 8000a98:	f040 0001 	orrne.w	r0, r0, #1
 8000a9c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000aa4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000aa8:	ea40 000c 	orr.w	r0, r0, ip
 8000aac:	fa23 f302 	lsr.w	r3, r3, r2
 8000ab0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ab4:	e7cc      	b.n	8000a50 <__aeabi_d2f+0x14>
 8000ab6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000aba:	d107      	bne.n	8000acc <__aeabi_d2f+0x90>
 8000abc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ac0:	bf1e      	ittt	ne
 8000ac2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ac6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000aca:	4770      	bxne	lr
 8000acc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ad0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ad4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ad8:	4770      	bx	lr
 8000ada:	bf00      	nop

08000adc <__aeabi_uldivmod>:
 8000adc:	b953      	cbnz	r3, 8000af4 <__aeabi_uldivmod+0x18>
 8000ade:	b94a      	cbnz	r2, 8000af4 <__aeabi_uldivmod+0x18>
 8000ae0:	2900      	cmp	r1, #0
 8000ae2:	bf08      	it	eq
 8000ae4:	2800      	cmpeq	r0, #0
 8000ae6:	bf1c      	itt	ne
 8000ae8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000aec:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000af0:	f000 b96e 	b.w	8000dd0 <__aeabi_idiv0>
 8000af4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000af8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000afc:	f000 f806 	bl	8000b0c <__udivmoddi4>
 8000b00:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b04:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b08:	b004      	add	sp, #16
 8000b0a:	4770      	bx	lr

08000b0c <__udivmoddi4>:
 8000b0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b10:	9d08      	ldr	r5, [sp, #32]
 8000b12:	4604      	mov	r4, r0
 8000b14:	468c      	mov	ip, r1
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	f040 8083 	bne.w	8000c22 <__udivmoddi4+0x116>
 8000b1c:	428a      	cmp	r2, r1
 8000b1e:	4617      	mov	r7, r2
 8000b20:	d947      	bls.n	8000bb2 <__udivmoddi4+0xa6>
 8000b22:	fab2 f282 	clz	r2, r2
 8000b26:	b142      	cbz	r2, 8000b3a <__udivmoddi4+0x2e>
 8000b28:	f1c2 0020 	rsb	r0, r2, #32
 8000b2c:	fa24 f000 	lsr.w	r0, r4, r0
 8000b30:	4091      	lsls	r1, r2
 8000b32:	4097      	lsls	r7, r2
 8000b34:	ea40 0c01 	orr.w	ip, r0, r1
 8000b38:	4094      	lsls	r4, r2
 8000b3a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000b3e:	0c23      	lsrs	r3, r4, #16
 8000b40:	fbbc f6f8 	udiv	r6, ip, r8
 8000b44:	fa1f fe87 	uxth.w	lr, r7
 8000b48:	fb08 c116 	mls	r1, r8, r6, ip
 8000b4c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b50:	fb06 f10e 	mul.w	r1, r6, lr
 8000b54:	4299      	cmp	r1, r3
 8000b56:	d909      	bls.n	8000b6c <__udivmoddi4+0x60>
 8000b58:	18fb      	adds	r3, r7, r3
 8000b5a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000b5e:	f080 8119 	bcs.w	8000d94 <__udivmoddi4+0x288>
 8000b62:	4299      	cmp	r1, r3
 8000b64:	f240 8116 	bls.w	8000d94 <__udivmoddi4+0x288>
 8000b68:	3e02      	subs	r6, #2
 8000b6a:	443b      	add	r3, r7
 8000b6c:	1a5b      	subs	r3, r3, r1
 8000b6e:	b2a4      	uxth	r4, r4
 8000b70:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b74:	fb08 3310 	mls	r3, r8, r0, r3
 8000b78:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b7c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000b80:	45a6      	cmp	lr, r4
 8000b82:	d909      	bls.n	8000b98 <__udivmoddi4+0x8c>
 8000b84:	193c      	adds	r4, r7, r4
 8000b86:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000b8a:	f080 8105 	bcs.w	8000d98 <__udivmoddi4+0x28c>
 8000b8e:	45a6      	cmp	lr, r4
 8000b90:	f240 8102 	bls.w	8000d98 <__udivmoddi4+0x28c>
 8000b94:	3802      	subs	r0, #2
 8000b96:	443c      	add	r4, r7
 8000b98:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b9c:	eba4 040e 	sub.w	r4, r4, lr
 8000ba0:	2600      	movs	r6, #0
 8000ba2:	b11d      	cbz	r5, 8000bac <__udivmoddi4+0xa0>
 8000ba4:	40d4      	lsrs	r4, r2
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	e9c5 4300 	strd	r4, r3, [r5]
 8000bac:	4631      	mov	r1, r6
 8000bae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bb2:	b902      	cbnz	r2, 8000bb6 <__udivmoddi4+0xaa>
 8000bb4:	deff      	udf	#255	; 0xff
 8000bb6:	fab2 f282 	clz	r2, r2
 8000bba:	2a00      	cmp	r2, #0
 8000bbc:	d150      	bne.n	8000c60 <__udivmoddi4+0x154>
 8000bbe:	1bcb      	subs	r3, r1, r7
 8000bc0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000bc4:	fa1f f887 	uxth.w	r8, r7
 8000bc8:	2601      	movs	r6, #1
 8000bca:	fbb3 fcfe 	udiv	ip, r3, lr
 8000bce:	0c21      	lsrs	r1, r4, #16
 8000bd0:	fb0e 331c 	mls	r3, lr, ip, r3
 8000bd4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000bd8:	fb08 f30c 	mul.w	r3, r8, ip
 8000bdc:	428b      	cmp	r3, r1
 8000bde:	d907      	bls.n	8000bf0 <__udivmoddi4+0xe4>
 8000be0:	1879      	adds	r1, r7, r1
 8000be2:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000be6:	d202      	bcs.n	8000bee <__udivmoddi4+0xe2>
 8000be8:	428b      	cmp	r3, r1
 8000bea:	f200 80e9 	bhi.w	8000dc0 <__udivmoddi4+0x2b4>
 8000bee:	4684      	mov	ip, r0
 8000bf0:	1ac9      	subs	r1, r1, r3
 8000bf2:	b2a3      	uxth	r3, r4
 8000bf4:	fbb1 f0fe 	udiv	r0, r1, lr
 8000bf8:	fb0e 1110 	mls	r1, lr, r0, r1
 8000bfc:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000c00:	fb08 f800 	mul.w	r8, r8, r0
 8000c04:	45a0      	cmp	r8, r4
 8000c06:	d907      	bls.n	8000c18 <__udivmoddi4+0x10c>
 8000c08:	193c      	adds	r4, r7, r4
 8000c0a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c0e:	d202      	bcs.n	8000c16 <__udivmoddi4+0x10a>
 8000c10:	45a0      	cmp	r8, r4
 8000c12:	f200 80d9 	bhi.w	8000dc8 <__udivmoddi4+0x2bc>
 8000c16:	4618      	mov	r0, r3
 8000c18:	eba4 0408 	sub.w	r4, r4, r8
 8000c1c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000c20:	e7bf      	b.n	8000ba2 <__udivmoddi4+0x96>
 8000c22:	428b      	cmp	r3, r1
 8000c24:	d909      	bls.n	8000c3a <__udivmoddi4+0x12e>
 8000c26:	2d00      	cmp	r5, #0
 8000c28:	f000 80b1 	beq.w	8000d8e <__udivmoddi4+0x282>
 8000c2c:	2600      	movs	r6, #0
 8000c2e:	e9c5 0100 	strd	r0, r1, [r5]
 8000c32:	4630      	mov	r0, r6
 8000c34:	4631      	mov	r1, r6
 8000c36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c3a:	fab3 f683 	clz	r6, r3
 8000c3e:	2e00      	cmp	r6, #0
 8000c40:	d14a      	bne.n	8000cd8 <__udivmoddi4+0x1cc>
 8000c42:	428b      	cmp	r3, r1
 8000c44:	d302      	bcc.n	8000c4c <__udivmoddi4+0x140>
 8000c46:	4282      	cmp	r2, r0
 8000c48:	f200 80b8 	bhi.w	8000dbc <__udivmoddi4+0x2b0>
 8000c4c:	1a84      	subs	r4, r0, r2
 8000c4e:	eb61 0103 	sbc.w	r1, r1, r3
 8000c52:	2001      	movs	r0, #1
 8000c54:	468c      	mov	ip, r1
 8000c56:	2d00      	cmp	r5, #0
 8000c58:	d0a8      	beq.n	8000bac <__udivmoddi4+0xa0>
 8000c5a:	e9c5 4c00 	strd	r4, ip, [r5]
 8000c5e:	e7a5      	b.n	8000bac <__udivmoddi4+0xa0>
 8000c60:	f1c2 0320 	rsb	r3, r2, #32
 8000c64:	fa20 f603 	lsr.w	r6, r0, r3
 8000c68:	4097      	lsls	r7, r2
 8000c6a:	fa01 f002 	lsl.w	r0, r1, r2
 8000c6e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c72:	40d9      	lsrs	r1, r3
 8000c74:	4330      	orrs	r0, r6
 8000c76:	0c03      	lsrs	r3, r0, #16
 8000c78:	fbb1 f6fe 	udiv	r6, r1, lr
 8000c7c:	fa1f f887 	uxth.w	r8, r7
 8000c80:	fb0e 1116 	mls	r1, lr, r6, r1
 8000c84:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c88:	fb06 f108 	mul.w	r1, r6, r8
 8000c8c:	4299      	cmp	r1, r3
 8000c8e:	fa04 f402 	lsl.w	r4, r4, r2
 8000c92:	d909      	bls.n	8000ca8 <__udivmoddi4+0x19c>
 8000c94:	18fb      	adds	r3, r7, r3
 8000c96:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000c9a:	f080 808d 	bcs.w	8000db8 <__udivmoddi4+0x2ac>
 8000c9e:	4299      	cmp	r1, r3
 8000ca0:	f240 808a 	bls.w	8000db8 <__udivmoddi4+0x2ac>
 8000ca4:	3e02      	subs	r6, #2
 8000ca6:	443b      	add	r3, r7
 8000ca8:	1a5b      	subs	r3, r3, r1
 8000caa:	b281      	uxth	r1, r0
 8000cac:	fbb3 f0fe 	udiv	r0, r3, lr
 8000cb0:	fb0e 3310 	mls	r3, lr, r0, r3
 8000cb4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cb8:	fb00 f308 	mul.w	r3, r0, r8
 8000cbc:	428b      	cmp	r3, r1
 8000cbe:	d907      	bls.n	8000cd0 <__udivmoddi4+0x1c4>
 8000cc0:	1879      	adds	r1, r7, r1
 8000cc2:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000cc6:	d273      	bcs.n	8000db0 <__udivmoddi4+0x2a4>
 8000cc8:	428b      	cmp	r3, r1
 8000cca:	d971      	bls.n	8000db0 <__udivmoddi4+0x2a4>
 8000ccc:	3802      	subs	r0, #2
 8000cce:	4439      	add	r1, r7
 8000cd0:	1acb      	subs	r3, r1, r3
 8000cd2:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000cd6:	e778      	b.n	8000bca <__udivmoddi4+0xbe>
 8000cd8:	f1c6 0c20 	rsb	ip, r6, #32
 8000cdc:	fa03 f406 	lsl.w	r4, r3, r6
 8000ce0:	fa22 f30c 	lsr.w	r3, r2, ip
 8000ce4:	431c      	orrs	r4, r3
 8000ce6:	fa20 f70c 	lsr.w	r7, r0, ip
 8000cea:	fa01 f306 	lsl.w	r3, r1, r6
 8000cee:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000cf2:	fa21 f10c 	lsr.w	r1, r1, ip
 8000cf6:	431f      	orrs	r7, r3
 8000cf8:	0c3b      	lsrs	r3, r7, #16
 8000cfa:	fbb1 f9fe 	udiv	r9, r1, lr
 8000cfe:	fa1f f884 	uxth.w	r8, r4
 8000d02:	fb0e 1119 	mls	r1, lr, r9, r1
 8000d06:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000d0a:	fb09 fa08 	mul.w	sl, r9, r8
 8000d0e:	458a      	cmp	sl, r1
 8000d10:	fa02 f206 	lsl.w	r2, r2, r6
 8000d14:	fa00 f306 	lsl.w	r3, r0, r6
 8000d18:	d908      	bls.n	8000d2c <__udivmoddi4+0x220>
 8000d1a:	1861      	adds	r1, r4, r1
 8000d1c:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000d20:	d248      	bcs.n	8000db4 <__udivmoddi4+0x2a8>
 8000d22:	458a      	cmp	sl, r1
 8000d24:	d946      	bls.n	8000db4 <__udivmoddi4+0x2a8>
 8000d26:	f1a9 0902 	sub.w	r9, r9, #2
 8000d2a:	4421      	add	r1, r4
 8000d2c:	eba1 010a 	sub.w	r1, r1, sl
 8000d30:	b2bf      	uxth	r7, r7
 8000d32:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d36:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d3a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000d3e:	fb00 f808 	mul.w	r8, r0, r8
 8000d42:	45b8      	cmp	r8, r7
 8000d44:	d907      	bls.n	8000d56 <__udivmoddi4+0x24a>
 8000d46:	19e7      	adds	r7, r4, r7
 8000d48:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000d4c:	d22e      	bcs.n	8000dac <__udivmoddi4+0x2a0>
 8000d4e:	45b8      	cmp	r8, r7
 8000d50:	d92c      	bls.n	8000dac <__udivmoddi4+0x2a0>
 8000d52:	3802      	subs	r0, #2
 8000d54:	4427      	add	r7, r4
 8000d56:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000d5a:	eba7 0708 	sub.w	r7, r7, r8
 8000d5e:	fba0 8902 	umull	r8, r9, r0, r2
 8000d62:	454f      	cmp	r7, r9
 8000d64:	46c6      	mov	lr, r8
 8000d66:	4649      	mov	r1, r9
 8000d68:	d31a      	bcc.n	8000da0 <__udivmoddi4+0x294>
 8000d6a:	d017      	beq.n	8000d9c <__udivmoddi4+0x290>
 8000d6c:	b15d      	cbz	r5, 8000d86 <__udivmoddi4+0x27a>
 8000d6e:	ebb3 020e 	subs.w	r2, r3, lr
 8000d72:	eb67 0701 	sbc.w	r7, r7, r1
 8000d76:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000d7a:	40f2      	lsrs	r2, r6
 8000d7c:	ea4c 0202 	orr.w	r2, ip, r2
 8000d80:	40f7      	lsrs	r7, r6
 8000d82:	e9c5 2700 	strd	r2, r7, [r5]
 8000d86:	2600      	movs	r6, #0
 8000d88:	4631      	mov	r1, r6
 8000d8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d8e:	462e      	mov	r6, r5
 8000d90:	4628      	mov	r0, r5
 8000d92:	e70b      	b.n	8000bac <__udivmoddi4+0xa0>
 8000d94:	4606      	mov	r6, r0
 8000d96:	e6e9      	b.n	8000b6c <__udivmoddi4+0x60>
 8000d98:	4618      	mov	r0, r3
 8000d9a:	e6fd      	b.n	8000b98 <__udivmoddi4+0x8c>
 8000d9c:	4543      	cmp	r3, r8
 8000d9e:	d2e5      	bcs.n	8000d6c <__udivmoddi4+0x260>
 8000da0:	ebb8 0e02 	subs.w	lr, r8, r2
 8000da4:	eb69 0104 	sbc.w	r1, r9, r4
 8000da8:	3801      	subs	r0, #1
 8000daa:	e7df      	b.n	8000d6c <__udivmoddi4+0x260>
 8000dac:	4608      	mov	r0, r1
 8000dae:	e7d2      	b.n	8000d56 <__udivmoddi4+0x24a>
 8000db0:	4660      	mov	r0, ip
 8000db2:	e78d      	b.n	8000cd0 <__udivmoddi4+0x1c4>
 8000db4:	4681      	mov	r9, r0
 8000db6:	e7b9      	b.n	8000d2c <__udivmoddi4+0x220>
 8000db8:	4666      	mov	r6, ip
 8000dba:	e775      	b.n	8000ca8 <__udivmoddi4+0x19c>
 8000dbc:	4630      	mov	r0, r6
 8000dbe:	e74a      	b.n	8000c56 <__udivmoddi4+0x14a>
 8000dc0:	f1ac 0c02 	sub.w	ip, ip, #2
 8000dc4:	4439      	add	r1, r7
 8000dc6:	e713      	b.n	8000bf0 <__udivmoddi4+0xe4>
 8000dc8:	3802      	subs	r0, #2
 8000dca:	443c      	add	r4, r7
 8000dcc:	e724      	b.n	8000c18 <__udivmoddi4+0x10c>
 8000dce:	bf00      	nop

08000dd0 <__aeabi_idiv0>:
 8000dd0:	4770      	bx	lr
 8000dd2:	bf00      	nop

08000dd4 <uartInit>:
//////////#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
//////////#endif /* __GNUC__ */
//static void SystemClock_Config(void);
//static void Error_Handler(void);

void uartInit(void){
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	af00      	add	r7, sp, #0
	 HAL_Init();
 8000dd8:	f000 fb3c 	bl	8001454 <HAL_Init>

	  /* Configure the system clock to 180 MHz */
	  SystemClock_Config();
 8000ddc:	f000 f94c 	bl	8001078 <SystemClock_Config>
	  BSP_LED_Init(LED2);
 8000de0:	2001      	movs	r0, #1
 8000de2:	f000 f9ab 	bl	800113c <BSP_LED_Init>

	  UartHandle.Instance        = USARTx;
 8000de6:	4b4b      	ldr	r3, [pc, #300]	; (8000f14 <uartInit+0x140>)
 8000de8:	4a4b      	ldr	r2, [pc, #300]	; (8000f18 <uartInit+0x144>)
 8000dea:	601a      	str	r2, [r3, #0]
	  UartHandle.Init.BaudRate   = 9600;
 8000dec:	4b49      	ldr	r3, [pc, #292]	; (8000f14 <uartInit+0x140>)
 8000dee:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000df2:	605a      	str	r2, [r3, #4]
	  UartHandle.Init.WordLength = UART_WORDLENGTH_8B;
 8000df4:	4b47      	ldr	r3, [pc, #284]	; (8000f14 <uartInit+0x140>)
 8000df6:	2200      	movs	r2, #0
 8000df8:	609a      	str	r2, [r3, #8]
	  UartHandle.Init.StopBits   = UART_STOPBITS_1;
 8000dfa:	4b46      	ldr	r3, [pc, #280]	; (8000f14 <uartInit+0x140>)
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	60da      	str	r2, [r3, #12]
	  UartHandle.Init.Parity     = UART_PARITY_ODD;
 8000e00:	4b44      	ldr	r3, [pc, #272]	; (8000f14 <uartInit+0x140>)
 8000e02:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8000e06:	611a      	str	r2, [r3, #16]
	  UartHandle.Init.HwFlowCtl  = UART_HWCONTROL_NONE;
 8000e08:	4b42      	ldr	r3, [pc, #264]	; (8000f14 <uartInit+0x140>)
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	619a      	str	r2, [r3, #24]
	  UartHandle.Init.Mode       = UART_MODE_TX_RX;
 8000e0e:	4b41      	ldr	r3, [pc, #260]	; (8000f14 <uartInit+0x140>)
 8000e10:	220c      	movs	r2, #12
 8000e12:	615a      	str	r2, [r3, #20]
	  UartHandle.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e14:	4b3f      	ldr	r3, [pc, #252]	; (8000f14 <uartInit+0x140>)
 8000e16:	2200      	movs	r2, #0
 8000e18:	61da      	str	r2, [r3, #28]


	  UartHandle2.Instance        = USARTx2;
 8000e1a:	4b40      	ldr	r3, [pc, #256]	; (8000f1c <uartInit+0x148>)
 8000e1c:	4a40      	ldr	r2, [pc, #256]	; (8000f20 <uartInit+0x14c>)
 8000e1e:	601a      	str	r2, [r3, #0]
	  UartHandle2.Init.BaudRate   = 9600;
 8000e20:	4b3e      	ldr	r3, [pc, #248]	; (8000f1c <uartInit+0x148>)
 8000e22:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000e26:	605a      	str	r2, [r3, #4]
	  UartHandle2.Init.WordLength = UART_WORDLENGTH_8B;
 8000e28:	4b3c      	ldr	r3, [pc, #240]	; (8000f1c <uartInit+0x148>)
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	609a      	str	r2, [r3, #8]
	  UartHandle2.Init.StopBits   = UART_STOPBITS_1;
 8000e2e:	4b3b      	ldr	r3, [pc, #236]	; (8000f1c <uartInit+0x148>)
 8000e30:	2200      	movs	r2, #0
 8000e32:	60da      	str	r2, [r3, #12]
	  UartHandle2.Init.Parity     = UART_PARITY_NONE;//UART_PARITY_ODD;
 8000e34:	4b39      	ldr	r3, [pc, #228]	; (8000f1c <uartInit+0x148>)
 8000e36:	2200      	movs	r2, #0
 8000e38:	611a      	str	r2, [r3, #16]
	  UartHandle2.Init.HwFlowCtl  = UART_HWCONTROL_NONE;
 8000e3a:	4b38      	ldr	r3, [pc, #224]	; (8000f1c <uartInit+0x148>)
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	619a      	str	r2, [r3, #24]
	  UartHandle2.Init.Mode       = UART_MODE_TX_RX;
 8000e40:	4b36      	ldr	r3, [pc, #216]	; (8000f1c <uartInit+0x148>)
 8000e42:	220c      	movs	r2, #12
 8000e44:	615a      	str	r2, [r3, #20]
	  UartHandle2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e46:	4b35      	ldr	r3, [pc, #212]	; (8000f1c <uartInit+0x148>)
 8000e48:	2200      	movs	r2, #0
 8000e4a:	61da      	str	r2, [r3, #28]

	  if (HAL_UART_Init(&UartHandle) != HAL_OK)
 8000e4c:	4831      	ldr	r0, [pc, #196]	; (8000f14 <uartInit+0x140>)
 8000e4e:	f001 fb07 	bl	8002460 <HAL_UART_Init>
 8000e52:	4603      	mov	r3, r0
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d001      	beq.n	8000e5c <uartInit+0x88>
	   {
	     // Initialization Error
		  	     Error_Handler();
 8000e58:	f000 f908 	bl	800106c <Error_Handler>
	   }
	  if (HAL_UART_Init(&UartHandle2) != HAL_OK)
 8000e5c:	482f      	ldr	r0, [pc, #188]	; (8000f1c <uartInit+0x148>)
 8000e5e:	f001 faff 	bl	8002460 <HAL_UART_Init>
 8000e62:	4603      	mov	r3, r0
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d001      	beq.n	8000e6c <uartInit+0x98>
	 	   {
	 	     // Initialization Error
	 		  	     Error_Handler();
 8000e68:	f000 f900 	bl	800106c <Error_Handler>
	  if (HAL_UART_Init(&USART6) != HAL_OK)
	 	   {
	 	     // Initialization Error
	 		  	     Error_Handler();
	 	   }*/
	  printf("\n\r INICIAMOS UART \n\r");
 8000e6c:	482d      	ldr	r0, [pc, #180]	; (8000f24 <uartInit+0x150>)
 8000e6e:	f002 fa61 	bl	8003334 <iprintf>
	  numero=UartHandle.Init.BaudRate ;
 8000e72:	4b28      	ldr	r3, [pc, #160]	; (8000f14 <uartInit+0x140>)
 8000e74:	685b      	ldr	r3, [r3, #4]
 8000e76:	461a      	mov	r2, r3
 8000e78:	4b2b      	ldr	r3, [pc, #172]	; (8000f28 <uartInit+0x154>)
 8000e7a:	601a      	str	r2, [r3, #0]
	  sprintf(buffer,"\n\r Configuracion 1; Baud Rate  %d  \n\r",numero);
 8000e7c:	4b2a      	ldr	r3, [pc, #168]	; (8000f28 <uartInit+0x154>)
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	461a      	mov	r2, r3
 8000e82:	492a      	ldr	r1, [pc, #168]	; (8000f2c <uartInit+0x158>)
 8000e84:	482a      	ldr	r0, [pc, #168]	; (8000f30 <uartInit+0x15c>)
 8000e86:	f002 fa6d 	bl	8003364 <siprintf>
	  HAL_UART_Transmit(&UartHandle,(uint8_t *) buffer, strlen(buffer), 5000);
 8000e8a:	4829      	ldr	r0, [pc, #164]	; (8000f30 <uartInit+0x15c>)
 8000e8c:	f7ff f9b0 	bl	80001f0 <strlen>
 8000e90:	4603      	mov	r3, r0
 8000e92:	b29a      	uxth	r2, r3
 8000e94:	f241 3388 	movw	r3, #5000	; 0x1388
 8000e98:	4925      	ldr	r1, [pc, #148]	; (8000f30 <uartInit+0x15c>)
 8000e9a:	481e      	ldr	r0, [pc, #120]	; (8000f14 <uartInit+0x140>)
 8000e9c:	f001 fb2d 	bl	80024fa <HAL_UART_Transmit>


	  sprintf(buffer,"\n\r Configuracion 2; %s  \n\r",pp);
 8000ea0:	4a24      	ldr	r2, [pc, #144]	; (8000f34 <uartInit+0x160>)
 8000ea2:	4925      	ldr	r1, [pc, #148]	; (8000f38 <uartInit+0x164>)
 8000ea4:	4822      	ldr	r0, [pc, #136]	; (8000f30 <uartInit+0x15c>)
 8000ea6:	f002 fa5d 	bl	8003364 <siprintf>
	  HAL_UART_Transmit(&UartHandle,(uint8_t *) buffer, strlen(buffer), 5000);
 8000eaa:	4821      	ldr	r0, [pc, #132]	; (8000f30 <uartInit+0x15c>)
 8000eac:	f7ff f9a0 	bl	80001f0 <strlen>
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	b29a      	uxth	r2, r3
 8000eb4:	f241 3388 	movw	r3, #5000	; 0x1388
 8000eb8:	491d      	ldr	r1, [pc, #116]	; (8000f30 <uartInit+0x15c>)
 8000eba:	4816      	ldr	r0, [pc, #88]	; (8000f14 <uartInit+0x140>)
 8000ebc:	f001 fb1d 	bl	80024fa <HAL_UART_Transmit>

	  numero=1;
 8000ec0:	4b19      	ldr	r3, [pc, #100]	; (8000f28 <uartInit+0x154>)
 8000ec2:	2201      	movs	r2, #1
 8000ec4:	601a      	str	r2, [r3, #0]

	  sprintf(buffer," %d\n",numero);
 8000ec6:	4b18      	ldr	r3, [pc, #96]	; (8000f28 <uartInit+0x154>)
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	461a      	mov	r2, r3
 8000ecc:	491b      	ldr	r1, [pc, #108]	; (8000f3c <uartInit+0x168>)
 8000ece:	4818      	ldr	r0, [pc, #96]	; (8000f30 <uartInit+0x15c>)
 8000ed0:	f002 fa48 	bl	8003364 <siprintf>
  	  HAL_UART_Transmit(&UartHandle,(uint8_t *) buffer, strlen(buffer), 5000);
 8000ed4:	4816      	ldr	r0, [pc, #88]	; (8000f30 <uartInit+0x15c>)
 8000ed6:	f7ff f98b 	bl	80001f0 <strlen>
 8000eda:	4603      	mov	r3, r0
 8000edc:	b29a      	uxth	r2, r3
 8000ede:	f241 3388 	movw	r3, #5000	; 0x1388
 8000ee2:	4913      	ldr	r1, [pc, #76]	; (8000f30 <uartInit+0x15c>)
 8000ee4:	480b      	ldr	r0, [pc, #44]	; (8000f14 <uartInit+0x140>)
 8000ee6:	f001 fb08 	bl	80024fa <HAL_UART_Transmit>
	  //	UART2
	  sprintf(buffer," %d\n",numero);
 8000eea:	4b0f      	ldr	r3, [pc, #60]	; (8000f28 <uartInit+0x154>)
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	461a      	mov	r2, r3
 8000ef0:	4912      	ldr	r1, [pc, #72]	; (8000f3c <uartInit+0x168>)
 8000ef2:	480f      	ldr	r0, [pc, #60]	; (8000f30 <uartInit+0x15c>)
 8000ef4:	f002 fa36 	bl	8003364 <siprintf>
	  HAL_UART_Transmit(&UartHandle2,(uint8_t *) buffer, strlen(buffer), 5000);
 8000ef8:	480d      	ldr	r0, [pc, #52]	; (8000f30 <uartInit+0x15c>)
 8000efa:	f7ff f979 	bl	80001f0 <strlen>
 8000efe:	4603      	mov	r3, r0
 8000f00:	b29a      	uxth	r2, r3
 8000f02:	f241 3388 	movw	r3, #5000	; 0x1388
 8000f06:	490a      	ldr	r1, [pc, #40]	; (8000f30 <uartInit+0x15c>)
 8000f08:	4804      	ldr	r0, [pc, #16]	; (8000f1c <uartInit+0x148>)
 8000f0a:	f001 faf6 	bl	80024fa <HAL_UART_Transmit>

}
 8000f0e:	bf00      	nop
 8000f10:	bd80      	pop	{r7, pc}
 8000f12:	bf00      	nop
 8000f14:	20000188 	.word	0x20000188
 8000f18:	40004800 	.word	0x40004800
 8000f1c:	20000144 	.word	0x20000144
 8000f20:	40011400 	.word	0x40011400
 8000f24:	0800459c 	.word	0x0800459c
 8000f28:	200001d4 	.word	0x200001d4
 8000f2c:	080045b4 	.word	0x080045b4
 8000f30:	200001ec 	.word	0x200001ec
 8000f34:	20000000 	.word	0x20000000
 8000f38:	080045dc 	.word	0x080045dc
 8000f3c:	080045f8 	.word	0x080045f8

08000f40 <HAL_UART_MspInit>:


}

void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b08e      	sub	sp, #56	; 0x38
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  GPIO_InitStruct;


  //##-1- Enable peripherals and GPIO Clocks #################################
  // Enable GPIO TX/RX clock
  USARTx_TX_GPIO_CLK_ENABLE();
 8000f48:	2300      	movs	r3, #0
 8000f4a:	623b      	str	r3, [r7, #32]
 8000f4c:	4b45      	ldr	r3, [pc, #276]	; (8001064 <HAL_UART_MspInit+0x124>)
 8000f4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f50:	4a44      	ldr	r2, [pc, #272]	; (8001064 <HAL_UART_MspInit+0x124>)
 8000f52:	f043 0308 	orr.w	r3, r3, #8
 8000f56:	6313      	str	r3, [r2, #48]	; 0x30
 8000f58:	4b42      	ldr	r3, [pc, #264]	; (8001064 <HAL_UART_MspInit+0x124>)
 8000f5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f5c:	f003 0308 	and.w	r3, r3, #8
 8000f60:	623b      	str	r3, [r7, #32]
 8000f62:	6a3b      	ldr	r3, [r7, #32]
  USARTx_RX_GPIO_CLK_ENABLE();
 8000f64:	2300      	movs	r3, #0
 8000f66:	61fb      	str	r3, [r7, #28]
 8000f68:	4b3e      	ldr	r3, [pc, #248]	; (8001064 <HAL_UART_MspInit+0x124>)
 8000f6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f6c:	4a3d      	ldr	r2, [pc, #244]	; (8001064 <HAL_UART_MspInit+0x124>)
 8000f6e:	f043 0308 	orr.w	r3, r3, #8
 8000f72:	6313      	str	r3, [r2, #48]	; 0x30
 8000f74:	4b3b      	ldr	r3, [pc, #236]	; (8001064 <HAL_UART_MspInit+0x124>)
 8000f76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f78:	f003 0308 	and.w	r3, r3, #8
 8000f7c:	61fb      	str	r3, [r7, #28]
 8000f7e:	69fb      	ldr	r3, [r7, #28]


  // Enable USARTx clock
  USARTx_CLK_ENABLE();
 8000f80:	2300      	movs	r3, #0
 8000f82:	61bb      	str	r3, [r7, #24]
 8000f84:	4b37      	ldr	r3, [pc, #220]	; (8001064 <HAL_UART_MspInit+0x124>)
 8000f86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f88:	4a36      	ldr	r2, [pc, #216]	; (8001064 <HAL_UART_MspInit+0x124>)
 8000f8a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f8e:	6413      	str	r3, [r2, #64]	; 0x40
 8000f90:	4b34      	ldr	r3, [pc, #208]	; (8001064 <HAL_UART_MspInit+0x124>)
 8000f92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f94:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000f98:	61bb      	str	r3, [r7, #24]
 8000f9a:	69bb      	ldr	r3, [r7, #24]

  ///////////////////////////////
  //YO
  //////////////////////////////
  USARTx_TX_GPIO_CLK_ENABLE2();
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	617b      	str	r3, [r7, #20]
 8000fa0:	4b30      	ldr	r3, [pc, #192]	; (8001064 <HAL_UART_MspInit+0x124>)
 8000fa2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fa4:	4a2f      	ldr	r2, [pc, #188]	; (8001064 <HAL_UART_MspInit+0x124>)
 8000fa6:	f043 0308 	orr.w	r3, r3, #8
 8000faa:	6313      	str	r3, [r2, #48]	; 0x30
 8000fac:	4b2d      	ldr	r3, [pc, #180]	; (8001064 <HAL_UART_MspInit+0x124>)
 8000fae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fb0:	f003 0308 	and.w	r3, r3, #8
 8000fb4:	617b      	str	r3, [r7, #20]
 8000fb6:	697b      	ldr	r3, [r7, #20]
  USARTx_RX_GPIO_CLK_ENABLE2();
 8000fb8:	2300      	movs	r3, #0
 8000fba:	613b      	str	r3, [r7, #16]
 8000fbc:	4b29      	ldr	r3, [pc, #164]	; (8001064 <HAL_UART_MspInit+0x124>)
 8000fbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fc0:	4a28      	ldr	r2, [pc, #160]	; (8001064 <HAL_UART_MspInit+0x124>)
 8000fc2:	f043 0308 	orr.w	r3, r3, #8
 8000fc6:	6313      	str	r3, [r2, #48]	; 0x30
 8000fc8:	4b26      	ldr	r3, [pc, #152]	; (8001064 <HAL_UART_MspInit+0x124>)
 8000fca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fcc:	f003 0308 	and.w	r3, r3, #8
 8000fd0:	613b      	str	r3, [r7, #16]
 8000fd2:	693b      	ldr	r3, [r7, #16]


  // Enable USARTx clock
  USARTx_CLK_ENABLE2();
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	60fb      	str	r3, [r7, #12]
 8000fd8:	4b22      	ldr	r3, [pc, #136]	; (8001064 <HAL_UART_MspInit+0x124>)
 8000fda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fdc:	4a21      	ldr	r2, [pc, #132]	; (8001064 <HAL_UART_MspInit+0x124>)
 8000fde:	f043 0320 	orr.w	r3, r3, #32
 8000fe2:	6453      	str	r3, [r2, #68]	; 0x44
 8000fe4:	4b1f      	ldr	r3, [pc, #124]	; (8001064 <HAL_UART_MspInit+0x124>)
 8000fe6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fe8:	f003 0320 	and.w	r3, r3, #32
 8000fec:	60fb      	str	r3, [r7, #12]
 8000fee:	68fb      	ldr	r3, [r7, #12]



  //##-2- Configure peripheral GPIO ##########################################
  // UART TX GPIO pin configuration
  GPIO_InitStruct.Pin       = USARTx_TX_PIN;
 8000ff0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ff4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 8000ff6:	2302      	movs	r3, #2
 8000ff8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull      = GPIO_PULLUP;
 8000ffa:	2301      	movs	r3, #1
 8000ffc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ffe:	2303      	movs	r3, #3
 8001000:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = USARTx_TX_AF;
 8001002:	2307      	movs	r3, #7
 8001004:	637b      	str	r3, [r7, #52]	; 0x34

  HAL_GPIO_Init(USARTx_TX_GPIO_PORT, &GPIO_InitStruct);
 8001006:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800100a:	4619      	mov	r1, r3
 800100c:	4816      	ldr	r0, [pc, #88]	; (8001068 <HAL_UART_MspInit+0x128>)
 800100e:	f000 fb97 	bl	8001740 <HAL_GPIO_Init>

  /////////////////////////////////////////
  //
  ////////////////////////////////////////
  GPIO_InitStruct.Pin       = USARTx_TX_PIN2;
 8001012:	2380      	movs	r3, #128	; 0x80
 8001014:	627b      	str	r3, [r7, #36]	; 0x24
   GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 8001016:	2302      	movs	r3, #2
 8001018:	62bb      	str	r3, [r7, #40]	; 0x28
   GPIO_InitStruct.Pull      = GPIO_PULLUP;
 800101a:	2301      	movs	r3, #1
 800101c:	62fb      	str	r3, [r7, #44]	; 0x2c
   GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 800101e:	2303      	movs	r3, #3
 8001020:	633b      	str	r3, [r7, #48]	; 0x30
   GPIO_InitStruct.Alternate = USARTx_TX_AF;
 8001022:	2307      	movs	r3, #7
 8001024:	637b      	str	r3, [r7, #52]	; 0x34

   HAL_GPIO_Init(USARTx_TX_GPIO_PORT2, &GPIO_InitStruct);
 8001026:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800102a:	4619      	mov	r1, r3
 800102c:	480e      	ldr	r0, [pc, #56]	; (8001068 <HAL_UART_MspInit+0x128>)
 800102e:	f000 fb87 	bl	8001740 <HAL_GPIO_Init>




  // UART RX GPIO pin configuration
  GPIO_InitStruct.Pin = USARTx_RX_PIN;
 8001032:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001036:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Alternate = USARTx_RX_AF;
 8001038:	2307      	movs	r3, #7
 800103a:	637b      	str	r3, [r7, #52]	; 0x34

  HAL_GPIO_Init(USARTx_RX_GPIO_PORT, &GPIO_InitStruct);
 800103c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001040:	4619      	mov	r1, r3
 8001042:	4809      	ldr	r0, [pc, #36]	; (8001068 <HAL_UART_MspInit+0x128>)
 8001044:	f000 fb7c 	bl	8001740 <HAL_GPIO_Init>


  ////////////////////////
  //yo
  ////////////////////////
  GPIO_InitStruct.Pin = USARTx_RX_PIN2;
 8001048:	2340      	movs	r3, #64	; 0x40
 800104a:	627b      	str	r3, [r7, #36]	; 0x24
   GPIO_InitStruct.Alternate = USARTx_RX_AF2;
 800104c:	2308      	movs	r3, #8
 800104e:	637b      	str	r3, [r7, #52]	; 0x34

   HAL_GPIO_Init(USARTx_RX_GPIO_PORT2, &GPIO_InitStruct);
 8001050:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001054:	4619      	mov	r1, r3
 8001056:	4804      	ldr	r0, [pc, #16]	; (8001068 <HAL_UART_MspInit+0x128>)
 8001058:	f000 fb72 	bl	8001740 <HAL_GPIO_Init>


}
 800105c:	bf00      	nop
 800105e:	3738      	adds	r7, #56	; 0x38
 8001060:	46bd      	mov	sp, r7
 8001062:	bd80      	pop	{r7, pc}
 8001064:	40023800 	.word	0x40023800
 8001068:	40020c00 	.word	0x40020c00

0800106c <Error_Handler>:

}


static void Error_Handler(void)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	af00      	add	r7, sp, #0
// Turn LED2 on
  BSP_LED_On(LED2);
 8001070:	2001      	movs	r0, #1
 8001072:	f000 f8b3 	bl	80011dc <BSP_LED_On>
  while (1)
 8001076:	e7fe      	b.n	8001076 <Error_Handler+0xa>

08001078 <SystemClock_Config>:
  }
}


static void SystemClock_Config(void)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b094      	sub	sp, #80	; 0x50
 800107c:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;

  // Enable Power Control clock
  __HAL_RCC_PWR_CLK_ENABLE();
 800107e:	2300      	movs	r3, #0
 8001080:	60bb      	str	r3, [r7, #8]
 8001082:	4b2c      	ldr	r3, [pc, #176]	; (8001134 <SystemClock_Config+0xbc>)
 8001084:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001086:	4a2b      	ldr	r2, [pc, #172]	; (8001134 <SystemClock_Config+0xbc>)
 8001088:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800108c:	6413      	str	r3, [r2, #64]	; 0x40
 800108e:	4b29      	ldr	r3, [pc, #164]	; (8001134 <SystemClock_Config+0xbc>)
 8001090:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001092:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001096:	60bb      	str	r3, [r7, #8]
 8001098:	68bb      	ldr	r3, [r7, #8]

  // The voltage scaling allows optimizing the power consumption when the device is
  //   clocked below the maximum system frequency, to update the voltage scaling value
  //   regarding system frequency refer to product datasheet.
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800109a:	2300      	movs	r3, #0
 800109c:	607b      	str	r3, [r7, #4]
 800109e:	4b26      	ldr	r3, [pc, #152]	; (8001138 <SystemClock_Config+0xc0>)
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	4a25      	ldr	r2, [pc, #148]	; (8001138 <SystemClock_Config+0xc0>)
 80010a4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80010a8:	6013      	str	r3, [r2, #0]
 80010aa:	4b23      	ldr	r3, [pc, #140]	; (8001138 <SystemClock_Config+0xc0>)
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80010b2:	607b      	str	r3, [r7, #4]
 80010b4:	687b      	ldr	r3, [r7, #4]

  // Enable HSE Oscillator and activate PLL with HSE as source
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80010b6:	2301      	movs	r3, #1
 80010b8:	60fb      	str	r3, [r7, #12]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80010ba:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80010be:	613b      	str	r3, [r7, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010c0:	2302      	movs	r3, #2
 80010c2:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80010c4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80010c8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLM = 8;
 80010ca:	2308      	movs	r3, #8
 80010cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLN = 360;
 80010ce:	f44f 73b4 	mov.w	r3, #360	; 0x168
 80010d2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80010d4:	2302      	movs	r3, #2
 80010d6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80010d8:	2307      	movs	r3, #7
 80010da:	63bb      	str	r3, [r7, #56]	; 0x38
  if(HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010dc:	f107 030c 	add.w	r3, r7, #12
 80010e0:	4618      	mov	r0, r3
 80010e2:	f000 fd49 	bl	8001b78 <HAL_RCC_OscConfig>
 80010e6:	4603      	mov	r3, r0
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d001      	beq.n	80010f0 <SystemClock_Config+0x78>
  {
    // Initialization Error
    Error_Handler();
 80010ec:	f7ff ffbe 	bl	800106c <Error_Handler>
  }

  if(HAL_PWREx_EnableOverDrive() != HAL_OK)
 80010f0:	f000 fcf2 	bl	8001ad8 <HAL_PWREx_EnableOverDrive>
 80010f4:	4603      	mov	r3, r0
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d001      	beq.n	80010fe <SystemClock_Config+0x86>
  {
    /* Initialization Error */
    Error_Handler();
 80010fa:	f7ff ffb7 	bl	800106c <Error_Handler>
  }

  // Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2
  //   clocks dividers
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 80010fe:	230f      	movs	r3, #15
 8001100:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001102:	2302      	movs	r3, #2
 8001104:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001106:	2300      	movs	r3, #0
 8001108:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800110a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800110e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001110:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001114:	64fb      	str	r3, [r7, #76]	; 0x4c
  if(HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001116:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800111a:	2105      	movs	r1, #5
 800111c:	4618      	mov	r0, r3
 800111e:	f000 ffa3 	bl	8002068 <HAL_RCC_ClockConfig>
 8001122:	4603      	mov	r3, r0
 8001124:	2b00      	cmp	r3, #0
 8001126:	d001      	beq.n	800112c <SystemClock_Config+0xb4>
  {
    // Initialization Error
    Error_Handler();
 8001128:	f7ff ffa0 	bl	800106c <Error_Handler>
  }
}
 800112c:	bf00      	nop
 800112e:	3750      	adds	r7, #80	; 0x50
 8001130:	46bd      	mov	sp, r7
 8001132:	bd80      	pop	{r7, pc}
 8001134:	40023800 	.word	0x40023800
 8001138:	40007000 	.word	0x40007000

0800113c <BSP_LED_Init>:
  *     @arg  LED1
  *     @arg  LED2
  *     @arg  LED3
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b08a      	sub	sp, #40	; 0x28
 8001140:	af00      	add	r7, sp, #0
 8001142:	4603      	mov	r3, r0
 8001144:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 8001146:	79fb      	ldrb	r3, [r7, #7]
 8001148:	2b00      	cmp	r3, #0
 800114a:	d10e      	bne.n	800116a <BSP_LED_Init+0x2e>
 800114c:	2300      	movs	r3, #0
 800114e:	613b      	str	r3, [r7, #16]
 8001150:	4b1f      	ldr	r3, [pc, #124]	; (80011d0 <BSP_LED_Init+0x94>)
 8001152:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001154:	4a1e      	ldr	r2, [pc, #120]	; (80011d0 <BSP_LED_Init+0x94>)
 8001156:	f043 0302 	orr.w	r3, r3, #2
 800115a:	6313      	str	r3, [r2, #48]	; 0x30
 800115c:	4b1c      	ldr	r3, [pc, #112]	; (80011d0 <BSP_LED_Init+0x94>)
 800115e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001160:	f003 0302 	and.w	r3, r3, #2
 8001164:	613b      	str	r3, [r7, #16]
 8001166:	693b      	ldr	r3, [r7, #16]
 8001168:	e00d      	b.n	8001186 <BSP_LED_Init+0x4a>
 800116a:	2300      	movs	r3, #0
 800116c:	60fb      	str	r3, [r7, #12]
 800116e:	4b18      	ldr	r3, [pc, #96]	; (80011d0 <BSP_LED_Init+0x94>)
 8001170:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001172:	4a17      	ldr	r2, [pc, #92]	; (80011d0 <BSP_LED_Init+0x94>)
 8001174:	f043 0302 	orr.w	r3, r3, #2
 8001178:	6313      	str	r3, [r2, #48]	; 0x30
 800117a:	4b15      	ldr	r3, [pc, #84]	; (80011d0 <BSP_LED_Init+0x94>)
 800117c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800117e:	f003 0302 	and.w	r3, r3, #2
 8001182:	60fb      	str	r3, [r7, #12]
 8001184:	68fb      	ldr	r3, [r7, #12]
  
  /* Configure the GPIO_LED pin */
  GPIO_InitStruct.Pin = GPIO_PIN[Led];
 8001186:	79fb      	ldrb	r3, [r7, #7]
 8001188:	4a12      	ldr	r2, [pc, #72]	; (80011d4 <BSP_LED_Init+0x98>)
 800118a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800118e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001190:	2301      	movs	r3, #1
 8001192:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001194:	2300      	movs	r3, #0
 8001196:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 8001198:	2302      	movs	r3, #2
 800119a:	623b      	str	r3, [r7, #32]
  
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 800119c:	79fb      	ldrb	r3, [r7, #7]
 800119e:	4a0e      	ldr	r2, [pc, #56]	; (80011d8 <BSP_LED_Init+0x9c>)
 80011a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011a4:	f107 0214 	add.w	r2, r7, #20
 80011a8:	4611      	mov	r1, r2
 80011aa:	4618      	mov	r0, r3
 80011ac:	f000 fac8 	bl	8001740 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 80011b0:	79fb      	ldrb	r3, [r7, #7]
 80011b2:	4a09      	ldr	r2, [pc, #36]	; (80011d8 <BSP_LED_Init+0x9c>)
 80011b4:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80011b8:	79fb      	ldrb	r3, [r7, #7]
 80011ba:	4a06      	ldr	r2, [pc, #24]	; (80011d4 <BSP_LED_Init+0x98>)
 80011bc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80011c0:	2200      	movs	r2, #0
 80011c2:	4619      	mov	r1, r3
 80011c4:	f000 fc68 	bl	8001a98 <HAL_GPIO_WritePin>
}
 80011c8:	bf00      	nop
 80011ca:	3728      	adds	r7, #40	; 0x28
 80011cc:	46bd      	mov	sp, r7
 80011ce:	bd80      	pop	{r7, pc}
 80011d0:	40023800 	.word	0x40023800
 80011d4:	080046b8 	.word	0x080046b8
 80011d8:	20000064 	.word	0x20000064

080011dc <BSP_LED_On>:
  * @param  Led: Specifies the Led to be set on. 
  *   This parameter can be one of following parameters:
  *     @arg LED2
  */
void BSP_LED_On(Led_TypeDef Led)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b082      	sub	sp, #8
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	4603      	mov	r3, r0
 80011e4:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET); 
 80011e6:	79fb      	ldrb	r3, [r7, #7]
 80011e8:	4a07      	ldr	r2, [pc, #28]	; (8001208 <BSP_LED_On+0x2c>)
 80011ea:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80011ee:	79fb      	ldrb	r3, [r7, #7]
 80011f0:	4a06      	ldr	r2, [pc, #24]	; (800120c <BSP_LED_On+0x30>)
 80011f2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80011f6:	2201      	movs	r2, #1
 80011f8:	4619      	mov	r1, r3
 80011fa:	f000 fc4d 	bl	8001a98 <HAL_GPIO_WritePin>
}
 80011fe:	bf00      	nop
 8001200:	3708      	adds	r7, #8
 8001202:	46bd      	mov	sp, r7
 8001204:	bd80      	pop	{r7, pc}
 8001206:	bf00      	nop
 8001208:	20000064 	.word	0x20000064
 800120c:	080046b8 	.word	0x080046b8

08001210 <BSP_LED_Off>:
  *     @arg  LED1
  *     @arg  LED2
  *     @arg  LED3
  */
void BSP_LED_Off(Led_TypeDef Led)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b082      	sub	sp, #8
 8001214:	af00      	add	r7, sp, #0
 8001216:	4603      	mov	r3, r0
 8001218:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 800121a:	79fb      	ldrb	r3, [r7, #7]
 800121c:	4a07      	ldr	r2, [pc, #28]	; (800123c <BSP_LED_Off+0x2c>)
 800121e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001222:	79fb      	ldrb	r3, [r7, #7]
 8001224:	4a06      	ldr	r2, [pc, #24]	; (8001240 <BSP_LED_Off+0x30>)
 8001226:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800122a:	2200      	movs	r2, #0
 800122c:	4619      	mov	r1, r3
 800122e:	f000 fc33 	bl	8001a98 <HAL_GPIO_WritePin>
}
 8001232:	bf00      	nop
 8001234:	3708      	adds	r7, #8
 8001236:	46bd      	mov	sp, r7
 8001238:	bd80      	pop	{r7, pc}
 800123a:	bf00      	nop
 800123c:	20000064 	.word	0x20000064
 8001240:	080046b8 	.word	0x080046b8

08001244 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001244:	b480      	push	{r7}
 8001246:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001248:	4b16      	ldr	r3, [pc, #88]	; (80012a4 <SystemInit+0x60>)
 800124a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800124e:	4a15      	ldr	r2, [pc, #84]	; (80012a4 <SystemInit+0x60>)
 8001250:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001254:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8001258:	4b13      	ldr	r3, [pc, #76]	; (80012a8 <SystemInit+0x64>)
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	4a12      	ldr	r2, [pc, #72]	; (80012a8 <SystemInit+0x64>)
 800125e:	f043 0301 	orr.w	r3, r3, #1
 8001262:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001264:	4b10      	ldr	r3, [pc, #64]	; (80012a8 <SystemInit+0x64>)
 8001266:	2200      	movs	r2, #0
 8001268:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800126a:	4b0f      	ldr	r3, [pc, #60]	; (80012a8 <SystemInit+0x64>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	4a0e      	ldr	r2, [pc, #56]	; (80012a8 <SystemInit+0x64>)
 8001270:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8001274:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001278:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800127a:	4b0b      	ldr	r3, [pc, #44]	; (80012a8 <SystemInit+0x64>)
 800127c:	4a0b      	ldr	r2, [pc, #44]	; (80012ac <SystemInit+0x68>)
 800127e:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001280:	4b09      	ldr	r3, [pc, #36]	; (80012a8 <SystemInit+0x64>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	4a08      	ldr	r2, [pc, #32]	; (80012a8 <SystemInit+0x64>)
 8001286:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800128a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800128c:	4b06      	ldr	r3, [pc, #24]	; (80012a8 <SystemInit+0x64>)
 800128e:	2200      	movs	r2, #0
 8001290:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001292:	4b04      	ldr	r3, [pc, #16]	; (80012a4 <SystemInit+0x60>)
 8001294:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001298:	609a      	str	r2, [r3, #8]
#endif
}
 800129a:	bf00      	nop
 800129c:	46bd      	mov	sp, r7
 800129e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a2:	4770      	bx	lr
 80012a4:	e000ed00 	.word	0xe000ed00
 80012a8:	40023800 	.word	0x40023800
 80012ac:	24003010 	.word	0x24003010

080012b0 <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 80012b0:	b480      	push	{r7}
 80012b2:	af00      	add	r7, sp, #0
}
 80012b4:	bf00      	nop
 80012b6:	46bd      	mov	sp, r7
 80012b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012bc:	4770      	bx	lr

080012be <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 80012be:	b480      	push	{r7}
 80012c0:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 80012c2:	e7fe      	b.n	80012c2 <HardFault_Handler+0x4>

080012c4 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 80012c4:	b480      	push	{r7}
 80012c6:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 80012c8:	e7fe      	b.n	80012c8 <MemManage_Handler+0x4>

080012ca <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 80012ca:	b480      	push	{r7}
 80012cc:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 80012ce:	e7fe      	b.n	80012ce <BusFault_Handler+0x4>

080012d0 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 80012d0:	b480      	push	{r7}
 80012d2:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 80012d4:	e7fe      	b.n	80012d4 <UsageFault_Handler+0x4>

080012d6 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 80012d6:	b480      	push	{r7}
 80012d8:	af00      	add	r7, sp, #0
}
 80012da:	bf00      	nop
 80012dc:	46bd      	mov	sp, r7
 80012de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e2:	4770      	bx	lr

080012e4 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 80012e4:	b480      	push	{r7}
 80012e6:	af00      	add	r7, sp, #0
}
 80012e8:	bf00      	nop
 80012ea:	46bd      	mov	sp, r7
 80012ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f0:	4770      	bx	lr

080012f2 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 80012f2:	b480      	push	{r7}
 80012f4:	af00      	add	r7, sp, #0
}
 80012f6:	bf00      	nop
 80012f8:	46bd      	mov	sp, r7
 80012fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fe:	4770      	bx	lr

08001300 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	af00      	add	r7, sp, #0
    HAL_IncTick();
 8001304:	f000 f8f2 	bl	80014ec <HAL_IncTick>
}
 8001308:	bf00      	nop
 800130a:	bd80      	pop	{r7, pc}

0800130c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b086      	sub	sp, #24
 8001310:	af00      	add	r7, sp, #0
 8001312:	60f8      	str	r0, [r7, #12]
 8001314:	60b9      	str	r1, [r7, #8]
 8001316:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001318:	2300      	movs	r3, #0
 800131a:	617b      	str	r3, [r7, #20]
 800131c:	e00a      	b.n	8001334 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800131e:	f3af 8000 	nop.w
 8001322:	4601      	mov	r1, r0
 8001324:	68bb      	ldr	r3, [r7, #8]
 8001326:	1c5a      	adds	r2, r3, #1
 8001328:	60ba      	str	r2, [r7, #8]
 800132a:	b2ca      	uxtb	r2, r1
 800132c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800132e:	697b      	ldr	r3, [r7, #20]
 8001330:	3301      	adds	r3, #1
 8001332:	617b      	str	r3, [r7, #20]
 8001334:	697a      	ldr	r2, [r7, #20]
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	429a      	cmp	r2, r3
 800133a:	dbf0      	blt.n	800131e <_read+0x12>
	}

return len;
 800133c:	687b      	ldr	r3, [r7, #4]
}
 800133e:	4618      	mov	r0, r3
 8001340:	3718      	adds	r7, #24
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}

08001346 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001346:	b580      	push	{r7, lr}
 8001348:	b086      	sub	sp, #24
 800134a:	af00      	add	r7, sp, #0
 800134c:	60f8      	str	r0, [r7, #12]
 800134e:	60b9      	str	r1, [r7, #8]
 8001350:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001352:	2300      	movs	r3, #0
 8001354:	617b      	str	r3, [r7, #20]
 8001356:	e009      	b.n	800136c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001358:	68bb      	ldr	r3, [r7, #8]
 800135a:	1c5a      	adds	r2, r3, #1
 800135c:	60ba      	str	r2, [r7, #8]
 800135e:	781b      	ldrb	r3, [r3, #0]
 8001360:	4618      	mov	r0, r3
 8001362:	f001 ff79 	bl	8003258 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001366:	697b      	ldr	r3, [r7, #20]
 8001368:	3301      	adds	r3, #1
 800136a:	617b      	str	r3, [r7, #20]
 800136c:	697a      	ldr	r2, [r7, #20]
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	429a      	cmp	r2, r3
 8001372:	dbf1      	blt.n	8001358 <_write+0x12>
	}
	return len;
 8001374:	687b      	ldr	r3, [r7, #4]
}
 8001376:	4618      	mov	r0, r3
 8001378:	3718      	adds	r7, #24
 800137a:	46bd      	mov	sp, r7
 800137c:	bd80      	pop	{r7, pc}

0800137e <_close>:

int _close(int file)
{
 800137e:	b480      	push	{r7}
 8001380:	b083      	sub	sp, #12
 8001382:	af00      	add	r7, sp, #0
 8001384:	6078      	str	r0, [r7, #4]
	return -1;
 8001386:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800138a:	4618      	mov	r0, r3
 800138c:	370c      	adds	r7, #12
 800138e:	46bd      	mov	sp, r7
 8001390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001394:	4770      	bx	lr

08001396 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001396:	b480      	push	{r7}
 8001398:	b083      	sub	sp, #12
 800139a:	af00      	add	r7, sp, #0
 800139c:	6078      	str	r0, [r7, #4]
 800139e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80013a0:	683b      	ldr	r3, [r7, #0]
 80013a2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80013a6:	605a      	str	r2, [r3, #4]
	return 0;
 80013a8:	2300      	movs	r3, #0
}
 80013aa:	4618      	mov	r0, r3
 80013ac:	370c      	adds	r7, #12
 80013ae:	46bd      	mov	sp, r7
 80013b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b4:	4770      	bx	lr

080013b6 <_isatty>:

int _isatty(int file)
{
 80013b6:	b480      	push	{r7}
 80013b8:	b083      	sub	sp, #12
 80013ba:	af00      	add	r7, sp, #0
 80013bc:	6078      	str	r0, [r7, #4]
	return 1;
 80013be:	2301      	movs	r3, #1
}
 80013c0:	4618      	mov	r0, r3
 80013c2:	370c      	adds	r7, #12
 80013c4:	46bd      	mov	sp, r7
 80013c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ca:	4770      	bx	lr

080013cc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80013cc:	b480      	push	{r7}
 80013ce:	b085      	sub	sp, #20
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	60f8      	str	r0, [r7, #12]
 80013d4:	60b9      	str	r1, [r7, #8]
 80013d6:	607a      	str	r2, [r7, #4]
	return 0;
 80013d8:	2300      	movs	r3, #0
}
 80013da:	4618      	mov	r0, r3
 80013dc:	3714      	adds	r7, #20
 80013de:	46bd      	mov	sp, r7
 80013e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e4:	4770      	bx	lr
	...

080013e8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b086      	sub	sp, #24
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80013f0:	4a14      	ldr	r2, [pc, #80]	; (8001444 <_sbrk+0x5c>)
 80013f2:	4b15      	ldr	r3, [pc, #84]	; (8001448 <_sbrk+0x60>)
 80013f4:	1ad3      	subs	r3, r2, r3
 80013f6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80013f8:	697b      	ldr	r3, [r7, #20]
 80013fa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80013fc:	4b13      	ldr	r3, [pc, #76]	; (800144c <_sbrk+0x64>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	2b00      	cmp	r3, #0
 8001402:	d102      	bne.n	800140a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001404:	4b11      	ldr	r3, [pc, #68]	; (800144c <_sbrk+0x64>)
 8001406:	4a12      	ldr	r2, [pc, #72]	; (8001450 <_sbrk+0x68>)
 8001408:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800140a:	4b10      	ldr	r3, [pc, #64]	; (800144c <_sbrk+0x64>)
 800140c:	681a      	ldr	r2, [r3, #0]
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	4413      	add	r3, r2
 8001412:	693a      	ldr	r2, [r7, #16]
 8001414:	429a      	cmp	r2, r3
 8001416:	d207      	bcs.n	8001428 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001418:	f001 ff5a 	bl	80032d0 <__errno>
 800141c:	4603      	mov	r3, r0
 800141e:	220c      	movs	r2, #12
 8001420:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001422:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001426:	e009      	b.n	800143c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001428:	4b08      	ldr	r3, [pc, #32]	; (800144c <_sbrk+0x64>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800142e:	4b07      	ldr	r3, [pc, #28]	; (800144c <_sbrk+0x64>)
 8001430:	681a      	ldr	r2, [r3, #0]
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	4413      	add	r3, r2
 8001436:	4a05      	ldr	r2, [pc, #20]	; (800144c <_sbrk+0x64>)
 8001438:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800143a:	68fb      	ldr	r3, [r7, #12]
}
 800143c:	4618      	mov	r0, r3
 800143e:	3718      	adds	r7, #24
 8001440:	46bd      	mov	sp, r7
 8001442:	bd80      	pop	{r7, pc}
 8001444:	20030000 	.word	0x20030000
 8001448:	00000400 	.word	0x00000400
 800144c:	20000100 	.word	0x20000100
 8001450:	20000db8 	.word	0x20000db8

08001454 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001458:	4b0b      	ldr	r3, [pc, #44]	; (8001488 <HAL_Init+0x34>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	4a0a      	ldr	r2, [pc, #40]	; (8001488 <HAL_Init+0x34>)
 800145e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001462:	6013      	str	r3, [r2, #0]
#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001464:	4b08      	ldr	r3, [pc, #32]	; (8001488 <HAL_Init+0x34>)
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	4a07      	ldr	r2, [pc, #28]	; (8001488 <HAL_Init+0x34>)
 800146a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800146e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001470:	2003      	movs	r0, #3
 8001472:	f000 f931 	bl	80016d8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001476:	200f      	movs	r0, #15
 8001478:	f000 f808 	bl	800148c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800147c:	f000 fb25 	bl	8001aca <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001480:	2300      	movs	r3, #0
}
 8001482:	4618      	mov	r0, r3
 8001484:	bd80      	pop	{r7, pc}
 8001486:	bf00      	nop
 8001488:	40023c00 	.word	0x40023c00

0800148c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b082      	sub	sp, #8
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001494:	4b12      	ldr	r3, [pc, #72]	; (80014e0 <HAL_InitTick+0x54>)
 8001496:	681a      	ldr	r2, [r3, #0]
 8001498:	4b12      	ldr	r3, [pc, #72]	; (80014e4 <HAL_InitTick+0x58>)
 800149a:	781b      	ldrb	r3, [r3, #0]
 800149c:	4619      	mov	r1, r3
 800149e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014a2:	fbb3 f3f1 	udiv	r3, r3, r1
 80014a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80014aa:	4618      	mov	r0, r3
 80014ac:	f000 f93b 	bl	8001726 <HAL_SYSTICK_Config>
 80014b0:	4603      	mov	r3, r0
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d001      	beq.n	80014ba <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80014b6:	2301      	movs	r3, #1
 80014b8:	e00e      	b.n	80014d8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	2b0f      	cmp	r3, #15
 80014be:	d80a      	bhi.n	80014d6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80014c0:	2200      	movs	r2, #0
 80014c2:	6879      	ldr	r1, [r7, #4]
 80014c4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80014c8:	f000 f911 	bl	80016ee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80014cc:	4a06      	ldr	r2, [pc, #24]	; (80014e8 <HAL_InitTick+0x5c>)
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80014d2:	2300      	movs	r3, #0
 80014d4:	e000      	b.n	80014d8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80014d6:	2301      	movs	r3, #1
}
 80014d8:	4618      	mov	r0, r3
 80014da:	3708      	adds	r7, #8
 80014dc:	46bd      	mov	sp, r7
 80014de:	bd80      	pop	{r7, pc}
 80014e0:	20000070 	.word	0x20000070
 80014e4:	20000078 	.word	0x20000078
 80014e8:	20000074 	.word	0x20000074

080014ec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014ec:	b480      	push	{r7}
 80014ee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80014f0:	4b06      	ldr	r3, [pc, #24]	; (800150c <HAL_IncTick+0x20>)
 80014f2:	781b      	ldrb	r3, [r3, #0]
 80014f4:	461a      	mov	r2, r3
 80014f6:	4b06      	ldr	r3, [pc, #24]	; (8001510 <HAL_IncTick+0x24>)
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	4413      	add	r3, r2
 80014fc:	4a04      	ldr	r2, [pc, #16]	; (8001510 <HAL_IncTick+0x24>)
 80014fe:	6013      	str	r3, [r2, #0]
}
 8001500:	bf00      	nop
 8001502:	46bd      	mov	sp, r7
 8001504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001508:	4770      	bx	lr
 800150a:	bf00      	nop
 800150c:	20000078 	.word	0x20000078
 8001510:	200001d8 	.word	0x200001d8

08001514 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001514:	b480      	push	{r7}
 8001516:	af00      	add	r7, sp, #0
  return uwTick;
 8001518:	4b03      	ldr	r3, [pc, #12]	; (8001528 <HAL_GetTick+0x14>)
 800151a:	681b      	ldr	r3, [r3, #0]
}
 800151c:	4618      	mov	r0, r3
 800151e:	46bd      	mov	sp, r7
 8001520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001524:	4770      	bx	lr
 8001526:	bf00      	nop
 8001528:	200001d8 	.word	0x200001d8

0800152c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b084      	sub	sp, #16
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001534:	f7ff ffee 	bl	8001514 <HAL_GetTick>
 8001538:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001544:	d005      	beq.n	8001552 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001546:	4b0a      	ldr	r3, [pc, #40]	; (8001570 <HAL_Delay+0x44>)
 8001548:	781b      	ldrb	r3, [r3, #0]
 800154a:	461a      	mov	r2, r3
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	4413      	add	r3, r2
 8001550:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001552:	bf00      	nop
 8001554:	f7ff ffde 	bl	8001514 <HAL_GetTick>
 8001558:	4602      	mov	r2, r0
 800155a:	68bb      	ldr	r3, [r7, #8]
 800155c:	1ad3      	subs	r3, r2, r3
 800155e:	68fa      	ldr	r2, [r7, #12]
 8001560:	429a      	cmp	r2, r3
 8001562:	d8f7      	bhi.n	8001554 <HAL_Delay+0x28>
  {
  }
}
 8001564:	bf00      	nop
 8001566:	bf00      	nop
 8001568:	3710      	adds	r7, #16
 800156a:	46bd      	mov	sp, r7
 800156c:	bd80      	pop	{r7, pc}
 800156e:	bf00      	nop
 8001570:	20000078 	.word	0x20000078

08001574 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001574:	b480      	push	{r7}
 8001576:	b085      	sub	sp, #20
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	f003 0307 	and.w	r3, r3, #7
 8001582:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001584:	4b0c      	ldr	r3, [pc, #48]	; (80015b8 <__NVIC_SetPriorityGrouping+0x44>)
 8001586:	68db      	ldr	r3, [r3, #12]
 8001588:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800158a:	68ba      	ldr	r2, [r7, #8]
 800158c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001590:	4013      	ands	r3, r2
 8001592:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001598:	68bb      	ldr	r3, [r7, #8]
 800159a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800159c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80015a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80015a6:	4a04      	ldr	r2, [pc, #16]	; (80015b8 <__NVIC_SetPriorityGrouping+0x44>)
 80015a8:	68bb      	ldr	r3, [r7, #8]
 80015aa:	60d3      	str	r3, [r2, #12]
}
 80015ac:	bf00      	nop
 80015ae:	3714      	adds	r7, #20
 80015b0:	46bd      	mov	sp, r7
 80015b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b6:	4770      	bx	lr
 80015b8:	e000ed00 	.word	0xe000ed00

080015bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80015bc:	b480      	push	{r7}
 80015be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015c0:	4b04      	ldr	r3, [pc, #16]	; (80015d4 <__NVIC_GetPriorityGrouping+0x18>)
 80015c2:	68db      	ldr	r3, [r3, #12]
 80015c4:	0a1b      	lsrs	r3, r3, #8
 80015c6:	f003 0307 	and.w	r3, r3, #7
}
 80015ca:	4618      	mov	r0, r3
 80015cc:	46bd      	mov	sp, r7
 80015ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d2:	4770      	bx	lr
 80015d4:	e000ed00 	.word	0xe000ed00

080015d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015d8:	b480      	push	{r7}
 80015da:	b083      	sub	sp, #12
 80015dc:	af00      	add	r7, sp, #0
 80015de:	4603      	mov	r3, r0
 80015e0:	6039      	str	r1, [r7, #0]
 80015e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	db0a      	blt.n	8001602 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015ec:	683b      	ldr	r3, [r7, #0]
 80015ee:	b2da      	uxtb	r2, r3
 80015f0:	490c      	ldr	r1, [pc, #48]	; (8001624 <__NVIC_SetPriority+0x4c>)
 80015f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015f6:	0112      	lsls	r2, r2, #4
 80015f8:	b2d2      	uxtb	r2, r2
 80015fa:	440b      	add	r3, r1
 80015fc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001600:	e00a      	b.n	8001618 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001602:	683b      	ldr	r3, [r7, #0]
 8001604:	b2da      	uxtb	r2, r3
 8001606:	4908      	ldr	r1, [pc, #32]	; (8001628 <__NVIC_SetPriority+0x50>)
 8001608:	79fb      	ldrb	r3, [r7, #7]
 800160a:	f003 030f 	and.w	r3, r3, #15
 800160e:	3b04      	subs	r3, #4
 8001610:	0112      	lsls	r2, r2, #4
 8001612:	b2d2      	uxtb	r2, r2
 8001614:	440b      	add	r3, r1
 8001616:	761a      	strb	r2, [r3, #24]
}
 8001618:	bf00      	nop
 800161a:	370c      	adds	r7, #12
 800161c:	46bd      	mov	sp, r7
 800161e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001622:	4770      	bx	lr
 8001624:	e000e100 	.word	0xe000e100
 8001628:	e000ed00 	.word	0xe000ed00

0800162c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800162c:	b480      	push	{r7}
 800162e:	b089      	sub	sp, #36	; 0x24
 8001630:	af00      	add	r7, sp, #0
 8001632:	60f8      	str	r0, [r7, #12]
 8001634:	60b9      	str	r1, [r7, #8]
 8001636:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	f003 0307 	and.w	r3, r3, #7
 800163e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001640:	69fb      	ldr	r3, [r7, #28]
 8001642:	f1c3 0307 	rsb	r3, r3, #7
 8001646:	2b04      	cmp	r3, #4
 8001648:	bf28      	it	cs
 800164a:	2304      	movcs	r3, #4
 800164c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800164e:	69fb      	ldr	r3, [r7, #28]
 8001650:	3304      	adds	r3, #4
 8001652:	2b06      	cmp	r3, #6
 8001654:	d902      	bls.n	800165c <NVIC_EncodePriority+0x30>
 8001656:	69fb      	ldr	r3, [r7, #28]
 8001658:	3b03      	subs	r3, #3
 800165a:	e000      	b.n	800165e <NVIC_EncodePriority+0x32>
 800165c:	2300      	movs	r3, #0
 800165e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001660:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001664:	69bb      	ldr	r3, [r7, #24]
 8001666:	fa02 f303 	lsl.w	r3, r2, r3
 800166a:	43da      	mvns	r2, r3
 800166c:	68bb      	ldr	r3, [r7, #8]
 800166e:	401a      	ands	r2, r3
 8001670:	697b      	ldr	r3, [r7, #20]
 8001672:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001674:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001678:	697b      	ldr	r3, [r7, #20]
 800167a:	fa01 f303 	lsl.w	r3, r1, r3
 800167e:	43d9      	mvns	r1, r3
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001684:	4313      	orrs	r3, r2
         );
}
 8001686:	4618      	mov	r0, r3
 8001688:	3724      	adds	r7, #36	; 0x24
 800168a:	46bd      	mov	sp, r7
 800168c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001690:	4770      	bx	lr
	...

08001694 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b082      	sub	sp, #8
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	3b01      	subs	r3, #1
 80016a0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80016a4:	d301      	bcc.n	80016aa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80016a6:	2301      	movs	r3, #1
 80016a8:	e00f      	b.n	80016ca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80016aa:	4a0a      	ldr	r2, [pc, #40]	; (80016d4 <SysTick_Config+0x40>)
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	3b01      	subs	r3, #1
 80016b0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80016b2:	210f      	movs	r1, #15
 80016b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80016b8:	f7ff ff8e 	bl	80015d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80016bc:	4b05      	ldr	r3, [pc, #20]	; (80016d4 <SysTick_Config+0x40>)
 80016be:	2200      	movs	r2, #0
 80016c0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80016c2:	4b04      	ldr	r3, [pc, #16]	; (80016d4 <SysTick_Config+0x40>)
 80016c4:	2207      	movs	r2, #7
 80016c6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80016c8:	2300      	movs	r3, #0
}
 80016ca:	4618      	mov	r0, r3
 80016cc:	3708      	adds	r7, #8
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bd80      	pop	{r7, pc}
 80016d2:	bf00      	nop
 80016d4:	e000e010 	.word	0xe000e010

080016d8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b082      	sub	sp, #8
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80016e0:	6878      	ldr	r0, [r7, #4]
 80016e2:	f7ff ff47 	bl	8001574 <__NVIC_SetPriorityGrouping>
}
 80016e6:	bf00      	nop
 80016e8:	3708      	adds	r7, #8
 80016ea:	46bd      	mov	sp, r7
 80016ec:	bd80      	pop	{r7, pc}

080016ee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80016ee:	b580      	push	{r7, lr}
 80016f0:	b086      	sub	sp, #24
 80016f2:	af00      	add	r7, sp, #0
 80016f4:	4603      	mov	r3, r0
 80016f6:	60b9      	str	r1, [r7, #8]
 80016f8:	607a      	str	r2, [r7, #4]
 80016fa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80016fc:	2300      	movs	r3, #0
 80016fe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001700:	f7ff ff5c 	bl	80015bc <__NVIC_GetPriorityGrouping>
 8001704:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001706:	687a      	ldr	r2, [r7, #4]
 8001708:	68b9      	ldr	r1, [r7, #8]
 800170a:	6978      	ldr	r0, [r7, #20]
 800170c:	f7ff ff8e 	bl	800162c <NVIC_EncodePriority>
 8001710:	4602      	mov	r2, r0
 8001712:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001716:	4611      	mov	r1, r2
 8001718:	4618      	mov	r0, r3
 800171a:	f7ff ff5d 	bl	80015d8 <__NVIC_SetPriority>
}
 800171e:	bf00      	nop
 8001720:	3718      	adds	r7, #24
 8001722:	46bd      	mov	sp, r7
 8001724:	bd80      	pop	{r7, pc}

08001726 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001726:	b580      	push	{r7, lr}
 8001728:	b082      	sub	sp, #8
 800172a:	af00      	add	r7, sp, #0
 800172c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800172e:	6878      	ldr	r0, [r7, #4]
 8001730:	f7ff ffb0 	bl	8001694 <SysTick_Config>
 8001734:	4603      	mov	r3, r0
}
 8001736:	4618      	mov	r0, r3
 8001738:	3708      	adds	r7, #8
 800173a:	46bd      	mov	sp, r7
 800173c:	bd80      	pop	{r7, pc}
	...

08001740 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001740:	b480      	push	{r7}
 8001742:	b089      	sub	sp, #36	; 0x24
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
 8001748:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800174a:	2300      	movs	r3, #0
 800174c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800174e:	2300      	movs	r3, #0
 8001750:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001752:	2300      	movs	r3, #0
 8001754:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001756:	2300      	movs	r3, #0
 8001758:	61fb      	str	r3, [r7, #28]
 800175a:	e177      	b.n	8001a4c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800175c:	2201      	movs	r2, #1
 800175e:	69fb      	ldr	r3, [r7, #28]
 8001760:	fa02 f303 	lsl.w	r3, r2, r3
 8001764:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001766:	683b      	ldr	r3, [r7, #0]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	697a      	ldr	r2, [r7, #20]
 800176c:	4013      	ands	r3, r2
 800176e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001770:	693a      	ldr	r2, [r7, #16]
 8001772:	697b      	ldr	r3, [r7, #20]
 8001774:	429a      	cmp	r2, r3
 8001776:	f040 8166 	bne.w	8001a46 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800177a:	683b      	ldr	r3, [r7, #0]
 800177c:	685b      	ldr	r3, [r3, #4]
 800177e:	f003 0303 	and.w	r3, r3, #3
 8001782:	2b01      	cmp	r3, #1
 8001784:	d005      	beq.n	8001792 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001786:	683b      	ldr	r3, [r7, #0]
 8001788:	685b      	ldr	r3, [r3, #4]
 800178a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800178e:	2b02      	cmp	r3, #2
 8001790:	d130      	bne.n	80017f4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	689b      	ldr	r3, [r3, #8]
 8001796:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001798:	69fb      	ldr	r3, [r7, #28]
 800179a:	005b      	lsls	r3, r3, #1
 800179c:	2203      	movs	r2, #3
 800179e:	fa02 f303 	lsl.w	r3, r2, r3
 80017a2:	43db      	mvns	r3, r3
 80017a4:	69ba      	ldr	r2, [r7, #24]
 80017a6:	4013      	ands	r3, r2
 80017a8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80017aa:	683b      	ldr	r3, [r7, #0]
 80017ac:	68da      	ldr	r2, [r3, #12]
 80017ae:	69fb      	ldr	r3, [r7, #28]
 80017b0:	005b      	lsls	r3, r3, #1
 80017b2:	fa02 f303 	lsl.w	r3, r2, r3
 80017b6:	69ba      	ldr	r2, [r7, #24]
 80017b8:	4313      	orrs	r3, r2
 80017ba:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	69ba      	ldr	r2, [r7, #24]
 80017c0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	685b      	ldr	r3, [r3, #4]
 80017c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80017c8:	2201      	movs	r2, #1
 80017ca:	69fb      	ldr	r3, [r7, #28]
 80017cc:	fa02 f303 	lsl.w	r3, r2, r3
 80017d0:	43db      	mvns	r3, r3
 80017d2:	69ba      	ldr	r2, [r7, #24]
 80017d4:	4013      	ands	r3, r2
 80017d6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80017d8:	683b      	ldr	r3, [r7, #0]
 80017da:	685b      	ldr	r3, [r3, #4]
 80017dc:	091b      	lsrs	r3, r3, #4
 80017de:	f003 0201 	and.w	r2, r3, #1
 80017e2:	69fb      	ldr	r3, [r7, #28]
 80017e4:	fa02 f303 	lsl.w	r3, r2, r3
 80017e8:	69ba      	ldr	r2, [r7, #24]
 80017ea:	4313      	orrs	r3, r2
 80017ec:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	69ba      	ldr	r2, [r7, #24]
 80017f2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80017f4:	683b      	ldr	r3, [r7, #0]
 80017f6:	685b      	ldr	r3, [r3, #4]
 80017f8:	f003 0303 	and.w	r3, r3, #3
 80017fc:	2b03      	cmp	r3, #3
 80017fe:	d017      	beq.n	8001830 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	68db      	ldr	r3, [r3, #12]
 8001804:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001806:	69fb      	ldr	r3, [r7, #28]
 8001808:	005b      	lsls	r3, r3, #1
 800180a:	2203      	movs	r2, #3
 800180c:	fa02 f303 	lsl.w	r3, r2, r3
 8001810:	43db      	mvns	r3, r3
 8001812:	69ba      	ldr	r2, [r7, #24]
 8001814:	4013      	ands	r3, r2
 8001816:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001818:	683b      	ldr	r3, [r7, #0]
 800181a:	689a      	ldr	r2, [r3, #8]
 800181c:	69fb      	ldr	r3, [r7, #28]
 800181e:	005b      	lsls	r3, r3, #1
 8001820:	fa02 f303 	lsl.w	r3, r2, r3
 8001824:	69ba      	ldr	r2, [r7, #24]
 8001826:	4313      	orrs	r3, r2
 8001828:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	69ba      	ldr	r2, [r7, #24]
 800182e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001830:	683b      	ldr	r3, [r7, #0]
 8001832:	685b      	ldr	r3, [r3, #4]
 8001834:	f003 0303 	and.w	r3, r3, #3
 8001838:	2b02      	cmp	r3, #2
 800183a:	d123      	bne.n	8001884 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800183c:	69fb      	ldr	r3, [r7, #28]
 800183e:	08da      	lsrs	r2, r3, #3
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	3208      	adds	r2, #8
 8001844:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001848:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800184a:	69fb      	ldr	r3, [r7, #28]
 800184c:	f003 0307 	and.w	r3, r3, #7
 8001850:	009b      	lsls	r3, r3, #2
 8001852:	220f      	movs	r2, #15
 8001854:	fa02 f303 	lsl.w	r3, r2, r3
 8001858:	43db      	mvns	r3, r3
 800185a:	69ba      	ldr	r2, [r7, #24]
 800185c:	4013      	ands	r3, r2
 800185e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001860:	683b      	ldr	r3, [r7, #0]
 8001862:	691a      	ldr	r2, [r3, #16]
 8001864:	69fb      	ldr	r3, [r7, #28]
 8001866:	f003 0307 	and.w	r3, r3, #7
 800186a:	009b      	lsls	r3, r3, #2
 800186c:	fa02 f303 	lsl.w	r3, r2, r3
 8001870:	69ba      	ldr	r2, [r7, #24]
 8001872:	4313      	orrs	r3, r2
 8001874:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001876:	69fb      	ldr	r3, [r7, #28]
 8001878:	08da      	lsrs	r2, r3, #3
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	3208      	adds	r2, #8
 800187e:	69b9      	ldr	r1, [r7, #24]
 8001880:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800188a:	69fb      	ldr	r3, [r7, #28]
 800188c:	005b      	lsls	r3, r3, #1
 800188e:	2203      	movs	r2, #3
 8001890:	fa02 f303 	lsl.w	r3, r2, r3
 8001894:	43db      	mvns	r3, r3
 8001896:	69ba      	ldr	r2, [r7, #24]
 8001898:	4013      	ands	r3, r2
 800189a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800189c:	683b      	ldr	r3, [r7, #0]
 800189e:	685b      	ldr	r3, [r3, #4]
 80018a0:	f003 0203 	and.w	r2, r3, #3
 80018a4:	69fb      	ldr	r3, [r7, #28]
 80018a6:	005b      	lsls	r3, r3, #1
 80018a8:	fa02 f303 	lsl.w	r3, r2, r3
 80018ac:	69ba      	ldr	r2, [r7, #24]
 80018ae:	4313      	orrs	r3, r2
 80018b0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	69ba      	ldr	r2, [r7, #24]
 80018b6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80018b8:	683b      	ldr	r3, [r7, #0]
 80018ba:	685b      	ldr	r3, [r3, #4]
 80018bc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	f000 80c0 	beq.w	8001a46 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018c6:	2300      	movs	r3, #0
 80018c8:	60fb      	str	r3, [r7, #12]
 80018ca:	4b66      	ldr	r3, [pc, #408]	; (8001a64 <HAL_GPIO_Init+0x324>)
 80018cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018ce:	4a65      	ldr	r2, [pc, #404]	; (8001a64 <HAL_GPIO_Init+0x324>)
 80018d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018d4:	6453      	str	r3, [r2, #68]	; 0x44
 80018d6:	4b63      	ldr	r3, [pc, #396]	; (8001a64 <HAL_GPIO_Init+0x324>)
 80018d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80018de:	60fb      	str	r3, [r7, #12]
 80018e0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80018e2:	4a61      	ldr	r2, [pc, #388]	; (8001a68 <HAL_GPIO_Init+0x328>)
 80018e4:	69fb      	ldr	r3, [r7, #28]
 80018e6:	089b      	lsrs	r3, r3, #2
 80018e8:	3302      	adds	r3, #2
 80018ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80018f0:	69fb      	ldr	r3, [r7, #28]
 80018f2:	f003 0303 	and.w	r3, r3, #3
 80018f6:	009b      	lsls	r3, r3, #2
 80018f8:	220f      	movs	r2, #15
 80018fa:	fa02 f303 	lsl.w	r3, r2, r3
 80018fe:	43db      	mvns	r3, r3
 8001900:	69ba      	ldr	r2, [r7, #24]
 8001902:	4013      	ands	r3, r2
 8001904:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	4a58      	ldr	r2, [pc, #352]	; (8001a6c <HAL_GPIO_Init+0x32c>)
 800190a:	4293      	cmp	r3, r2
 800190c:	d037      	beq.n	800197e <HAL_GPIO_Init+0x23e>
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	4a57      	ldr	r2, [pc, #348]	; (8001a70 <HAL_GPIO_Init+0x330>)
 8001912:	4293      	cmp	r3, r2
 8001914:	d031      	beq.n	800197a <HAL_GPIO_Init+0x23a>
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	4a56      	ldr	r2, [pc, #344]	; (8001a74 <HAL_GPIO_Init+0x334>)
 800191a:	4293      	cmp	r3, r2
 800191c:	d02b      	beq.n	8001976 <HAL_GPIO_Init+0x236>
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	4a55      	ldr	r2, [pc, #340]	; (8001a78 <HAL_GPIO_Init+0x338>)
 8001922:	4293      	cmp	r3, r2
 8001924:	d025      	beq.n	8001972 <HAL_GPIO_Init+0x232>
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	4a54      	ldr	r2, [pc, #336]	; (8001a7c <HAL_GPIO_Init+0x33c>)
 800192a:	4293      	cmp	r3, r2
 800192c:	d01f      	beq.n	800196e <HAL_GPIO_Init+0x22e>
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	4a53      	ldr	r2, [pc, #332]	; (8001a80 <HAL_GPIO_Init+0x340>)
 8001932:	4293      	cmp	r3, r2
 8001934:	d019      	beq.n	800196a <HAL_GPIO_Init+0x22a>
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	4a52      	ldr	r2, [pc, #328]	; (8001a84 <HAL_GPIO_Init+0x344>)
 800193a:	4293      	cmp	r3, r2
 800193c:	d013      	beq.n	8001966 <HAL_GPIO_Init+0x226>
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	4a51      	ldr	r2, [pc, #324]	; (8001a88 <HAL_GPIO_Init+0x348>)
 8001942:	4293      	cmp	r3, r2
 8001944:	d00d      	beq.n	8001962 <HAL_GPIO_Init+0x222>
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	4a50      	ldr	r2, [pc, #320]	; (8001a8c <HAL_GPIO_Init+0x34c>)
 800194a:	4293      	cmp	r3, r2
 800194c:	d007      	beq.n	800195e <HAL_GPIO_Init+0x21e>
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	4a4f      	ldr	r2, [pc, #316]	; (8001a90 <HAL_GPIO_Init+0x350>)
 8001952:	4293      	cmp	r3, r2
 8001954:	d101      	bne.n	800195a <HAL_GPIO_Init+0x21a>
 8001956:	2309      	movs	r3, #9
 8001958:	e012      	b.n	8001980 <HAL_GPIO_Init+0x240>
 800195a:	230a      	movs	r3, #10
 800195c:	e010      	b.n	8001980 <HAL_GPIO_Init+0x240>
 800195e:	2308      	movs	r3, #8
 8001960:	e00e      	b.n	8001980 <HAL_GPIO_Init+0x240>
 8001962:	2307      	movs	r3, #7
 8001964:	e00c      	b.n	8001980 <HAL_GPIO_Init+0x240>
 8001966:	2306      	movs	r3, #6
 8001968:	e00a      	b.n	8001980 <HAL_GPIO_Init+0x240>
 800196a:	2305      	movs	r3, #5
 800196c:	e008      	b.n	8001980 <HAL_GPIO_Init+0x240>
 800196e:	2304      	movs	r3, #4
 8001970:	e006      	b.n	8001980 <HAL_GPIO_Init+0x240>
 8001972:	2303      	movs	r3, #3
 8001974:	e004      	b.n	8001980 <HAL_GPIO_Init+0x240>
 8001976:	2302      	movs	r3, #2
 8001978:	e002      	b.n	8001980 <HAL_GPIO_Init+0x240>
 800197a:	2301      	movs	r3, #1
 800197c:	e000      	b.n	8001980 <HAL_GPIO_Init+0x240>
 800197e:	2300      	movs	r3, #0
 8001980:	69fa      	ldr	r2, [r7, #28]
 8001982:	f002 0203 	and.w	r2, r2, #3
 8001986:	0092      	lsls	r2, r2, #2
 8001988:	4093      	lsls	r3, r2
 800198a:	69ba      	ldr	r2, [r7, #24]
 800198c:	4313      	orrs	r3, r2
 800198e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001990:	4935      	ldr	r1, [pc, #212]	; (8001a68 <HAL_GPIO_Init+0x328>)
 8001992:	69fb      	ldr	r3, [r7, #28]
 8001994:	089b      	lsrs	r3, r3, #2
 8001996:	3302      	adds	r3, #2
 8001998:	69ba      	ldr	r2, [r7, #24]
 800199a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800199e:	4b3d      	ldr	r3, [pc, #244]	; (8001a94 <HAL_GPIO_Init+0x354>)
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019a4:	693b      	ldr	r3, [r7, #16]
 80019a6:	43db      	mvns	r3, r3
 80019a8:	69ba      	ldr	r2, [r7, #24]
 80019aa:	4013      	ands	r3, r2
 80019ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80019ae:	683b      	ldr	r3, [r7, #0]
 80019b0:	685b      	ldr	r3, [r3, #4]
 80019b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d003      	beq.n	80019c2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80019ba:	69ba      	ldr	r2, [r7, #24]
 80019bc:	693b      	ldr	r3, [r7, #16]
 80019be:	4313      	orrs	r3, r2
 80019c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80019c2:	4a34      	ldr	r2, [pc, #208]	; (8001a94 <HAL_GPIO_Init+0x354>)
 80019c4:	69bb      	ldr	r3, [r7, #24]
 80019c6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80019c8:	4b32      	ldr	r3, [pc, #200]	; (8001a94 <HAL_GPIO_Init+0x354>)
 80019ca:	685b      	ldr	r3, [r3, #4]
 80019cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019ce:	693b      	ldr	r3, [r7, #16]
 80019d0:	43db      	mvns	r3, r3
 80019d2:	69ba      	ldr	r2, [r7, #24]
 80019d4:	4013      	ands	r3, r2
 80019d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80019d8:	683b      	ldr	r3, [r7, #0]
 80019da:	685b      	ldr	r3, [r3, #4]
 80019dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d003      	beq.n	80019ec <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80019e4:	69ba      	ldr	r2, [r7, #24]
 80019e6:	693b      	ldr	r3, [r7, #16]
 80019e8:	4313      	orrs	r3, r2
 80019ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80019ec:	4a29      	ldr	r2, [pc, #164]	; (8001a94 <HAL_GPIO_Init+0x354>)
 80019ee:	69bb      	ldr	r3, [r7, #24]
 80019f0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80019f2:	4b28      	ldr	r3, [pc, #160]	; (8001a94 <HAL_GPIO_Init+0x354>)
 80019f4:	689b      	ldr	r3, [r3, #8]
 80019f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019f8:	693b      	ldr	r3, [r7, #16]
 80019fa:	43db      	mvns	r3, r3
 80019fc:	69ba      	ldr	r2, [r7, #24]
 80019fe:	4013      	ands	r3, r2
 8001a00:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001a02:	683b      	ldr	r3, [r7, #0]
 8001a04:	685b      	ldr	r3, [r3, #4]
 8001a06:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d003      	beq.n	8001a16 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001a0e:	69ba      	ldr	r2, [r7, #24]
 8001a10:	693b      	ldr	r3, [r7, #16]
 8001a12:	4313      	orrs	r3, r2
 8001a14:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001a16:	4a1f      	ldr	r2, [pc, #124]	; (8001a94 <HAL_GPIO_Init+0x354>)
 8001a18:	69bb      	ldr	r3, [r7, #24]
 8001a1a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001a1c:	4b1d      	ldr	r3, [pc, #116]	; (8001a94 <HAL_GPIO_Init+0x354>)
 8001a1e:	68db      	ldr	r3, [r3, #12]
 8001a20:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a22:	693b      	ldr	r3, [r7, #16]
 8001a24:	43db      	mvns	r3, r3
 8001a26:	69ba      	ldr	r2, [r7, #24]
 8001a28:	4013      	ands	r3, r2
 8001a2a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001a2c:	683b      	ldr	r3, [r7, #0]
 8001a2e:	685b      	ldr	r3, [r3, #4]
 8001a30:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d003      	beq.n	8001a40 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001a38:	69ba      	ldr	r2, [r7, #24]
 8001a3a:	693b      	ldr	r3, [r7, #16]
 8001a3c:	4313      	orrs	r3, r2
 8001a3e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001a40:	4a14      	ldr	r2, [pc, #80]	; (8001a94 <HAL_GPIO_Init+0x354>)
 8001a42:	69bb      	ldr	r3, [r7, #24]
 8001a44:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a46:	69fb      	ldr	r3, [r7, #28]
 8001a48:	3301      	adds	r3, #1
 8001a4a:	61fb      	str	r3, [r7, #28]
 8001a4c:	69fb      	ldr	r3, [r7, #28]
 8001a4e:	2b0f      	cmp	r3, #15
 8001a50:	f67f ae84 	bls.w	800175c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001a54:	bf00      	nop
 8001a56:	bf00      	nop
 8001a58:	3724      	adds	r7, #36	; 0x24
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a60:	4770      	bx	lr
 8001a62:	bf00      	nop
 8001a64:	40023800 	.word	0x40023800
 8001a68:	40013800 	.word	0x40013800
 8001a6c:	40020000 	.word	0x40020000
 8001a70:	40020400 	.word	0x40020400
 8001a74:	40020800 	.word	0x40020800
 8001a78:	40020c00 	.word	0x40020c00
 8001a7c:	40021000 	.word	0x40021000
 8001a80:	40021400 	.word	0x40021400
 8001a84:	40021800 	.word	0x40021800
 8001a88:	40021c00 	.word	0x40021c00
 8001a8c:	40022000 	.word	0x40022000
 8001a90:	40022400 	.word	0x40022400
 8001a94:	40013c00 	.word	0x40013c00

08001a98 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	b083      	sub	sp, #12
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
 8001aa0:	460b      	mov	r3, r1
 8001aa2:	807b      	strh	r3, [r7, #2]
 8001aa4:	4613      	mov	r3, r2
 8001aa6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001aa8:	787b      	ldrb	r3, [r7, #1]
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d003      	beq.n	8001ab6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001aae:	887a      	ldrh	r2, [r7, #2]
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001ab4:	e003      	b.n	8001abe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001ab6:	887b      	ldrh	r3, [r7, #2]
 8001ab8:	041a      	lsls	r2, r3, #16
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	619a      	str	r2, [r3, #24]
}
 8001abe:	bf00      	nop
 8001ac0:	370c      	adds	r7, #12
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac8:	4770      	bx	lr

08001aca <HAL_MspInit>:
  * @note   This function is called from HAL_Init() function to perform system
  *         level initialization (GPIOs, clock, DMA, interrupt).
  * @retval None
  */
void HAL_MspInit(void)
{
 8001aca:	b480      	push	{r7}
 8001acc:	af00      	add	r7, sp, #0

}
 8001ace:	bf00      	nop
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad6:	4770      	bx	lr

08001ad8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b082      	sub	sp, #8
 8001adc:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8001ade:	2300      	movs	r3, #0
 8001ae0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	603b      	str	r3, [r7, #0]
 8001ae6:	4b20      	ldr	r3, [pc, #128]	; (8001b68 <HAL_PWREx_EnableOverDrive+0x90>)
 8001ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aea:	4a1f      	ldr	r2, [pc, #124]	; (8001b68 <HAL_PWREx_EnableOverDrive+0x90>)
 8001aec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001af0:	6413      	str	r3, [r2, #64]	; 0x40
 8001af2:	4b1d      	ldr	r3, [pc, #116]	; (8001b68 <HAL_PWREx_EnableOverDrive+0x90>)
 8001af4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001af6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001afa:	603b      	str	r3, [r7, #0]
 8001afc:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001afe:	4b1b      	ldr	r3, [pc, #108]	; (8001b6c <HAL_PWREx_EnableOverDrive+0x94>)
 8001b00:	2201      	movs	r2, #1
 8001b02:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001b04:	f7ff fd06 	bl	8001514 <HAL_GetTick>
 8001b08:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001b0a:	e009      	b.n	8001b20 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001b0c:	f7ff fd02 	bl	8001514 <HAL_GetTick>
 8001b10:	4602      	mov	r2, r0
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	1ad3      	subs	r3, r2, r3
 8001b16:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001b1a:	d901      	bls.n	8001b20 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8001b1c:	2303      	movs	r3, #3
 8001b1e:	e01f      	b.n	8001b60 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001b20:	4b13      	ldr	r3, [pc, #76]	; (8001b70 <HAL_PWREx_EnableOverDrive+0x98>)
 8001b22:	685b      	ldr	r3, [r3, #4]
 8001b24:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b2c:	d1ee      	bne.n	8001b0c <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001b2e:	4b11      	ldr	r3, [pc, #68]	; (8001b74 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001b30:	2201      	movs	r2, #1
 8001b32:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001b34:	f7ff fcee 	bl	8001514 <HAL_GetTick>
 8001b38:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001b3a:	e009      	b.n	8001b50 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001b3c:	f7ff fcea 	bl	8001514 <HAL_GetTick>
 8001b40:	4602      	mov	r2, r0
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	1ad3      	subs	r3, r2, r3
 8001b46:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001b4a:	d901      	bls.n	8001b50 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8001b4c:	2303      	movs	r3, #3
 8001b4e:	e007      	b.n	8001b60 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001b50:	4b07      	ldr	r3, [pc, #28]	; (8001b70 <HAL_PWREx_EnableOverDrive+0x98>)
 8001b52:	685b      	ldr	r3, [r3, #4]
 8001b54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b58:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001b5c:	d1ee      	bne.n	8001b3c <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8001b5e:	2300      	movs	r3, #0
}
 8001b60:	4618      	mov	r0, r3
 8001b62:	3708      	adds	r7, #8
 8001b64:	46bd      	mov	sp, r7
 8001b66:	bd80      	pop	{r7, pc}
 8001b68:	40023800 	.word	0x40023800
 8001b6c:	420e0040 	.word	0x420e0040
 8001b70:	40007000 	.word	0x40007000
 8001b74:	420e0044 	.word	0x420e0044

08001b78 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b086      	sub	sp, #24
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d101      	bne.n	8001b8a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001b86:	2301      	movs	r3, #1
 8001b88:	e264      	b.n	8002054 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f003 0301 	and.w	r3, r3, #1
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d075      	beq.n	8001c82 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001b96:	4ba3      	ldr	r3, [pc, #652]	; (8001e24 <HAL_RCC_OscConfig+0x2ac>)
 8001b98:	689b      	ldr	r3, [r3, #8]
 8001b9a:	f003 030c 	and.w	r3, r3, #12
 8001b9e:	2b04      	cmp	r3, #4
 8001ba0:	d00c      	beq.n	8001bbc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001ba2:	4ba0      	ldr	r3, [pc, #640]	; (8001e24 <HAL_RCC_OscConfig+0x2ac>)
 8001ba4:	689b      	ldr	r3, [r3, #8]
 8001ba6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001baa:	2b08      	cmp	r3, #8
 8001bac:	d112      	bne.n	8001bd4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001bae:	4b9d      	ldr	r3, [pc, #628]	; (8001e24 <HAL_RCC_OscConfig+0x2ac>)
 8001bb0:	685b      	ldr	r3, [r3, #4]
 8001bb2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001bb6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001bba:	d10b      	bne.n	8001bd4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bbc:	4b99      	ldr	r3, [pc, #612]	; (8001e24 <HAL_RCC_OscConfig+0x2ac>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d05b      	beq.n	8001c80 <HAL_RCC_OscConfig+0x108>
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	685b      	ldr	r3, [r3, #4]
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d157      	bne.n	8001c80 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001bd0:	2301      	movs	r3, #1
 8001bd2:	e23f      	b.n	8002054 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	685b      	ldr	r3, [r3, #4]
 8001bd8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001bdc:	d106      	bne.n	8001bec <HAL_RCC_OscConfig+0x74>
 8001bde:	4b91      	ldr	r3, [pc, #580]	; (8001e24 <HAL_RCC_OscConfig+0x2ac>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	4a90      	ldr	r2, [pc, #576]	; (8001e24 <HAL_RCC_OscConfig+0x2ac>)
 8001be4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001be8:	6013      	str	r3, [r2, #0]
 8001bea:	e01d      	b.n	8001c28 <HAL_RCC_OscConfig+0xb0>
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	685b      	ldr	r3, [r3, #4]
 8001bf0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001bf4:	d10c      	bne.n	8001c10 <HAL_RCC_OscConfig+0x98>
 8001bf6:	4b8b      	ldr	r3, [pc, #556]	; (8001e24 <HAL_RCC_OscConfig+0x2ac>)
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	4a8a      	ldr	r2, [pc, #552]	; (8001e24 <HAL_RCC_OscConfig+0x2ac>)
 8001bfc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c00:	6013      	str	r3, [r2, #0]
 8001c02:	4b88      	ldr	r3, [pc, #544]	; (8001e24 <HAL_RCC_OscConfig+0x2ac>)
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	4a87      	ldr	r2, [pc, #540]	; (8001e24 <HAL_RCC_OscConfig+0x2ac>)
 8001c08:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c0c:	6013      	str	r3, [r2, #0]
 8001c0e:	e00b      	b.n	8001c28 <HAL_RCC_OscConfig+0xb0>
 8001c10:	4b84      	ldr	r3, [pc, #528]	; (8001e24 <HAL_RCC_OscConfig+0x2ac>)
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	4a83      	ldr	r2, [pc, #524]	; (8001e24 <HAL_RCC_OscConfig+0x2ac>)
 8001c16:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c1a:	6013      	str	r3, [r2, #0]
 8001c1c:	4b81      	ldr	r3, [pc, #516]	; (8001e24 <HAL_RCC_OscConfig+0x2ac>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	4a80      	ldr	r2, [pc, #512]	; (8001e24 <HAL_RCC_OscConfig+0x2ac>)
 8001c22:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c26:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	685b      	ldr	r3, [r3, #4]
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d013      	beq.n	8001c58 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c30:	f7ff fc70 	bl	8001514 <HAL_GetTick>
 8001c34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c36:	e008      	b.n	8001c4a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c38:	f7ff fc6c 	bl	8001514 <HAL_GetTick>
 8001c3c:	4602      	mov	r2, r0
 8001c3e:	693b      	ldr	r3, [r7, #16]
 8001c40:	1ad3      	subs	r3, r2, r3
 8001c42:	2b64      	cmp	r3, #100	; 0x64
 8001c44:	d901      	bls.n	8001c4a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001c46:	2303      	movs	r3, #3
 8001c48:	e204      	b.n	8002054 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c4a:	4b76      	ldr	r3, [pc, #472]	; (8001e24 <HAL_RCC_OscConfig+0x2ac>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d0f0      	beq.n	8001c38 <HAL_RCC_OscConfig+0xc0>
 8001c56:	e014      	b.n	8001c82 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c58:	f7ff fc5c 	bl	8001514 <HAL_GetTick>
 8001c5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c5e:	e008      	b.n	8001c72 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c60:	f7ff fc58 	bl	8001514 <HAL_GetTick>
 8001c64:	4602      	mov	r2, r0
 8001c66:	693b      	ldr	r3, [r7, #16]
 8001c68:	1ad3      	subs	r3, r2, r3
 8001c6a:	2b64      	cmp	r3, #100	; 0x64
 8001c6c:	d901      	bls.n	8001c72 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001c6e:	2303      	movs	r3, #3
 8001c70:	e1f0      	b.n	8002054 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c72:	4b6c      	ldr	r3, [pc, #432]	; (8001e24 <HAL_RCC_OscConfig+0x2ac>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d1f0      	bne.n	8001c60 <HAL_RCC_OscConfig+0xe8>
 8001c7e:	e000      	b.n	8001c82 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c80:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f003 0302 	and.w	r3, r3, #2
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d063      	beq.n	8001d56 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001c8e:	4b65      	ldr	r3, [pc, #404]	; (8001e24 <HAL_RCC_OscConfig+0x2ac>)
 8001c90:	689b      	ldr	r3, [r3, #8]
 8001c92:	f003 030c 	and.w	r3, r3, #12
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d00b      	beq.n	8001cb2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001c9a:	4b62      	ldr	r3, [pc, #392]	; (8001e24 <HAL_RCC_OscConfig+0x2ac>)
 8001c9c:	689b      	ldr	r3, [r3, #8]
 8001c9e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001ca2:	2b08      	cmp	r3, #8
 8001ca4:	d11c      	bne.n	8001ce0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001ca6:	4b5f      	ldr	r3, [pc, #380]	; (8001e24 <HAL_RCC_OscConfig+0x2ac>)
 8001ca8:	685b      	ldr	r3, [r3, #4]
 8001caa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d116      	bne.n	8001ce0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001cb2:	4b5c      	ldr	r3, [pc, #368]	; (8001e24 <HAL_RCC_OscConfig+0x2ac>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f003 0302 	and.w	r3, r3, #2
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d005      	beq.n	8001cca <HAL_RCC_OscConfig+0x152>
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	68db      	ldr	r3, [r3, #12]
 8001cc2:	2b01      	cmp	r3, #1
 8001cc4:	d001      	beq.n	8001cca <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001cc6:	2301      	movs	r3, #1
 8001cc8:	e1c4      	b.n	8002054 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cca:	4b56      	ldr	r3, [pc, #344]	; (8001e24 <HAL_RCC_OscConfig+0x2ac>)
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	691b      	ldr	r3, [r3, #16]
 8001cd6:	00db      	lsls	r3, r3, #3
 8001cd8:	4952      	ldr	r1, [pc, #328]	; (8001e24 <HAL_RCC_OscConfig+0x2ac>)
 8001cda:	4313      	orrs	r3, r2
 8001cdc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001cde:	e03a      	b.n	8001d56 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	68db      	ldr	r3, [r3, #12]
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d020      	beq.n	8001d2a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ce8:	4b4f      	ldr	r3, [pc, #316]	; (8001e28 <HAL_RCC_OscConfig+0x2b0>)
 8001cea:	2201      	movs	r2, #1
 8001cec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cee:	f7ff fc11 	bl	8001514 <HAL_GetTick>
 8001cf2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cf4:	e008      	b.n	8001d08 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001cf6:	f7ff fc0d 	bl	8001514 <HAL_GetTick>
 8001cfa:	4602      	mov	r2, r0
 8001cfc:	693b      	ldr	r3, [r7, #16]
 8001cfe:	1ad3      	subs	r3, r2, r3
 8001d00:	2b02      	cmp	r3, #2
 8001d02:	d901      	bls.n	8001d08 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001d04:	2303      	movs	r3, #3
 8001d06:	e1a5      	b.n	8002054 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d08:	4b46      	ldr	r3, [pc, #280]	; (8001e24 <HAL_RCC_OscConfig+0x2ac>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f003 0302 	and.w	r3, r3, #2
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d0f0      	beq.n	8001cf6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d14:	4b43      	ldr	r3, [pc, #268]	; (8001e24 <HAL_RCC_OscConfig+0x2ac>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	691b      	ldr	r3, [r3, #16]
 8001d20:	00db      	lsls	r3, r3, #3
 8001d22:	4940      	ldr	r1, [pc, #256]	; (8001e24 <HAL_RCC_OscConfig+0x2ac>)
 8001d24:	4313      	orrs	r3, r2
 8001d26:	600b      	str	r3, [r1, #0]
 8001d28:	e015      	b.n	8001d56 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d2a:	4b3f      	ldr	r3, [pc, #252]	; (8001e28 <HAL_RCC_OscConfig+0x2b0>)
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d30:	f7ff fbf0 	bl	8001514 <HAL_GetTick>
 8001d34:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d36:	e008      	b.n	8001d4a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001d38:	f7ff fbec 	bl	8001514 <HAL_GetTick>
 8001d3c:	4602      	mov	r2, r0
 8001d3e:	693b      	ldr	r3, [r7, #16]
 8001d40:	1ad3      	subs	r3, r2, r3
 8001d42:	2b02      	cmp	r3, #2
 8001d44:	d901      	bls.n	8001d4a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001d46:	2303      	movs	r3, #3
 8001d48:	e184      	b.n	8002054 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d4a:	4b36      	ldr	r3, [pc, #216]	; (8001e24 <HAL_RCC_OscConfig+0x2ac>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f003 0302 	and.w	r3, r3, #2
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d1f0      	bne.n	8001d38 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f003 0308 	and.w	r3, r3, #8
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d030      	beq.n	8001dc4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	695b      	ldr	r3, [r3, #20]
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d016      	beq.n	8001d98 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d6a:	4b30      	ldr	r3, [pc, #192]	; (8001e2c <HAL_RCC_OscConfig+0x2b4>)
 8001d6c:	2201      	movs	r2, #1
 8001d6e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d70:	f7ff fbd0 	bl	8001514 <HAL_GetTick>
 8001d74:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d76:	e008      	b.n	8001d8a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d78:	f7ff fbcc 	bl	8001514 <HAL_GetTick>
 8001d7c:	4602      	mov	r2, r0
 8001d7e:	693b      	ldr	r3, [r7, #16]
 8001d80:	1ad3      	subs	r3, r2, r3
 8001d82:	2b02      	cmp	r3, #2
 8001d84:	d901      	bls.n	8001d8a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001d86:	2303      	movs	r3, #3
 8001d88:	e164      	b.n	8002054 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d8a:	4b26      	ldr	r3, [pc, #152]	; (8001e24 <HAL_RCC_OscConfig+0x2ac>)
 8001d8c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001d8e:	f003 0302 	and.w	r3, r3, #2
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d0f0      	beq.n	8001d78 <HAL_RCC_OscConfig+0x200>
 8001d96:	e015      	b.n	8001dc4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d98:	4b24      	ldr	r3, [pc, #144]	; (8001e2c <HAL_RCC_OscConfig+0x2b4>)
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d9e:	f7ff fbb9 	bl	8001514 <HAL_GetTick>
 8001da2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001da4:	e008      	b.n	8001db8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001da6:	f7ff fbb5 	bl	8001514 <HAL_GetTick>
 8001daa:	4602      	mov	r2, r0
 8001dac:	693b      	ldr	r3, [r7, #16]
 8001dae:	1ad3      	subs	r3, r2, r3
 8001db0:	2b02      	cmp	r3, #2
 8001db2:	d901      	bls.n	8001db8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001db4:	2303      	movs	r3, #3
 8001db6:	e14d      	b.n	8002054 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001db8:	4b1a      	ldr	r3, [pc, #104]	; (8001e24 <HAL_RCC_OscConfig+0x2ac>)
 8001dba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001dbc:	f003 0302 	and.w	r3, r3, #2
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d1f0      	bne.n	8001da6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f003 0304 	and.w	r3, r3, #4
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	f000 80a0 	beq.w	8001f12 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001dd6:	4b13      	ldr	r3, [pc, #76]	; (8001e24 <HAL_RCC_OscConfig+0x2ac>)
 8001dd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d10f      	bne.n	8001e02 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001de2:	2300      	movs	r3, #0
 8001de4:	60bb      	str	r3, [r7, #8]
 8001de6:	4b0f      	ldr	r3, [pc, #60]	; (8001e24 <HAL_RCC_OscConfig+0x2ac>)
 8001de8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dea:	4a0e      	ldr	r2, [pc, #56]	; (8001e24 <HAL_RCC_OscConfig+0x2ac>)
 8001dec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001df0:	6413      	str	r3, [r2, #64]	; 0x40
 8001df2:	4b0c      	ldr	r3, [pc, #48]	; (8001e24 <HAL_RCC_OscConfig+0x2ac>)
 8001df4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001df6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dfa:	60bb      	str	r3, [r7, #8]
 8001dfc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001dfe:	2301      	movs	r3, #1
 8001e00:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e02:	4b0b      	ldr	r3, [pc, #44]	; (8001e30 <HAL_RCC_OscConfig+0x2b8>)
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d121      	bne.n	8001e52 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e0e:	4b08      	ldr	r3, [pc, #32]	; (8001e30 <HAL_RCC_OscConfig+0x2b8>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	4a07      	ldr	r2, [pc, #28]	; (8001e30 <HAL_RCC_OscConfig+0x2b8>)
 8001e14:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e18:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e1a:	f7ff fb7b 	bl	8001514 <HAL_GetTick>
 8001e1e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e20:	e011      	b.n	8001e46 <HAL_RCC_OscConfig+0x2ce>
 8001e22:	bf00      	nop
 8001e24:	40023800 	.word	0x40023800
 8001e28:	42470000 	.word	0x42470000
 8001e2c:	42470e80 	.word	0x42470e80
 8001e30:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e34:	f7ff fb6e 	bl	8001514 <HAL_GetTick>
 8001e38:	4602      	mov	r2, r0
 8001e3a:	693b      	ldr	r3, [r7, #16]
 8001e3c:	1ad3      	subs	r3, r2, r3
 8001e3e:	2b02      	cmp	r3, #2
 8001e40:	d901      	bls.n	8001e46 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001e42:	2303      	movs	r3, #3
 8001e44:	e106      	b.n	8002054 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e46:	4b85      	ldr	r3, [pc, #532]	; (800205c <HAL_RCC_OscConfig+0x4e4>)
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d0f0      	beq.n	8001e34 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	689b      	ldr	r3, [r3, #8]
 8001e56:	2b01      	cmp	r3, #1
 8001e58:	d106      	bne.n	8001e68 <HAL_RCC_OscConfig+0x2f0>
 8001e5a:	4b81      	ldr	r3, [pc, #516]	; (8002060 <HAL_RCC_OscConfig+0x4e8>)
 8001e5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e5e:	4a80      	ldr	r2, [pc, #512]	; (8002060 <HAL_RCC_OscConfig+0x4e8>)
 8001e60:	f043 0301 	orr.w	r3, r3, #1
 8001e64:	6713      	str	r3, [r2, #112]	; 0x70
 8001e66:	e01c      	b.n	8001ea2 <HAL_RCC_OscConfig+0x32a>
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	689b      	ldr	r3, [r3, #8]
 8001e6c:	2b05      	cmp	r3, #5
 8001e6e:	d10c      	bne.n	8001e8a <HAL_RCC_OscConfig+0x312>
 8001e70:	4b7b      	ldr	r3, [pc, #492]	; (8002060 <HAL_RCC_OscConfig+0x4e8>)
 8001e72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e74:	4a7a      	ldr	r2, [pc, #488]	; (8002060 <HAL_RCC_OscConfig+0x4e8>)
 8001e76:	f043 0304 	orr.w	r3, r3, #4
 8001e7a:	6713      	str	r3, [r2, #112]	; 0x70
 8001e7c:	4b78      	ldr	r3, [pc, #480]	; (8002060 <HAL_RCC_OscConfig+0x4e8>)
 8001e7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e80:	4a77      	ldr	r2, [pc, #476]	; (8002060 <HAL_RCC_OscConfig+0x4e8>)
 8001e82:	f043 0301 	orr.w	r3, r3, #1
 8001e86:	6713      	str	r3, [r2, #112]	; 0x70
 8001e88:	e00b      	b.n	8001ea2 <HAL_RCC_OscConfig+0x32a>
 8001e8a:	4b75      	ldr	r3, [pc, #468]	; (8002060 <HAL_RCC_OscConfig+0x4e8>)
 8001e8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e8e:	4a74      	ldr	r2, [pc, #464]	; (8002060 <HAL_RCC_OscConfig+0x4e8>)
 8001e90:	f023 0301 	bic.w	r3, r3, #1
 8001e94:	6713      	str	r3, [r2, #112]	; 0x70
 8001e96:	4b72      	ldr	r3, [pc, #456]	; (8002060 <HAL_RCC_OscConfig+0x4e8>)
 8001e98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e9a:	4a71      	ldr	r2, [pc, #452]	; (8002060 <HAL_RCC_OscConfig+0x4e8>)
 8001e9c:	f023 0304 	bic.w	r3, r3, #4
 8001ea0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	689b      	ldr	r3, [r3, #8]
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d015      	beq.n	8001ed6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001eaa:	f7ff fb33 	bl	8001514 <HAL_GetTick>
 8001eae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001eb0:	e00a      	b.n	8001ec8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001eb2:	f7ff fb2f 	bl	8001514 <HAL_GetTick>
 8001eb6:	4602      	mov	r2, r0
 8001eb8:	693b      	ldr	r3, [r7, #16]
 8001eba:	1ad3      	subs	r3, r2, r3
 8001ebc:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ec0:	4293      	cmp	r3, r2
 8001ec2:	d901      	bls.n	8001ec8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001ec4:	2303      	movs	r3, #3
 8001ec6:	e0c5      	b.n	8002054 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ec8:	4b65      	ldr	r3, [pc, #404]	; (8002060 <HAL_RCC_OscConfig+0x4e8>)
 8001eca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ecc:	f003 0302 	and.w	r3, r3, #2
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d0ee      	beq.n	8001eb2 <HAL_RCC_OscConfig+0x33a>
 8001ed4:	e014      	b.n	8001f00 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ed6:	f7ff fb1d 	bl	8001514 <HAL_GetTick>
 8001eda:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001edc:	e00a      	b.n	8001ef4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ede:	f7ff fb19 	bl	8001514 <HAL_GetTick>
 8001ee2:	4602      	mov	r2, r0
 8001ee4:	693b      	ldr	r3, [r7, #16]
 8001ee6:	1ad3      	subs	r3, r2, r3
 8001ee8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001eec:	4293      	cmp	r3, r2
 8001eee:	d901      	bls.n	8001ef4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001ef0:	2303      	movs	r3, #3
 8001ef2:	e0af      	b.n	8002054 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ef4:	4b5a      	ldr	r3, [pc, #360]	; (8002060 <HAL_RCC_OscConfig+0x4e8>)
 8001ef6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ef8:	f003 0302 	and.w	r3, r3, #2
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d1ee      	bne.n	8001ede <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001f00:	7dfb      	ldrb	r3, [r7, #23]
 8001f02:	2b01      	cmp	r3, #1
 8001f04:	d105      	bne.n	8001f12 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f06:	4b56      	ldr	r3, [pc, #344]	; (8002060 <HAL_RCC_OscConfig+0x4e8>)
 8001f08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f0a:	4a55      	ldr	r2, [pc, #340]	; (8002060 <HAL_RCC_OscConfig+0x4e8>)
 8001f0c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f10:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	699b      	ldr	r3, [r3, #24]
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	f000 809b 	beq.w	8002052 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001f1c:	4b50      	ldr	r3, [pc, #320]	; (8002060 <HAL_RCC_OscConfig+0x4e8>)
 8001f1e:	689b      	ldr	r3, [r3, #8]
 8001f20:	f003 030c 	and.w	r3, r3, #12
 8001f24:	2b08      	cmp	r3, #8
 8001f26:	d05c      	beq.n	8001fe2 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	699b      	ldr	r3, [r3, #24]
 8001f2c:	2b02      	cmp	r3, #2
 8001f2e:	d141      	bne.n	8001fb4 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f30:	4b4c      	ldr	r3, [pc, #304]	; (8002064 <HAL_RCC_OscConfig+0x4ec>)
 8001f32:	2200      	movs	r2, #0
 8001f34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f36:	f7ff faed 	bl	8001514 <HAL_GetTick>
 8001f3a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f3c:	e008      	b.n	8001f50 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f3e:	f7ff fae9 	bl	8001514 <HAL_GetTick>
 8001f42:	4602      	mov	r2, r0
 8001f44:	693b      	ldr	r3, [r7, #16]
 8001f46:	1ad3      	subs	r3, r2, r3
 8001f48:	2b02      	cmp	r3, #2
 8001f4a:	d901      	bls.n	8001f50 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001f4c:	2303      	movs	r3, #3
 8001f4e:	e081      	b.n	8002054 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f50:	4b43      	ldr	r3, [pc, #268]	; (8002060 <HAL_RCC_OscConfig+0x4e8>)
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d1f0      	bne.n	8001f3e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	69da      	ldr	r2, [r3, #28]
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	6a1b      	ldr	r3, [r3, #32]
 8001f64:	431a      	orrs	r2, r3
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f6a:	019b      	lsls	r3, r3, #6
 8001f6c:	431a      	orrs	r2, r3
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f72:	085b      	lsrs	r3, r3, #1
 8001f74:	3b01      	subs	r3, #1
 8001f76:	041b      	lsls	r3, r3, #16
 8001f78:	431a      	orrs	r2, r3
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f7e:	061b      	lsls	r3, r3, #24
 8001f80:	4937      	ldr	r1, [pc, #220]	; (8002060 <HAL_RCC_OscConfig+0x4e8>)
 8001f82:	4313      	orrs	r3, r2
 8001f84:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f86:	4b37      	ldr	r3, [pc, #220]	; (8002064 <HAL_RCC_OscConfig+0x4ec>)
 8001f88:	2201      	movs	r2, #1
 8001f8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f8c:	f7ff fac2 	bl	8001514 <HAL_GetTick>
 8001f90:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f92:	e008      	b.n	8001fa6 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f94:	f7ff fabe 	bl	8001514 <HAL_GetTick>
 8001f98:	4602      	mov	r2, r0
 8001f9a:	693b      	ldr	r3, [r7, #16]
 8001f9c:	1ad3      	subs	r3, r2, r3
 8001f9e:	2b02      	cmp	r3, #2
 8001fa0:	d901      	bls.n	8001fa6 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8001fa2:	2303      	movs	r3, #3
 8001fa4:	e056      	b.n	8002054 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001fa6:	4b2e      	ldr	r3, [pc, #184]	; (8002060 <HAL_RCC_OscConfig+0x4e8>)
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d0f0      	beq.n	8001f94 <HAL_RCC_OscConfig+0x41c>
 8001fb2:	e04e      	b.n	8002052 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fb4:	4b2b      	ldr	r3, [pc, #172]	; (8002064 <HAL_RCC_OscConfig+0x4ec>)
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fba:	f7ff faab 	bl	8001514 <HAL_GetTick>
 8001fbe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001fc0:	e008      	b.n	8001fd4 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001fc2:	f7ff faa7 	bl	8001514 <HAL_GetTick>
 8001fc6:	4602      	mov	r2, r0
 8001fc8:	693b      	ldr	r3, [r7, #16]
 8001fca:	1ad3      	subs	r3, r2, r3
 8001fcc:	2b02      	cmp	r3, #2
 8001fce:	d901      	bls.n	8001fd4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001fd0:	2303      	movs	r3, #3
 8001fd2:	e03f      	b.n	8002054 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001fd4:	4b22      	ldr	r3, [pc, #136]	; (8002060 <HAL_RCC_OscConfig+0x4e8>)
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d1f0      	bne.n	8001fc2 <HAL_RCC_OscConfig+0x44a>
 8001fe0:	e037      	b.n	8002052 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	699b      	ldr	r3, [r3, #24]
 8001fe6:	2b01      	cmp	r3, #1
 8001fe8:	d101      	bne.n	8001fee <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8001fea:	2301      	movs	r3, #1
 8001fec:	e032      	b.n	8002054 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001fee:	4b1c      	ldr	r3, [pc, #112]	; (8002060 <HAL_RCC_OscConfig+0x4e8>)
 8001ff0:	685b      	ldr	r3, [r3, #4]
 8001ff2:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	699b      	ldr	r3, [r3, #24]
 8001ff8:	2b01      	cmp	r3, #1
 8001ffa:	d028      	beq.n	800204e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002006:	429a      	cmp	r2, r3
 8002008:	d121      	bne.n	800204e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002014:	429a      	cmp	r2, r3
 8002016:	d11a      	bne.n	800204e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002018:	68fa      	ldr	r2, [r7, #12]
 800201a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800201e:	4013      	ands	r3, r2
 8002020:	687a      	ldr	r2, [r7, #4]
 8002022:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002024:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002026:	4293      	cmp	r3, r2
 8002028:	d111      	bne.n	800204e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002034:	085b      	lsrs	r3, r3, #1
 8002036:	3b01      	subs	r3, #1
 8002038:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800203a:	429a      	cmp	r2, r3
 800203c:	d107      	bne.n	800204e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002048:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800204a:	429a      	cmp	r2, r3
 800204c:	d001      	beq.n	8002052 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800204e:	2301      	movs	r3, #1
 8002050:	e000      	b.n	8002054 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8002052:	2300      	movs	r3, #0
}
 8002054:	4618      	mov	r0, r3
 8002056:	3718      	adds	r7, #24
 8002058:	46bd      	mov	sp, r7
 800205a:	bd80      	pop	{r7, pc}
 800205c:	40007000 	.word	0x40007000
 8002060:	40023800 	.word	0x40023800
 8002064:	42470060 	.word	0x42470060

08002068 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	b084      	sub	sp, #16
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
 8002070:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	2b00      	cmp	r3, #0
 8002076:	d101      	bne.n	800207c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002078:	2301      	movs	r3, #1
 800207a:	e0cc      	b.n	8002216 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800207c:	4b68      	ldr	r3, [pc, #416]	; (8002220 <HAL_RCC_ClockConfig+0x1b8>)
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f003 030f 	and.w	r3, r3, #15
 8002084:	683a      	ldr	r2, [r7, #0]
 8002086:	429a      	cmp	r2, r3
 8002088:	d90c      	bls.n	80020a4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800208a:	4b65      	ldr	r3, [pc, #404]	; (8002220 <HAL_RCC_ClockConfig+0x1b8>)
 800208c:	683a      	ldr	r2, [r7, #0]
 800208e:	b2d2      	uxtb	r2, r2
 8002090:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002092:	4b63      	ldr	r3, [pc, #396]	; (8002220 <HAL_RCC_ClockConfig+0x1b8>)
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f003 030f 	and.w	r3, r3, #15
 800209a:	683a      	ldr	r2, [r7, #0]
 800209c:	429a      	cmp	r2, r3
 800209e:	d001      	beq.n	80020a4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80020a0:	2301      	movs	r3, #1
 80020a2:	e0b8      	b.n	8002216 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f003 0302 	and.w	r3, r3, #2
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d020      	beq.n	80020f2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f003 0304 	and.w	r3, r3, #4
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d005      	beq.n	80020c8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80020bc:	4b59      	ldr	r3, [pc, #356]	; (8002224 <HAL_RCC_ClockConfig+0x1bc>)
 80020be:	689b      	ldr	r3, [r3, #8]
 80020c0:	4a58      	ldr	r2, [pc, #352]	; (8002224 <HAL_RCC_ClockConfig+0x1bc>)
 80020c2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80020c6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f003 0308 	and.w	r3, r3, #8
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d005      	beq.n	80020e0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80020d4:	4b53      	ldr	r3, [pc, #332]	; (8002224 <HAL_RCC_ClockConfig+0x1bc>)
 80020d6:	689b      	ldr	r3, [r3, #8]
 80020d8:	4a52      	ldr	r2, [pc, #328]	; (8002224 <HAL_RCC_ClockConfig+0x1bc>)
 80020da:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80020de:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80020e0:	4b50      	ldr	r3, [pc, #320]	; (8002224 <HAL_RCC_ClockConfig+0x1bc>)
 80020e2:	689b      	ldr	r3, [r3, #8]
 80020e4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	689b      	ldr	r3, [r3, #8]
 80020ec:	494d      	ldr	r1, [pc, #308]	; (8002224 <HAL_RCC_ClockConfig+0x1bc>)
 80020ee:	4313      	orrs	r3, r2
 80020f0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f003 0301 	and.w	r3, r3, #1
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d044      	beq.n	8002188 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	685b      	ldr	r3, [r3, #4]
 8002102:	2b01      	cmp	r3, #1
 8002104:	d107      	bne.n	8002116 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002106:	4b47      	ldr	r3, [pc, #284]	; (8002224 <HAL_RCC_ClockConfig+0x1bc>)
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800210e:	2b00      	cmp	r3, #0
 8002110:	d119      	bne.n	8002146 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002112:	2301      	movs	r3, #1
 8002114:	e07f      	b.n	8002216 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	685b      	ldr	r3, [r3, #4]
 800211a:	2b02      	cmp	r3, #2
 800211c:	d003      	beq.n	8002126 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002122:	2b03      	cmp	r3, #3
 8002124:	d107      	bne.n	8002136 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002126:	4b3f      	ldr	r3, [pc, #252]	; (8002224 <HAL_RCC_ClockConfig+0x1bc>)
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800212e:	2b00      	cmp	r3, #0
 8002130:	d109      	bne.n	8002146 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002132:	2301      	movs	r3, #1
 8002134:	e06f      	b.n	8002216 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002136:	4b3b      	ldr	r3, [pc, #236]	; (8002224 <HAL_RCC_ClockConfig+0x1bc>)
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f003 0302 	and.w	r3, r3, #2
 800213e:	2b00      	cmp	r3, #0
 8002140:	d101      	bne.n	8002146 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002142:	2301      	movs	r3, #1
 8002144:	e067      	b.n	8002216 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002146:	4b37      	ldr	r3, [pc, #220]	; (8002224 <HAL_RCC_ClockConfig+0x1bc>)
 8002148:	689b      	ldr	r3, [r3, #8]
 800214a:	f023 0203 	bic.w	r2, r3, #3
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	685b      	ldr	r3, [r3, #4]
 8002152:	4934      	ldr	r1, [pc, #208]	; (8002224 <HAL_RCC_ClockConfig+0x1bc>)
 8002154:	4313      	orrs	r3, r2
 8002156:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002158:	f7ff f9dc 	bl	8001514 <HAL_GetTick>
 800215c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800215e:	e00a      	b.n	8002176 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002160:	f7ff f9d8 	bl	8001514 <HAL_GetTick>
 8002164:	4602      	mov	r2, r0
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	1ad3      	subs	r3, r2, r3
 800216a:	f241 3288 	movw	r2, #5000	; 0x1388
 800216e:	4293      	cmp	r3, r2
 8002170:	d901      	bls.n	8002176 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002172:	2303      	movs	r3, #3
 8002174:	e04f      	b.n	8002216 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002176:	4b2b      	ldr	r3, [pc, #172]	; (8002224 <HAL_RCC_ClockConfig+0x1bc>)
 8002178:	689b      	ldr	r3, [r3, #8]
 800217a:	f003 020c 	and.w	r2, r3, #12
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	685b      	ldr	r3, [r3, #4]
 8002182:	009b      	lsls	r3, r3, #2
 8002184:	429a      	cmp	r2, r3
 8002186:	d1eb      	bne.n	8002160 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002188:	4b25      	ldr	r3, [pc, #148]	; (8002220 <HAL_RCC_ClockConfig+0x1b8>)
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f003 030f 	and.w	r3, r3, #15
 8002190:	683a      	ldr	r2, [r7, #0]
 8002192:	429a      	cmp	r2, r3
 8002194:	d20c      	bcs.n	80021b0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002196:	4b22      	ldr	r3, [pc, #136]	; (8002220 <HAL_RCC_ClockConfig+0x1b8>)
 8002198:	683a      	ldr	r2, [r7, #0]
 800219a:	b2d2      	uxtb	r2, r2
 800219c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800219e:	4b20      	ldr	r3, [pc, #128]	; (8002220 <HAL_RCC_ClockConfig+0x1b8>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f003 030f 	and.w	r3, r3, #15
 80021a6:	683a      	ldr	r2, [r7, #0]
 80021a8:	429a      	cmp	r2, r3
 80021aa:	d001      	beq.n	80021b0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80021ac:	2301      	movs	r3, #1
 80021ae:	e032      	b.n	8002216 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f003 0304 	and.w	r3, r3, #4
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d008      	beq.n	80021ce <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80021bc:	4b19      	ldr	r3, [pc, #100]	; (8002224 <HAL_RCC_ClockConfig+0x1bc>)
 80021be:	689b      	ldr	r3, [r3, #8]
 80021c0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	68db      	ldr	r3, [r3, #12]
 80021c8:	4916      	ldr	r1, [pc, #88]	; (8002224 <HAL_RCC_ClockConfig+0x1bc>)
 80021ca:	4313      	orrs	r3, r2
 80021cc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f003 0308 	and.w	r3, r3, #8
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d009      	beq.n	80021ee <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80021da:	4b12      	ldr	r3, [pc, #72]	; (8002224 <HAL_RCC_ClockConfig+0x1bc>)
 80021dc:	689b      	ldr	r3, [r3, #8]
 80021de:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	691b      	ldr	r3, [r3, #16]
 80021e6:	00db      	lsls	r3, r3, #3
 80021e8:	490e      	ldr	r1, [pc, #56]	; (8002224 <HAL_RCC_ClockConfig+0x1bc>)
 80021ea:	4313      	orrs	r3, r2
 80021ec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80021ee:	f000 f821 	bl	8002234 <HAL_RCC_GetSysClockFreq>
 80021f2:	4602      	mov	r2, r0
 80021f4:	4b0b      	ldr	r3, [pc, #44]	; (8002224 <HAL_RCC_ClockConfig+0x1bc>)
 80021f6:	689b      	ldr	r3, [r3, #8]
 80021f8:	091b      	lsrs	r3, r3, #4
 80021fa:	f003 030f 	and.w	r3, r3, #15
 80021fe:	490a      	ldr	r1, [pc, #40]	; (8002228 <HAL_RCC_ClockConfig+0x1c0>)
 8002200:	5ccb      	ldrb	r3, [r1, r3]
 8002202:	fa22 f303 	lsr.w	r3, r2, r3
 8002206:	4a09      	ldr	r2, [pc, #36]	; (800222c <HAL_RCC_ClockConfig+0x1c4>)
 8002208:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800220a:	4b09      	ldr	r3, [pc, #36]	; (8002230 <HAL_RCC_ClockConfig+0x1c8>)
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	4618      	mov	r0, r3
 8002210:	f7ff f93c 	bl	800148c <HAL_InitTick>

  return HAL_OK;
 8002214:	2300      	movs	r3, #0
}
 8002216:	4618      	mov	r0, r3
 8002218:	3710      	adds	r7, #16
 800221a:	46bd      	mov	sp, r7
 800221c:	bd80      	pop	{r7, pc}
 800221e:	bf00      	nop
 8002220:	40023c00 	.word	0x40023c00
 8002224:	40023800 	.word	0x40023800
 8002228:	080046c0 	.word	0x080046c0
 800222c:	20000070 	.word	0x20000070
 8002230:	20000074 	.word	0x20000074

08002234 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002234:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002238:	b084      	sub	sp, #16
 800223a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800223c:	2300      	movs	r3, #0
 800223e:	607b      	str	r3, [r7, #4]
 8002240:	2300      	movs	r3, #0
 8002242:	60fb      	str	r3, [r7, #12]
 8002244:	2300      	movs	r3, #0
 8002246:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002248:	2300      	movs	r3, #0
 800224a:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800224c:	4b67      	ldr	r3, [pc, #412]	; (80023ec <HAL_RCC_GetSysClockFreq+0x1b8>)
 800224e:	689b      	ldr	r3, [r3, #8]
 8002250:	f003 030c 	and.w	r3, r3, #12
 8002254:	2b08      	cmp	r3, #8
 8002256:	d00d      	beq.n	8002274 <HAL_RCC_GetSysClockFreq+0x40>
 8002258:	2b08      	cmp	r3, #8
 800225a:	f200 80bd 	bhi.w	80023d8 <HAL_RCC_GetSysClockFreq+0x1a4>
 800225e:	2b00      	cmp	r3, #0
 8002260:	d002      	beq.n	8002268 <HAL_RCC_GetSysClockFreq+0x34>
 8002262:	2b04      	cmp	r3, #4
 8002264:	d003      	beq.n	800226e <HAL_RCC_GetSysClockFreq+0x3a>
 8002266:	e0b7      	b.n	80023d8 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002268:	4b61      	ldr	r3, [pc, #388]	; (80023f0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800226a:	60bb      	str	r3, [r7, #8]
       break;
 800226c:	e0b7      	b.n	80023de <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800226e:	4b61      	ldr	r3, [pc, #388]	; (80023f4 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8002270:	60bb      	str	r3, [r7, #8]
      break;
 8002272:	e0b4      	b.n	80023de <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002274:	4b5d      	ldr	r3, [pc, #372]	; (80023ec <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002276:	685b      	ldr	r3, [r3, #4]
 8002278:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800227c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800227e:	4b5b      	ldr	r3, [pc, #364]	; (80023ec <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002280:	685b      	ldr	r3, [r3, #4]
 8002282:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002286:	2b00      	cmp	r3, #0
 8002288:	d04d      	beq.n	8002326 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800228a:	4b58      	ldr	r3, [pc, #352]	; (80023ec <HAL_RCC_GetSysClockFreq+0x1b8>)
 800228c:	685b      	ldr	r3, [r3, #4]
 800228e:	099b      	lsrs	r3, r3, #6
 8002290:	461a      	mov	r2, r3
 8002292:	f04f 0300 	mov.w	r3, #0
 8002296:	f240 10ff 	movw	r0, #511	; 0x1ff
 800229a:	f04f 0100 	mov.w	r1, #0
 800229e:	ea02 0800 	and.w	r8, r2, r0
 80022a2:	ea03 0901 	and.w	r9, r3, r1
 80022a6:	4640      	mov	r0, r8
 80022a8:	4649      	mov	r1, r9
 80022aa:	f04f 0200 	mov.w	r2, #0
 80022ae:	f04f 0300 	mov.w	r3, #0
 80022b2:	014b      	lsls	r3, r1, #5
 80022b4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80022b8:	0142      	lsls	r2, r0, #5
 80022ba:	4610      	mov	r0, r2
 80022bc:	4619      	mov	r1, r3
 80022be:	ebb0 0008 	subs.w	r0, r0, r8
 80022c2:	eb61 0109 	sbc.w	r1, r1, r9
 80022c6:	f04f 0200 	mov.w	r2, #0
 80022ca:	f04f 0300 	mov.w	r3, #0
 80022ce:	018b      	lsls	r3, r1, #6
 80022d0:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80022d4:	0182      	lsls	r2, r0, #6
 80022d6:	1a12      	subs	r2, r2, r0
 80022d8:	eb63 0301 	sbc.w	r3, r3, r1
 80022dc:	f04f 0000 	mov.w	r0, #0
 80022e0:	f04f 0100 	mov.w	r1, #0
 80022e4:	00d9      	lsls	r1, r3, #3
 80022e6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80022ea:	00d0      	lsls	r0, r2, #3
 80022ec:	4602      	mov	r2, r0
 80022ee:	460b      	mov	r3, r1
 80022f0:	eb12 0208 	adds.w	r2, r2, r8
 80022f4:	eb43 0309 	adc.w	r3, r3, r9
 80022f8:	f04f 0000 	mov.w	r0, #0
 80022fc:	f04f 0100 	mov.w	r1, #0
 8002300:	0259      	lsls	r1, r3, #9
 8002302:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8002306:	0250      	lsls	r0, r2, #9
 8002308:	4602      	mov	r2, r0
 800230a:	460b      	mov	r3, r1
 800230c:	4610      	mov	r0, r2
 800230e:	4619      	mov	r1, r3
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	461a      	mov	r2, r3
 8002314:	f04f 0300 	mov.w	r3, #0
 8002318:	f7fe fbe0 	bl	8000adc <__aeabi_uldivmod>
 800231c:	4602      	mov	r2, r0
 800231e:	460b      	mov	r3, r1
 8002320:	4613      	mov	r3, r2
 8002322:	60fb      	str	r3, [r7, #12]
 8002324:	e04a      	b.n	80023bc <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002326:	4b31      	ldr	r3, [pc, #196]	; (80023ec <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002328:	685b      	ldr	r3, [r3, #4]
 800232a:	099b      	lsrs	r3, r3, #6
 800232c:	461a      	mov	r2, r3
 800232e:	f04f 0300 	mov.w	r3, #0
 8002332:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002336:	f04f 0100 	mov.w	r1, #0
 800233a:	ea02 0400 	and.w	r4, r2, r0
 800233e:	ea03 0501 	and.w	r5, r3, r1
 8002342:	4620      	mov	r0, r4
 8002344:	4629      	mov	r1, r5
 8002346:	f04f 0200 	mov.w	r2, #0
 800234a:	f04f 0300 	mov.w	r3, #0
 800234e:	014b      	lsls	r3, r1, #5
 8002350:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002354:	0142      	lsls	r2, r0, #5
 8002356:	4610      	mov	r0, r2
 8002358:	4619      	mov	r1, r3
 800235a:	1b00      	subs	r0, r0, r4
 800235c:	eb61 0105 	sbc.w	r1, r1, r5
 8002360:	f04f 0200 	mov.w	r2, #0
 8002364:	f04f 0300 	mov.w	r3, #0
 8002368:	018b      	lsls	r3, r1, #6
 800236a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800236e:	0182      	lsls	r2, r0, #6
 8002370:	1a12      	subs	r2, r2, r0
 8002372:	eb63 0301 	sbc.w	r3, r3, r1
 8002376:	f04f 0000 	mov.w	r0, #0
 800237a:	f04f 0100 	mov.w	r1, #0
 800237e:	00d9      	lsls	r1, r3, #3
 8002380:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002384:	00d0      	lsls	r0, r2, #3
 8002386:	4602      	mov	r2, r0
 8002388:	460b      	mov	r3, r1
 800238a:	1912      	adds	r2, r2, r4
 800238c:	eb45 0303 	adc.w	r3, r5, r3
 8002390:	f04f 0000 	mov.w	r0, #0
 8002394:	f04f 0100 	mov.w	r1, #0
 8002398:	0299      	lsls	r1, r3, #10
 800239a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800239e:	0290      	lsls	r0, r2, #10
 80023a0:	4602      	mov	r2, r0
 80023a2:	460b      	mov	r3, r1
 80023a4:	4610      	mov	r0, r2
 80023a6:	4619      	mov	r1, r3
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	461a      	mov	r2, r3
 80023ac:	f04f 0300 	mov.w	r3, #0
 80023b0:	f7fe fb94 	bl	8000adc <__aeabi_uldivmod>
 80023b4:	4602      	mov	r2, r0
 80023b6:	460b      	mov	r3, r1
 80023b8:	4613      	mov	r3, r2
 80023ba:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80023bc:	4b0b      	ldr	r3, [pc, #44]	; (80023ec <HAL_RCC_GetSysClockFreq+0x1b8>)
 80023be:	685b      	ldr	r3, [r3, #4]
 80023c0:	0c1b      	lsrs	r3, r3, #16
 80023c2:	f003 0303 	and.w	r3, r3, #3
 80023c6:	3301      	adds	r3, #1
 80023c8:	005b      	lsls	r3, r3, #1
 80023ca:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80023cc:	68fa      	ldr	r2, [r7, #12]
 80023ce:	683b      	ldr	r3, [r7, #0]
 80023d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80023d4:	60bb      	str	r3, [r7, #8]
      break;
 80023d6:	e002      	b.n	80023de <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80023d8:	4b05      	ldr	r3, [pc, #20]	; (80023f0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80023da:	60bb      	str	r3, [r7, #8]
      break;
 80023dc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80023de:	68bb      	ldr	r3, [r7, #8]
}
 80023e0:	4618      	mov	r0, r3
 80023e2:	3710      	adds	r7, #16
 80023e4:	46bd      	mov	sp, r7
 80023e6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80023ea:	bf00      	nop
 80023ec:	40023800 	.word	0x40023800
 80023f0:	00f42400 	.word	0x00f42400
 80023f4:	007a1200 	.word	0x007a1200

080023f8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80023f8:	b480      	push	{r7}
 80023fa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80023fc:	4b03      	ldr	r3, [pc, #12]	; (800240c <HAL_RCC_GetHCLKFreq+0x14>)
 80023fe:	681b      	ldr	r3, [r3, #0]
}
 8002400:	4618      	mov	r0, r3
 8002402:	46bd      	mov	sp, r7
 8002404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002408:	4770      	bx	lr
 800240a:	bf00      	nop
 800240c:	20000070 	.word	0x20000070

08002410 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002414:	f7ff fff0 	bl	80023f8 <HAL_RCC_GetHCLKFreq>
 8002418:	4602      	mov	r2, r0
 800241a:	4b05      	ldr	r3, [pc, #20]	; (8002430 <HAL_RCC_GetPCLK1Freq+0x20>)
 800241c:	689b      	ldr	r3, [r3, #8]
 800241e:	0a9b      	lsrs	r3, r3, #10
 8002420:	f003 0307 	and.w	r3, r3, #7
 8002424:	4903      	ldr	r1, [pc, #12]	; (8002434 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002426:	5ccb      	ldrb	r3, [r1, r3]
 8002428:	fa22 f303 	lsr.w	r3, r2, r3
}
 800242c:	4618      	mov	r0, r3
 800242e:	bd80      	pop	{r7, pc}
 8002430:	40023800 	.word	0x40023800
 8002434:	080046d0 	.word	0x080046d0

08002438 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800243c:	f7ff ffdc 	bl	80023f8 <HAL_RCC_GetHCLKFreq>
 8002440:	4602      	mov	r2, r0
 8002442:	4b05      	ldr	r3, [pc, #20]	; (8002458 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002444:	689b      	ldr	r3, [r3, #8]
 8002446:	0b5b      	lsrs	r3, r3, #13
 8002448:	f003 0307 	and.w	r3, r3, #7
 800244c:	4903      	ldr	r1, [pc, #12]	; (800245c <HAL_RCC_GetPCLK2Freq+0x24>)
 800244e:	5ccb      	ldrb	r3, [r1, r3]
 8002450:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002454:	4618      	mov	r0, r3
 8002456:	bd80      	pop	{r7, pc}
 8002458:	40023800 	.word	0x40023800
 800245c:	080046d0 	.word	0x080046d0

08002460 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	b082      	sub	sp, #8
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	2b00      	cmp	r3, #0
 800246c:	d101      	bne.n	8002472 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800246e:	2301      	movs	r3, #1
 8002470:	e03f      	b.n	80024f2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002478:	b2db      	uxtb	r3, r3
 800247a:	2b00      	cmp	r3, #0
 800247c:	d106      	bne.n	800248c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	2200      	movs	r2, #0
 8002482:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002486:	6878      	ldr	r0, [r7, #4]
 8002488:	f7fe fd5a 	bl	8000f40 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	2224      	movs	r2, #36	; 0x24
 8002490:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	68da      	ldr	r2, [r3, #12]
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80024a2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80024a4:	6878      	ldr	r0, [r7, #4]
 80024a6:	f000 f9cb 	bl	8002840 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	691a      	ldr	r2, [r3, #16]
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80024b8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	695a      	ldr	r2, [r3, #20]
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80024c8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	68da      	ldr	r2, [r3, #12]
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80024d8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	2200      	movs	r2, #0
 80024de:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	2220      	movs	r2, #32
 80024e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	2220      	movs	r2, #32
 80024ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80024f0:	2300      	movs	r3, #0
}
 80024f2:	4618      	mov	r0, r3
 80024f4:	3708      	adds	r7, #8
 80024f6:	46bd      	mov	sp, r7
 80024f8:	bd80      	pop	{r7, pc}

080024fa <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80024fa:	b580      	push	{r7, lr}
 80024fc:	b08a      	sub	sp, #40	; 0x28
 80024fe:	af02      	add	r7, sp, #8
 8002500:	60f8      	str	r0, [r7, #12]
 8002502:	60b9      	str	r1, [r7, #8]
 8002504:	603b      	str	r3, [r7, #0]
 8002506:	4613      	mov	r3, r2
 8002508:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800250a:	2300      	movs	r3, #0
 800250c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002514:	b2db      	uxtb	r3, r3
 8002516:	2b20      	cmp	r3, #32
 8002518:	d17c      	bne.n	8002614 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800251a:	68bb      	ldr	r3, [r7, #8]
 800251c:	2b00      	cmp	r3, #0
 800251e:	d002      	beq.n	8002526 <HAL_UART_Transmit+0x2c>
 8002520:	88fb      	ldrh	r3, [r7, #6]
 8002522:	2b00      	cmp	r3, #0
 8002524:	d101      	bne.n	800252a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002526:	2301      	movs	r3, #1
 8002528:	e075      	b.n	8002616 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002530:	2b01      	cmp	r3, #1
 8002532:	d101      	bne.n	8002538 <HAL_UART_Transmit+0x3e>
 8002534:	2302      	movs	r3, #2
 8002536:	e06e      	b.n	8002616 <HAL_UART_Transmit+0x11c>
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	2201      	movs	r2, #1
 800253c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	2200      	movs	r2, #0
 8002544:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	2221      	movs	r2, #33	; 0x21
 800254a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800254e:	f7fe ffe1 	bl	8001514 <HAL_GetTick>
 8002552:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	88fa      	ldrh	r2, [r7, #6]
 8002558:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	88fa      	ldrh	r2, [r7, #6]
 800255e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	689b      	ldr	r3, [r3, #8]
 8002564:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002568:	d108      	bne.n	800257c <HAL_UART_Transmit+0x82>
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	691b      	ldr	r3, [r3, #16]
 800256e:	2b00      	cmp	r3, #0
 8002570:	d104      	bne.n	800257c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002572:	2300      	movs	r3, #0
 8002574:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002576:	68bb      	ldr	r3, [r7, #8]
 8002578:	61bb      	str	r3, [r7, #24]
 800257a:	e003      	b.n	8002584 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800257c:	68bb      	ldr	r3, [r7, #8]
 800257e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002580:	2300      	movs	r3, #0
 8002582:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	2200      	movs	r2, #0
 8002588:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800258c:	e02a      	b.n	80025e4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800258e:	683b      	ldr	r3, [r7, #0]
 8002590:	9300      	str	r3, [sp, #0]
 8002592:	697b      	ldr	r3, [r7, #20]
 8002594:	2200      	movs	r2, #0
 8002596:	2180      	movs	r1, #128	; 0x80
 8002598:	68f8      	ldr	r0, [r7, #12]
 800259a:	f000 f8e2 	bl	8002762 <UART_WaitOnFlagUntilTimeout>
 800259e:	4603      	mov	r3, r0
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d001      	beq.n	80025a8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80025a4:	2303      	movs	r3, #3
 80025a6:	e036      	b.n	8002616 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80025a8:	69fb      	ldr	r3, [r7, #28]
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d10b      	bne.n	80025c6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80025ae:	69bb      	ldr	r3, [r7, #24]
 80025b0:	881b      	ldrh	r3, [r3, #0]
 80025b2:	461a      	mov	r2, r3
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80025bc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80025be:	69bb      	ldr	r3, [r7, #24]
 80025c0:	3302      	adds	r3, #2
 80025c2:	61bb      	str	r3, [r7, #24]
 80025c4:	e007      	b.n	80025d6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80025c6:	69fb      	ldr	r3, [r7, #28]
 80025c8:	781a      	ldrb	r2, [r3, #0]
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80025d0:	69fb      	ldr	r3, [r7, #28]
 80025d2:	3301      	adds	r3, #1
 80025d4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80025da:	b29b      	uxth	r3, r3
 80025dc:	3b01      	subs	r3, #1
 80025de:	b29a      	uxth	r2, r3
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80025e8:	b29b      	uxth	r3, r3
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d1cf      	bne.n	800258e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80025ee:	683b      	ldr	r3, [r7, #0]
 80025f0:	9300      	str	r3, [sp, #0]
 80025f2:	697b      	ldr	r3, [r7, #20]
 80025f4:	2200      	movs	r2, #0
 80025f6:	2140      	movs	r1, #64	; 0x40
 80025f8:	68f8      	ldr	r0, [r7, #12]
 80025fa:	f000 f8b2 	bl	8002762 <UART_WaitOnFlagUntilTimeout>
 80025fe:	4603      	mov	r3, r0
 8002600:	2b00      	cmp	r3, #0
 8002602:	d001      	beq.n	8002608 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002604:	2303      	movs	r3, #3
 8002606:	e006      	b.n	8002616 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	2220      	movs	r2, #32
 800260c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002610:	2300      	movs	r3, #0
 8002612:	e000      	b.n	8002616 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002614:	2302      	movs	r3, #2
  }
}
 8002616:	4618      	mov	r0, r3
 8002618:	3720      	adds	r7, #32
 800261a:	46bd      	mov	sp, r7
 800261c:	bd80      	pop	{r7, pc}

0800261e <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800261e:	b580      	push	{r7, lr}
 8002620:	b08a      	sub	sp, #40	; 0x28
 8002622:	af02      	add	r7, sp, #8
 8002624:	60f8      	str	r0, [r7, #12]
 8002626:	60b9      	str	r1, [r7, #8]
 8002628:	603b      	str	r3, [r7, #0]
 800262a:	4613      	mov	r3, r2
 800262c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800262e:	2300      	movs	r3, #0
 8002630:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002638:	b2db      	uxtb	r3, r3
 800263a:	2b20      	cmp	r3, #32
 800263c:	f040 808c 	bne.w	8002758 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002640:	68bb      	ldr	r3, [r7, #8]
 8002642:	2b00      	cmp	r3, #0
 8002644:	d002      	beq.n	800264c <HAL_UART_Receive+0x2e>
 8002646:	88fb      	ldrh	r3, [r7, #6]
 8002648:	2b00      	cmp	r3, #0
 800264a:	d101      	bne.n	8002650 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 800264c:	2301      	movs	r3, #1
 800264e:	e084      	b.n	800275a <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002656:	2b01      	cmp	r3, #1
 8002658:	d101      	bne.n	800265e <HAL_UART_Receive+0x40>
 800265a:	2302      	movs	r3, #2
 800265c:	e07d      	b.n	800275a <HAL_UART_Receive+0x13c>
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	2201      	movs	r2, #1
 8002662:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	2200      	movs	r2, #0
 800266a:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	2222      	movs	r2, #34	; 0x22
 8002670:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	2200      	movs	r2, #0
 8002678:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800267a:	f7fe ff4b 	bl	8001514 <HAL_GetTick>
 800267e:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	88fa      	ldrh	r2, [r7, #6]
 8002684:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	88fa      	ldrh	r2, [r7, #6]
 800268a:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	689b      	ldr	r3, [r3, #8]
 8002690:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002694:	d108      	bne.n	80026a8 <HAL_UART_Receive+0x8a>
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	691b      	ldr	r3, [r3, #16]
 800269a:	2b00      	cmp	r3, #0
 800269c:	d104      	bne.n	80026a8 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 800269e:	2300      	movs	r3, #0
 80026a0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80026a2:	68bb      	ldr	r3, [r7, #8]
 80026a4:	61bb      	str	r3, [r7, #24]
 80026a6:	e003      	b.n	80026b0 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 80026a8:	68bb      	ldr	r3, [r7, #8]
 80026aa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80026ac:	2300      	movs	r3, #0
 80026ae:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	2200      	movs	r2, #0
 80026b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80026b8:	e043      	b.n	8002742 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80026ba:	683b      	ldr	r3, [r7, #0]
 80026bc:	9300      	str	r3, [sp, #0]
 80026be:	697b      	ldr	r3, [r7, #20]
 80026c0:	2200      	movs	r2, #0
 80026c2:	2120      	movs	r1, #32
 80026c4:	68f8      	ldr	r0, [r7, #12]
 80026c6:	f000 f84c 	bl	8002762 <UART_WaitOnFlagUntilTimeout>
 80026ca:	4603      	mov	r3, r0
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d001      	beq.n	80026d4 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 80026d0:	2303      	movs	r3, #3
 80026d2:	e042      	b.n	800275a <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 80026d4:	69fb      	ldr	r3, [r7, #28]
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d10c      	bne.n	80026f4 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	685b      	ldr	r3, [r3, #4]
 80026e0:	b29b      	uxth	r3, r3
 80026e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80026e6:	b29a      	uxth	r2, r3
 80026e8:	69bb      	ldr	r3, [r7, #24]
 80026ea:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80026ec:	69bb      	ldr	r3, [r7, #24]
 80026ee:	3302      	adds	r3, #2
 80026f0:	61bb      	str	r3, [r7, #24]
 80026f2:	e01f      	b.n	8002734 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	689b      	ldr	r3, [r3, #8]
 80026f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80026fc:	d007      	beq.n	800270e <HAL_UART_Receive+0xf0>
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	689b      	ldr	r3, [r3, #8]
 8002702:	2b00      	cmp	r3, #0
 8002704:	d10a      	bne.n	800271c <HAL_UART_Receive+0xfe>
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	691b      	ldr	r3, [r3, #16]
 800270a:	2b00      	cmp	r3, #0
 800270c:	d106      	bne.n	800271c <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	685b      	ldr	r3, [r3, #4]
 8002714:	b2da      	uxtb	r2, r3
 8002716:	69fb      	ldr	r3, [r7, #28]
 8002718:	701a      	strb	r2, [r3, #0]
 800271a:	e008      	b.n	800272e <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	685b      	ldr	r3, [r3, #4]
 8002722:	b2db      	uxtb	r3, r3
 8002724:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002728:	b2da      	uxtb	r2, r3
 800272a:	69fb      	ldr	r3, [r7, #28]
 800272c:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 800272e:	69fb      	ldr	r3, [r7, #28]
 8002730:	3301      	adds	r3, #1
 8002732:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002738:	b29b      	uxth	r3, r3
 800273a:	3b01      	subs	r3, #1
 800273c:	b29a      	uxth	r2, r3
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002746:	b29b      	uxth	r3, r3
 8002748:	2b00      	cmp	r3, #0
 800274a:	d1b6      	bne.n	80026ba <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	2220      	movs	r2, #32
 8002750:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8002754:	2300      	movs	r3, #0
 8002756:	e000      	b.n	800275a <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8002758:	2302      	movs	r3, #2
  }
}
 800275a:	4618      	mov	r0, r3
 800275c:	3720      	adds	r7, #32
 800275e:	46bd      	mov	sp, r7
 8002760:	bd80      	pop	{r7, pc}

08002762 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002762:	b580      	push	{r7, lr}
 8002764:	b090      	sub	sp, #64	; 0x40
 8002766:	af00      	add	r7, sp, #0
 8002768:	60f8      	str	r0, [r7, #12]
 800276a:	60b9      	str	r1, [r7, #8]
 800276c:	603b      	str	r3, [r7, #0]
 800276e:	4613      	mov	r3, r2
 8002770:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002772:	e050      	b.n	8002816 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002774:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002776:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800277a:	d04c      	beq.n	8002816 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800277c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800277e:	2b00      	cmp	r3, #0
 8002780:	d007      	beq.n	8002792 <UART_WaitOnFlagUntilTimeout+0x30>
 8002782:	f7fe fec7 	bl	8001514 <HAL_GetTick>
 8002786:	4602      	mov	r2, r0
 8002788:	683b      	ldr	r3, [r7, #0]
 800278a:	1ad3      	subs	r3, r2, r3
 800278c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800278e:	429a      	cmp	r2, r3
 8002790:	d241      	bcs.n	8002816 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	330c      	adds	r3, #12
 8002798:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800279a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800279c:	e853 3f00 	ldrex	r3, [r3]
 80027a0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80027a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027a4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80027a8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	330c      	adds	r3, #12
 80027b0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80027b2:	637a      	str	r2, [r7, #52]	; 0x34
 80027b4:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80027b6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80027b8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80027ba:	e841 2300 	strex	r3, r2, [r1]
 80027be:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80027c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d1e5      	bne.n	8002792 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	3314      	adds	r3, #20
 80027cc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80027ce:	697b      	ldr	r3, [r7, #20]
 80027d0:	e853 3f00 	ldrex	r3, [r3]
 80027d4:	613b      	str	r3, [r7, #16]
   return(result);
 80027d6:	693b      	ldr	r3, [r7, #16]
 80027d8:	f023 0301 	bic.w	r3, r3, #1
 80027dc:	63bb      	str	r3, [r7, #56]	; 0x38
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	3314      	adds	r3, #20
 80027e4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80027e6:	623a      	str	r2, [r7, #32]
 80027e8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80027ea:	69f9      	ldr	r1, [r7, #28]
 80027ec:	6a3a      	ldr	r2, [r7, #32]
 80027ee:	e841 2300 	strex	r3, r2, [r1]
 80027f2:	61bb      	str	r3, [r7, #24]
   return(result);
 80027f4:	69bb      	ldr	r3, [r7, #24]
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d1e5      	bne.n	80027c6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	2220      	movs	r2, #32
 80027fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	2220      	movs	r2, #32
 8002806:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	2200      	movs	r2, #0
 800280e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002812:	2303      	movs	r3, #3
 8002814:	e00f      	b.n	8002836 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	681a      	ldr	r2, [r3, #0]
 800281c:	68bb      	ldr	r3, [r7, #8]
 800281e:	4013      	ands	r3, r2
 8002820:	68ba      	ldr	r2, [r7, #8]
 8002822:	429a      	cmp	r2, r3
 8002824:	bf0c      	ite	eq
 8002826:	2301      	moveq	r3, #1
 8002828:	2300      	movne	r3, #0
 800282a:	b2db      	uxtb	r3, r3
 800282c:	461a      	mov	r2, r3
 800282e:	79fb      	ldrb	r3, [r7, #7]
 8002830:	429a      	cmp	r2, r3
 8002832:	d09f      	beq.n	8002774 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002834:	2300      	movs	r3, #0
}
 8002836:	4618      	mov	r0, r3
 8002838:	3740      	adds	r7, #64	; 0x40
 800283a:	46bd      	mov	sp, r7
 800283c:	bd80      	pop	{r7, pc}
	...

08002840 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002840:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002844:	b09f      	sub	sp, #124	; 0x7c
 8002846:	af00      	add	r7, sp, #0
 8002848:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800284a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	691b      	ldr	r3, [r3, #16]
 8002850:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002854:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002856:	68d9      	ldr	r1, [r3, #12]
 8002858:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800285a:	681a      	ldr	r2, [r3, #0]
 800285c:	ea40 0301 	orr.w	r3, r0, r1
 8002860:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002862:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002864:	689a      	ldr	r2, [r3, #8]
 8002866:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002868:	691b      	ldr	r3, [r3, #16]
 800286a:	431a      	orrs	r2, r3
 800286c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800286e:	695b      	ldr	r3, [r3, #20]
 8002870:	431a      	orrs	r2, r3
 8002872:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002874:	69db      	ldr	r3, [r3, #28]
 8002876:	4313      	orrs	r3, r2
 8002878:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800287a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	68db      	ldr	r3, [r3, #12]
 8002880:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002884:	f021 010c 	bic.w	r1, r1, #12
 8002888:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800288a:	681a      	ldr	r2, [r3, #0]
 800288c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800288e:	430b      	orrs	r3, r1
 8002890:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002892:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	695b      	ldr	r3, [r3, #20]
 8002898:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800289c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800289e:	6999      	ldr	r1, [r3, #24]
 80028a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80028a2:	681a      	ldr	r2, [r3, #0]
 80028a4:	ea40 0301 	orr.w	r3, r0, r1
 80028a8:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80028aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80028ac:	681a      	ldr	r2, [r3, #0]
 80028ae:	4bc5      	ldr	r3, [pc, #788]	; (8002bc4 <UART_SetConfig+0x384>)
 80028b0:	429a      	cmp	r2, r3
 80028b2:	d004      	beq.n	80028be <UART_SetConfig+0x7e>
 80028b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80028b6:	681a      	ldr	r2, [r3, #0]
 80028b8:	4bc3      	ldr	r3, [pc, #780]	; (8002bc8 <UART_SetConfig+0x388>)
 80028ba:	429a      	cmp	r2, r3
 80028bc:	d103      	bne.n	80028c6 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80028be:	f7ff fdbb 	bl	8002438 <HAL_RCC_GetPCLK2Freq>
 80028c2:	6778      	str	r0, [r7, #116]	; 0x74
 80028c4:	e002      	b.n	80028cc <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80028c6:	f7ff fda3 	bl	8002410 <HAL_RCC_GetPCLK1Freq>
 80028ca:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80028cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80028ce:	69db      	ldr	r3, [r3, #28]
 80028d0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80028d4:	f040 80b6 	bne.w	8002a44 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80028d8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80028da:	461c      	mov	r4, r3
 80028dc:	f04f 0500 	mov.w	r5, #0
 80028e0:	4622      	mov	r2, r4
 80028e2:	462b      	mov	r3, r5
 80028e4:	1891      	adds	r1, r2, r2
 80028e6:	6439      	str	r1, [r7, #64]	; 0x40
 80028e8:	415b      	adcs	r3, r3
 80028ea:	647b      	str	r3, [r7, #68]	; 0x44
 80028ec:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80028f0:	1912      	adds	r2, r2, r4
 80028f2:	eb45 0303 	adc.w	r3, r5, r3
 80028f6:	f04f 0000 	mov.w	r0, #0
 80028fa:	f04f 0100 	mov.w	r1, #0
 80028fe:	00d9      	lsls	r1, r3, #3
 8002900:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002904:	00d0      	lsls	r0, r2, #3
 8002906:	4602      	mov	r2, r0
 8002908:	460b      	mov	r3, r1
 800290a:	1911      	adds	r1, r2, r4
 800290c:	6639      	str	r1, [r7, #96]	; 0x60
 800290e:	416b      	adcs	r3, r5
 8002910:	667b      	str	r3, [r7, #100]	; 0x64
 8002912:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002914:	685b      	ldr	r3, [r3, #4]
 8002916:	461a      	mov	r2, r3
 8002918:	f04f 0300 	mov.w	r3, #0
 800291c:	1891      	adds	r1, r2, r2
 800291e:	63b9      	str	r1, [r7, #56]	; 0x38
 8002920:	415b      	adcs	r3, r3
 8002922:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002924:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002928:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800292c:	f7fe f8d6 	bl	8000adc <__aeabi_uldivmod>
 8002930:	4602      	mov	r2, r0
 8002932:	460b      	mov	r3, r1
 8002934:	4ba5      	ldr	r3, [pc, #660]	; (8002bcc <UART_SetConfig+0x38c>)
 8002936:	fba3 2302 	umull	r2, r3, r3, r2
 800293a:	095b      	lsrs	r3, r3, #5
 800293c:	011e      	lsls	r6, r3, #4
 800293e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002940:	461c      	mov	r4, r3
 8002942:	f04f 0500 	mov.w	r5, #0
 8002946:	4622      	mov	r2, r4
 8002948:	462b      	mov	r3, r5
 800294a:	1891      	adds	r1, r2, r2
 800294c:	6339      	str	r1, [r7, #48]	; 0x30
 800294e:	415b      	adcs	r3, r3
 8002950:	637b      	str	r3, [r7, #52]	; 0x34
 8002952:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002956:	1912      	adds	r2, r2, r4
 8002958:	eb45 0303 	adc.w	r3, r5, r3
 800295c:	f04f 0000 	mov.w	r0, #0
 8002960:	f04f 0100 	mov.w	r1, #0
 8002964:	00d9      	lsls	r1, r3, #3
 8002966:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800296a:	00d0      	lsls	r0, r2, #3
 800296c:	4602      	mov	r2, r0
 800296e:	460b      	mov	r3, r1
 8002970:	1911      	adds	r1, r2, r4
 8002972:	65b9      	str	r1, [r7, #88]	; 0x58
 8002974:	416b      	adcs	r3, r5
 8002976:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002978:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800297a:	685b      	ldr	r3, [r3, #4]
 800297c:	461a      	mov	r2, r3
 800297e:	f04f 0300 	mov.w	r3, #0
 8002982:	1891      	adds	r1, r2, r2
 8002984:	62b9      	str	r1, [r7, #40]	; 0x28
 8002986:	415b      	adcs	r3, r3
 8002988:	62fb      	str	r3, [r7, #44]	; 0x2c
 800298a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800298e:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8002992:	f7fe f8a3 	bl	8000adc <__aeabi_uldivmod>
 8002996:	4602      	mov	r2, r0
 8002998:	460b      	mov	r3, r1
 800299a:	4b8c      	ldr	r3, [pc, #560]	; (8002bcc <UART_SetConfig+0x38c>)
 800299c:	fba3 1302 	umull	r1, r3, r3, r2
 80029a0:	095b      	lsrs	r3, r3, #5
 80029a2:	2164      	movs	r1, #100	; 0x64
 80029a4:	fb01 f303 	mul.w	r3, r1, r3
 80029a8:	1ad3      	subs	r3, r2, r3
 80029aa:	00db      	lsls	r3, r3, #3
 80029ac:	3332      	adds	r3, #50	; 0x32
 80029ae:	4a87      	ldr	r2, [pc, #540]	; (8002bcc <UART_SetConfig+0x38c>)
 80029b0:	fba2 2303 	umull	r2, r3, r2, r3
 80029b4:	095b      	lsrs	r3, r3, #5
 80029b6:	005b      	lsls	r3, r3, #1
 80029b8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80029bc:	441e      	add	r6, r3
 80029be:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80029c0:	4618      	mov	r0, r3
 80029c2:	f04f 0100 	mov.w	r1, #0
 80029c6:	4602      	mov	r2, r0
 80029c8:	460b      	mov	r3, r1
 80029ca:	1894      	adds	r4, r2, r2
 80029cc:	623c      	str	r4, [r7, #32]
 80029ce:	415b      	adcs	r3, r3
 80029d0:	627b      	str	r3, [r7, #36]	; 0x24
 80029d2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80029d6:	1812      	adds	r2, r2, r0
 80029d8:	eb41 0303 	adc.w	r3, r1, r3
 80029dc:	f04f 0400 	mov.w	r4, #0
 80029e0:	f04f 0500 	mov.w	r5, #0
 80029e4:	00dd      	lsls	r5, r3, #3
 80029e6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80029ea:	00d4      	lsls	r4, r2, #3
 80029ec:	4622      	mov	r2, r4
 80029ee:	462b      	mov	r3, r5
 80029f0:	1814      	adds	r4, r2, r0
 80029f2:	653c      	str	r4, [r7, #80]	; 0x50
 80029f4:	414b      	adcs	r3, r1
 80029f6:	657b      	str	r3, [r7, #84]	; 0x54
 80029f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80029fa:	685b      	ldr	r3, [r3, #4]
 80029fc:	461a      	mov	r2, r3
 80029fe:	f04f 0300 	mov.w	r3, #0
 8002a02:	1891      	adds	r1, r2, r2
 8002a04:	61b9      	str	r1, [r7, #24]
 8002a06:	415b      	adcs	r3, r3
 8002a08:	61fb      	str	r3, [r7, #28]
 8002a0a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002a0e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8002a12:	f7fe f863 	bl	8000adc <__aeabi_uldivmod>
 8002a16:	4602      	mov	r2, r0
 8002a18:	460b      	mov	r3, r1
 8002a1a:	4b6c      	ldr	r3, [pc, #432]	; (8002bcc <UART_SetConfig+0x38c>)
 8002a1c:	fba3 1302 	umull	r1, r3, r3, r2
 8002a20:	095b      	lsrs	r3, r3, #5
 8002a22:	2164      	movs	r1, #100	; 0x64
 8002a24:	fb01 f303 	mul.w	r3, r1, r3
 8002a28:	1ad3      	subs	r3, r2, r3
 8002a2a:	00db      	lsls	r3, r3, #3
 8002a2c:	3332      	adds	r3, #50	; 0x32
 8002a2e:	4a67      	ldr	r2, [pc, #412]	; (8002bcc <UART_SetConfig+0x38c>)
 8002a30:	fba2 2303 	umull	r2, r3, r2, r3
 8002a34:	095b      	lsrs	r3, r3, #5
 8002a36:	f003 0207 	and.w	r2, r3, #7
 8002a3a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	4432      	add	r2, r6
 8002a40:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002a42:	e0b9      	b.n	8002bb8 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002a44:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002a46:	461c      	mov	r4, r3
 8002a48:	f04f 0500 	mov.w	r5, #0
 8002a4c:	4622      	mov	r2, r4
 8002a4e:	462b      	mov	r3, r5
 8002a50:	1891      	adds	r1, r2, r2
 8002a52:	6139      	str	r1, [r7, #16]
 8002a54:	415b      	adcs	r3, r3
 8002a56:	617b      	str	r3, [r7, #20]
 8002a58:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002a5c:	1912      	adds	r2, r2, r4
 8002a5e:	eb45 0303 	adc.w	r3, r5, r3
 8002a62:	f04f 0000 	mov.w	r0, #0
 8002a66:	f04f 0100 	mov.w	r1, #0
 8002a6a:	00d9      	lsls	r1, r3, #3
 8002a6c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002a70:	00d0      	lsls	r0, r2, #3
 8002a72:	4602      	mov	r2, r0
 8002a74:	460b      	mov	r3, r1
 8002a76:	eb12 0804 	adds.w	r8, r2, r4
 8002a7a:	eb43 0905 	adc.w	r9, r3, r5
 8002a7e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a80:	685b      	ldr	r3, [r3, #4]
 8002a82:	4618      	mov	r0, r3
 8002a84:	f04f 0100 	mov.w	r1, #0
 8002a88:	f04f 0200 	mov.w	r2, #0
 8002a8c:	f04f 0300 	mov.w	r3, #0
 8002a90:	008b      	lsls	r3, r1, #2
 8002a92:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002a96:	0082      	lsls	r2, r0, #2
 8002a98:	4640      	mov	r0, r8
 8002a9a:	4649      	mov	r1, r9
 8002a9c:	f7fe f81e 	bl	8000adc <__aeabi_uldivmod>
 8002aa0:	4602      	mov	r2, r0
 8002aa2:	460b      	mov	r3, r1
 8002aa4:	4b49      	ldr	r3, [pc, #292]	; (8002bcc <UART_SetConfig+0x38c>)
 8002aa6:	fba3 2302 	umull	r2, r3, r3, r2
 8002aaa:	095b      	lsrs	r3, r3, #5
 8002aac:	011e      	lsls	r6, r3, #4
 8002aae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	f04f 0100 	mov.w	r1, #0
 8002ab6:	4602      	mov	r2, r0
 8002ab8:	460b      	mov	r3, r1
 8002aba:	1894      	adds	r4, r2, r2
 8002abc:	60bc      	str	r4, [r7, #8]
 8002abe:	415b      	adcs	r3, r3
 8002ac0:	60fb      	str	r3, [r7, #12]
 8002ac2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002ac6:	1812      	adds	r2, r2, r0
 8002ac8:	eb41 0303 	adc.w	r3, r1, r3
 8002acc:	f04f 0400 	mov.w	r4, #0
 8002ad0:	f04f 0500 	mov.w	r5, #0
 8002ad4:	00dd      	lsls	r5, r3, #3
 8002ad6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002ada:	00d4      	lsls	r4, r2, #3
 8002adc:	4622      	mov	r2, r4
 8002ade:	462b      	mov	r3, r5
 8002ae0:	1814      	adds	r4, r2, r0
 8002ae2:	64bc      	str	r4, [r7, #72]	; 0x48
 8002ae4:	414b      	adcs	r3, r1
 8002ae6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002ae8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002aea:	685b      	ldr	r3, [r3, #4]
 8002aec:	4618      	mov	r0, r3
 8002aee:	f04f 0100 	mov.w	r1, #0
 8002af2:	f04f 0200 	mov.w	r2, #0
 8002af6:	f04f 0300 	mov.w	r3, #0
 8002afa:	008b      	lsls	r3, r1, #2
 8002afc:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002b00:	0082      	lsls	r2, r0, #2
 8002b02:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8002b06:	f7fd ffe9 	bl	8000adc <__aeabi_uldivmod>
 8002b0a:	4602      	mov	r2, r0
 8002b0c:	460b      	mov	r3, r1
 8002b0e:	4b2f      	ldr	r3, [pc, #188]	; (8002bcc <UART_SetConfig+0x38c>)
 8002b10:	fba3 1302 	umull	r1, r3, r3, r2
 8002b14:	095b      	lsrs	r3, r3, #5
 8002b16:	2164      	movs	r1, #100	; 0x64
 8002b18:	fb01 f303 	mul.w	r3, r1, r3
 8002b1c:	1ad3      	subs	r3, r2, r3
 8002b1e:	011b      	lsls	r3, r3, #4
 8002b20:	3332      	adds	r3, #50	; 0x32
 8002b22:	4a2a      	ldr	r2, [pc, #168]	; (8002bcc <UART_SetConfig+0x38c>)
 8002b24:	fba2 2303 	umull	r2, r3, r2, r3
 8002b28:	095b      	lsrs	r3, r3, #5
 8002b2a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002b2e:	441e      	add	r6, r3
 8002b30:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002b32:	4618      	mov	r0, r3
 8002b34:	f04f 0100 	mov.w	r1, #0
 8002b38:	4602      	mov	r2, r0
 8002b3a:	460b      	mov	r3, r1
 8002b3c:	1894      	adds	r4, r2, r2
 8002b3e:	603c      	str	r4, [r7, #0]
 8002b40:	415b      	adcs	r3, r3
 8002b42:	607b      	str	r3, [r7, #4]
 8002b44:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002b48:	1812      	adds	r2, r2, r0
 8002b4a:	eb41 0303 	adc.w	r3, r1, r3
 8002b4e:	f04f 0400 	mov.w	r4, #0
 8002b52:	f04f 0500 	mov.w	r5, #0
 8002b56:	00dd      	lsls	r5, r3, #3
 8002b58:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002b5c:	00d4      	lsls	r4, r2, #3
 8002b5e:	4622      	mov	r2, r4
 8002b60:	462b      	mov	r3, r5
 8002b62:	eb12 0a00 	adds.w	sl, r2, r0
 8002b66:	eb43 0b01 	adc.w	fp, r3, r1
 8002b6a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b6c:	685b      	ldr	r3, [r3, #4]
 8002b6e:	4618      	mov	r0, r3
 8002b70:	f04f 0100 	mov.w	r1, #0
 8002b74:	f04f 0200 	mov.w	r2, #0
 8002b78:	f04f 0300 	mov.w	r3, #0
 8002b7c:	008b      	lsls	r3, r1, #2
 8002b7e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002b82:	0082      	lsls	r2, r0, #2
 8002b84:	4650      	mov	r0, sl
 8002b86:	4659      	mov	r1, fp
 8002b88:	f7fd ffa8 	bl	8000adc <__aeabi_uldivmod>
 8002b8c:	4602      	mov	r2, r0
 8002b8e:	460b      	mov	r3, r1
 8002b90:	4b0e      	ldr	r3, [pc, #56]	; (8002bcc <UART_SetConfig+0x38c>)
 8002b92:	fba3 1302 	umull	r1, r3, r3, r2
 8002b96:	095b      	lsrs	r3, r3, #5
 8002b98:	2164      	movs	r1, #100	; 0x64
 8002b9a:	fb01 f303 	mul.w	r3, r1, r3
 8002b9e:	1ad3      	subs	r3, r2, r3
 8002ba0:	011b      	lsls	r3, r3, #4
 8002ba2:	3332      	adds	r3, #50	; 0x32
 8002ba4:	4a09      	ldr	r2, [pc, #36]	; (8002bcc <UART_SetConfig+0x38c>)
 8002ba6:	fba2 2303 	umull	r2, r3, r2, r3
 8002baa:	095b      	lsrs	r3, r3, #5
 8002bac:	f003 020f 	and.w	r2, r3, #15
 8002bb0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	4432      	add	r2, r6
 8002bb6:	609a      	str	r2, [r3, #8]
}
 8002bb8:	bf00      	nop
 8002bba:	377c      	adds	r7, #124	; 0x7c
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002bc2:	bf00      	nop
 8002bc4:	40011000 	.word	0x40011000
 8002bc8:	40011400 	.word	0x40011400
 8002bcc:	51eb851f 	.word	0x51eb851f

08002bd0 <tomadato>:
static delay_t delayTD;



int tomadato(int ciclo1)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b08a      	sub	sp, #40	; 0x28
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
	float errorp1=0;
 8002bd8:	f04f 0300 	mov.w	r3, #0
 8002bdc:	60fb      	str	r3, [r7, #12]
	int l,i=0,temp,t0,PWM_c,bandera,salida;
 8002bde:	2300      	movs	r3, #0
 8002be0:	623b      	str	r3, [r7, #32]

	bandera=0;
 8002be2:	2300      	movs	r3, #0
 8002be4:	617b      	str	r3, [r7, #20]

	if(delayRead(&delayTD)){
 8002be6:	483f      	ldr	r0, [pc, #252]	; (8002ce4 <tomadato+0x114>)
 8002be8:	f000 fa26 	bl	8003038 <delayRead>
 8002bec:	4603      	mov	r3, r0
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d06b      	beq.n	8002cca <tomadato+0xfa>
		BSP_LED_Off(LED1);
 8002bf2:	2000      	movs	r0, #0
 8002bf4:	f7fe fb0c 	bl	8001210 <BSP_LED_Off>
		bandera=1;
 8002bf8:	2301      	movs	r3, #1
 8002bfa:	617b      	str	r3, [r7, #20]
for(l=0;l<8;l++)
 8002bfc:	2300      	movs	r3, #0
 8002bfe:	627b      	str	r3, [r7, #36]	; 0x24
 8002c00:	e060      	b.n	8002cc4 <tomadato+0xf4>
{
	HAL_UART_Receive(&UartHandle, texto, 1, 1000);
 8002c02:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002c06:	2201      	movs	r2, #1
 8002c08:	4937      	ldr	r1, [pc, #220]	; (8002ce8 <tomadato+0x118>)
 8002c0a:	4838      	ldr	r0, [pc, #224]	; (8002cec <tomadato+0x11c>)
 8002c0c:	f7ff fd07 	bl	800261e <HAL_UART_Receive>
	//	HAL_UART_Receive_IT(&UartHandle, texto, 1000);//, 10000);
	     t0=texto[0]-'0';
 8002c10:	4b35      	ldr	r3, [pc, #212]	; (8002ce8 <tomadato+0x118>)
 8002c12:	781b      	ldrb	r3, [r3, #0]
 8002c14:	3b30      	subs	r3, #48	; 0x30
 8002c16:	60bb      	str	r3, [r7, #8]
		   if(i==0)
 8002c18:	6a3b      	ldr	r3, [r7, #32]
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d105      	bne.n	8002c2a <tomadato+0x5a>
	      {
		  if(t0==0)
 8002c1e:	68bb      	ldr	r3, [r7, #8]
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d14c      	bne.n	8002cbe <tomadato+0xee>
		  {
		    i=1;
 8002c24:	2301      	movs	r3, #1
 8002c26:	623b      	str	r3, [r7, #32]
 8002c28:	e049      	b.n	8002cbe <tomadato+0xee>
		  }
	      }else{
			  if(i==1){
 8002c2a:	6a3b      	ldr	r3, [r7, #32]
 8002c2c:	2b01      	cmp	r3, #1
 8002c2e:	d105      	bne.n	8002c3c <tomadato+0x6c>
		  		  temp=t0*1000;
 8002c30:	68bb      	ldr	r3, [r7, #8]
 8002c32:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002c36:	fb02 f303 	mul.w	r3, r2, r3
 8002c3a:	61fb      	str	r3, [r7, #28]
		              }
			  if(i==2){
 8002c3c:	6a3b      	ldr	r3, [r7, #32]
 8002c3e:	2b02      	cmp	r3, #2
 8002c40:	d106      	bne.n	8002c50 <tomadato+0x80>
			  	  temp=temp+t0*100;
 8002c42:	68bb      	ldr	r3, [r7, #8]
 8002c44:	2264      	movs	r2, #100	; 0x64
 8002c46:	fb02 f303 	mul.w	r3, r2, r3
 8002c4a:	69fa      	ldr	r2, [r7, #28]
 8002c4c:	4413      	add	r3, r2
 8002c4e:	61fb      	str	r3, [r7, #28]
			  	  	  }
			  if(i==3){
 8002c50:	6a3b      	ldr	r3, [r7, #32]
 8002c52:	2b03      	cmp	r3, #3
 8002c54:	d108      	bne.n	8002c68 <tomadato+0x98>
			  	  temp=temp+t0*10;
 8002c56:	68ba      	ldr	r2, [r7, #8]
 8002c58:	4613      	mov	r3, r2
 8002c5a:	009b      	lsls	r3, r3, #2
 8002c5c:	4413      	add	r3, r2
 8002c5e:	005b      	lsls	r3, r3, #1
 8002c60:	461a      	mov	r2, r3
 8002c62:	69fb      	ldr	r3, [r7, #28]
 8002c64:	4413      	add	r3, r2
 8002c66:	61fb      	str	r3, [r7, #28]
			  	  	  }
			  if(i==4){
 8002c68:	6a3b      	ldr	r3, [r7, #32]
 8002c6a:	2b04      	cmp	r3, #4
 8002c6c:	d103      	bne.n	8002c76 <tomadato+0xa6>
	  	  		  temp=temp+t0;
 8002c6e:	69fa      	ldr	r2, [r7, #28]
 8002c70:	68bb      	ldr	r3, [r7, #8]
 8002c72:	4413      	add	r3, r2
 8002c74:	61fb      	str	r3, [r7, #28]
			  	  	  }
		        i++;
 8002c76:	6a3b      	ldr	r3, [r7, #32]
 8002c78:	3301      	adds	r3, #1
 8002c7a:	623b      	str	r3, [r7, #32]
	     	  if(i==5){
 8002c7c:	6a3b      	ldr	r3, [r7, #32]
 8002c7e:	2b05      	cmp	r3, #5
 8002c80:	d11d      	bne.n	8002cbe <tomadato+0xee>
		        	 i=0;
 8002c82:	2300      	movs	r3, #0
 8002c84:	623b      	str	r3, [r7, #32]
		        if(temp>1000){
 8002c86:	69fb      	ldr	r3, [r7, #28]
 8002c88:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002c8c:	dd15      	ble.n	8002cba <tomadato+0xea>
		        	 PWM_c=pid_calc(temp);
 8002c8e:	69f8      	ldr	r0, [r7, #28]
 8002c90:	f000 fa02 	bl	8003098 <pid_calc>
 8002c94:	61b8      	str	r0, [r7, #24]
	        	 sprintf(buffer,"T=%d  muestra=%d ",temp,PWM_c);
 8002c96:	69bb      	ldr	r3, [r7, #24]
 8002c98:	69fa      	ldr	r2, [r7, #28]
 8002c9a:	4915      	ldr	r1, [pc, #84]	; (8002cf0 <tomadato+0x120>)
 8002c9c:	4815      	ldr	r0, [pc, #84]	; (8002cf4 <tomadato+0x124>)
 8002c9e:	f000 fb61 	bl	8003364 <siprintf>
        	     HAL_UART_Transmit(&UartHandle,(uint8_t *) buffer, strlen(buffer), 5000);
 8002ca2:	4814      	ldr	r0, [pc, #80]	; (8002cf4 <tomadato+0x124>)
 8002ca4:	f7fd faa4 	bl	80001f0 <strlen>
 8002ca8:	4603      	mov	r3, r0
 8002caa:	b29a      	uxth	r2, r3
 8002cac:	f241 3388 	movw	r3, #5000	; 0x1388
 8002cb0:	4910      	ldr	r1, [pc, #64]	; (8002cf4 <tomadato+0x124>)
 8002cb2:	480e      	ldr	r0, [pc, #56]	; (8002cec <tomadato+0x11c>)
 8002cb4:	f7ff fc21 	bl	80024fa <HAL_UART_Transmit>
 8002cb8:	e001      	b.n	8002cbe <tomadato+0xee>
		        }else{
		        	PWM_c=ciclo1;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	61bb      	str	r3, [r7, #24]
for(l=0;l<8;l++)
 8002cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cc0:	3301      	adds	r3, #1
 8002cc2:	627b      	str	r3, [r7, #36]	; 0x24
 8002cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cc6:	2b07      	cmp	r3, #7
 8002cc8:	dd9b      	ble.n	8002c02 <tomadato+0x32>
}

	}


	if(bandera>0)
 8002cca:	697b      	ldr	r3, [r7, #20]
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	dd02      	ble.n	8002cd6 <tomadato+0x106>
	{
		salida=PWM_c;
 8002cd0:	69bb      	ldr	r3, [r7, #24]
 8002cd2:	613b      	str	r3, [r7, #16]
 8002cd4:	e001      	b.n	8002cda <tomadato+0x10a>
	}else{
		salida=ciclo1;
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	613b      	str	r3, [r7, #16]
	}

	return salida;
 8002cda:	693b      	ldr	r3, [r7, #16]
	}
 8002cdc:	4618      	mov	r0, r3
 8002cde:	3728      	adds	r7, #40	; 0x28
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	bd80      	pop	{r7, pc}
 8002ce4:	20000120 	.word	0x20000120
 8002ce8:	2000013c 	.word	0x2000013c
 8002cec:	20000188 	.word	0x20000188
 8002cf0:	0800465c 	.word	0x0800465c
 8002cf4:	200001ec 	.word	0x200001ec

08002cf8 <PWMInit>:

void PWMInit(void){
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	af00      	add	r7, sp, #0
	estPWM = inicioPWM;
 8002cfc:	4b12      	ldr	r3, [pc, #72]	; (8002d48 <PWMInit+0x50>)
 8002cfe:	2200      	movs	r2, #0
 8002d00:	701a      	strb	r2, [r3, #0]
	cuenta_PWM=0;
 8002d02:	4b12      	ldr	r3, [pc, #72]	; (8002d4c <PWMInit+0x54>)
 8002d04:	2200      	movs	r2, #0
 8002d06:	601a      	str	r2, [r3, #0]
	BSP_LED_Init(LED1);
 8002d08:	2000      	movs	r0, #0
 8002d0a:	f7fe fa17 	bl	800113c <BSP_LED_Init>
delayInit(&delayPWM, Tiempo_Menor);
 8002d0e:	2101      	movs	r1, #1
 8002d10:	480f      	ldr	r0, [pc, #60]	; (8002d50 <PWMInit+0x58>)
 8002d12:	f000 f977 	bl	8003004 <delayInit>
delayInit(&delayPWM_cambio, Tiempo_cambio);
 8002d16:	210a      	movs	r1, #10
 8002d18:	480e      	ldr	r0, [pc, #56]	; (8002d54 <PWMInit+0x5c>)
 8002d1a:	f000 f973 	bl	8003004 <delayInit>
delayInit(&delayTD, Tiempo_Dato);
 8002d1e:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8002d22:	480d      	ldr	r0, [pc, #52]	; (8002d58 <PWMInit+0x60>)
 8002d24:	f000 f96e 	bl	8003004 <delayInit>

BSP_LED_On(LED1);
 8002d28:	2000      	movs	r0, #0
 8002d2a:	f7fe fa57 	bl	80011dc <BSP_LED_On>
HAL_Delay(1000);
 8002d2e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002d32:	f7fe fbfb 	bl	800152c <HAL_Delay>
BSP_LED_Off(LED1);
 8002d36:	2000      	movs	r0, #0
 8002d38:	f7fe fa6a 	bl	8001210 <BSP_LED_Off>
HAL_Delay(1000);
 8002d3c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002d40:	f7fe fbf4 	bl	800152c <HAL_Delay>
}
 8002d44:	bf00      	nop
 8002d46:	bd80      	pop	{r7, pc}
 8002d48:	20000104 	.word	0x20000104
 8002d4c:	200001e4 	.word	0x200001e4
 8002d50:	20000108 	.word	0x20000108
 8002d54:	20000114 	.word	0x20000114
 8002d58:	20000120 	.word	0x20000120

08002d5c <DUTY>:
		vcambio=DP;
	}
return vcambio;
}

void DUTY(int duty_PWM){
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	b082      	sub	sp, #8
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]
//int duty_PWM=125;


  switch(estPWM){
 8002d64:	4ba2      	ldr	r3, [pc, #648]	; (8002ff0 <DUTY+0x294>)
 8002d66:	781b      	ldrb	r3, [r3, #0]
 8002d68:	2b05      	cmp	r3, #5
 8002d6a:	f200 8135 	bhi.w	8002fd8 <DUTY+0x27c>
 8002d6e:	a201      	add	r2, pc, #4	; (adr r2, 8002d74 <DUTY+0x18>)
 8002d70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d74:	08002d8d 	.word	0x08002d8d
 8002d78:	08002df1 	.word	0x08002df1
 8002d7c:	08002e51 	.word	0x08002e51
 8002d80:	08002eb1 	.word	0x08002eb1
 8002d84:	08002f09 	.word	0x08002f09
 8002d88:	08002f69 	.word	0x08002f69
  //HAL_UART_Receive(&UartHandle, texto, 1, 10000);
		case inicioPWM:
			//HAL_UART_Receive(&UartHandle, texto, 1, 10000);
			if(delayRead(&delayPWM)){
 8002d8c:	4899      	ldr	r0, [pc, #612]	; (8002ff4 <DUTY+0x298>)
 8002d8e:	f000 f953 	bl	8003038 <delayRead>
 8002d92:	4603      	mov	r3, r0
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	f000 8114 	beq.w	8002fc2 <DUTY+0x266>
				duty_PWM_interno=duty_PWM;
 8002d9a:	4a97      	ldr	r2, [pc, #604]	; (8002ff8 <DUTY+0x29c>)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	6013      	str	r3, [r2, #0]
				cuenta_PWM=0;
 8002da0:	4b96      	ldr	r3, [pc, #600]	; (8002ffc <DUTY+0x2a0>)
 8002da2:	2200      	movs	r2, #0
 8002da4:	601a      	str	r2, [r3, #0]

				if(duty_PWM_interno == 0){
 8002da6:	4b94      	ldr	r3, [pc, #592]	; (8002ff8 <DUTY+0x29c>)
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d103      	bne.n	8002db6 <DUTY+0x5a>
						xPWM = 0;
 8002dae:	4b94      	ldr	r3, [pc, #592]	; (8003000 <DUTY+0x2a4>)
 8002db0:	2200      	movs	r2, #0
 8002db2:	701a      	strb	r2, [r3, #0]
 8002db4:	e007      	b.n	8002dc6 <DUTY+0x6a>
						}
						else{
						cuenta_PWM=cuenta_PWM+1;
 8002db6:	4b91      	ldr	r3, [pc, #580]	; (8002ffc <DUTY+0x2a0>)
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	3301      	adds	r3, #1
 8002dbc:	4a8f      	ldr	r2, [pc, #572]	; (8002ffc <DUTY+0x2a0>)
 8002dbe:	6013      	str	r3, [r2, #0]
						xPWM=1;}
 8002dc0:	4b8f      	ldr	r3, [pc, #572]	; (8003000 <DUTY+0x2a4>)
 8002dc2:	2201      	movs	r2, #1
 8002dc4:	701a      	strb	r2, [r3, #0]

			if(xPWM==0){
 8002dc6:	4b8e      	ldr	r3, [pc, #568]	; (8003000 <DUTY+0x2a4>)
 8002dc8:	781b      	ldrb	r3, [r3, #0]
 8002dca:	f083 0301 	eor.w	r3, r3, #1
 8002dce:	b2db      	uxtb	r3, r3
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d006      	beq.n	8002de2 <DUTY+0x86>
					estPWM=inicioPWM;
 8002dd4:	4b86      	ldr	r3, [pc, #536]	; (8002ff0 <DUTY+0x294>)
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	701a      	strb	r2, [r3, #0]
					BSP_LED_Off(LED1);
 8002dda:	2000      	movs	r0, #0
 8002ddc:	f7fe fa18 	bl	8001210 <BSP_LED_Off>
				else {
					estPWM=pasa_uno;
					 BSP_LED_On(LED1);
					 }
					}
		    break;
 8002de0:	e0ef      	b.n	8002fc2 <DUTY+0x266>
					estPWM=pasa_uno;
 8002de2:	4b83      	ldr	r3, [pc, #524]	; (8002ff0 <DUTY+0x294>)
 8002de4:	2201      	movs	r2, #1
 8002de6:	701a      	strb	r2, [r3, #0]
					 BSP_LED_On(LED1);
 8002de8:	2000      	movs	r0, #0
 8002dea:	f7fe f9f7 	bl	80011dc <BSP_LED_On>
		    break;
 8002dee:	e0e8      	b.n	8002fc2 <DUTY+0x266>

		case pasa_uno:

			if(delayRead(&delayPWM)){
 8002df0:	4880      	ldr	r0, [pc, #512]	; (8002ff4 <DUTY+0x298>)
 8002df2:	f000 f921 	bl	8003038 <delayRead>
 8002df6:	4603      	mov	r3, r0
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	f000 80e4 	beq.w	8002fc6 <DUTY+0x26a>

			if(cuenta_PWM < duty_PWM_interno)
 8002dfe:	4b7f      	ldr	r3, [pc, #508]	; (8002ffc <DUTY+0x2a0>)
 8002e00:	681a      	ldr	r2, [r3, #0]
 8002e02:	4b7d      	ldr	r3, [pc, #500]	; (8002ff8 <DUTY+0x29c>)
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	429a      	cmp	r2, r3
 8002e08:	da08      	bge.n	8002e1c <DUTY+0xc0>
			{
				cuenta_PWM=cuenta_PWM+1;
 8002e0a:	4b7c      	ldr	r3, [pc, #496]	; (8002ffc <DUTY+0x2a0>)
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	3301      	adds	r3, #1
 8002e10:	4a7a      	ldr	r2, [pc, #488]	; (8002ffc <DUTY+0x2a0>)
 8002e12:	6013      	str	r3, [r2, #0]
				xPWM =1;
 8002e14:	4b7a      	ldr	r3, [pc, #488]	; (8003000 <DUTY+0x2a4>)
 8002e16:	2201      	movs	r2, #1
 8002e18:	701a      	strb	r2, [r3, #0]
 8002e1a:	e007      	b.n	8002e2c <DUTY+0xd0>
			}
				else{
				cuenta_PWM=cuenta_PWM+1;
 8002e1c:	4b77      	ldr	r3, [pc, #476]	; (8002ffc <DUTY+0x2a0>)
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	3301      	adds	r3, #1
 8002e22:	4a76      	ldr	r2, [pc, #472]	; (8002ffc <DUTY+0x2a0>)
 8002e24:	6013      	str	r3, [r2, #0]
				xPWM=0;
 8002e26:	4b76      	ldr	r3, [pc, #472]	; (8003000 <DUTY+0x2a4>)
 8002e28:	2200      	movs	r2, #0
 8002e2a:	701a      	strb	r2, [r3, #0]
				}


			if(xPWM==1){
 8002e2c:	4b74      	ldr	r3, [pc, #464]	; (8003000 <DUTY+0x2a4>)
 8002e2e:	781b      	ldrb	r3, [r3, #0]
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d006      	beq.n	8002e42 <DUTY+0xe6>
					estPWM=sigue_uno;
 8002e34:	4b6e      	ldr	r3, [pc, #440]	; (8002ff0 <DUTY+0x294>)
 8002e36:	2202      	movs	r2, #2
 8002e38:	701a      	strb	r2, [r3, #0]
					BSP_LED_On(LED1);
 8002e3a:	2000      	movs	r0, #0
 8002e3c:	f7fe f9ce 	bl	80011dc <BSP_LED_On>
					estPWM=pasa_cero;
					BSP_LED_Off(LED1);

					 }
					}
		    break;
 8002e40:	e0c1      	b.n	8002fc6 <DUTY+0x26a>
					estPWM=pasa_cero;
 8002e42:	4b6b      	ldr	r3, [pc, #428]	; (8002ff0 <DUTY+0x294>)
 8002e44:	2203      	movs	r2, #3
 8002e46:	701a      	strb	r2, [r3, #0]
					BSP_LED_Off(LED1);
 8002e48:	2000      	movs	r0, #0
 8002e4a:	f7fe f9e1 	bl	8001210 <BSP_LED_Off>
		    break;
 8002e4e:	e0ba      	b.n	8002fc6 <DUTY+0x26a>

		case sigue_uno:

			if(delayRead(&delayPWM)){
 8002e50:	4868      	ldr	r0, [pc, #416]	; (8002ff4 <DUTY+0x298>)
 8002e52:	f000 f8f1 	bl	8003038 <delayRead>
 8002e56:	4603      	mov	r3, r0
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	f000 80b6 	beq.w	8002fca <DUTY+0x26e>

			if(cuenta_PWM < duty_PWM_interno){
 8002e5e:	4b67      	ldr	r3, [pc, #412]	; (8002ffc <DUTY+0x2a0>)
 8002e60:	681a      	ldr	r2, [r3, #0]
 8002e62:	4b65      	ldr	r3, [pc, #404]	; (8002ff8 <DUTY+0x29c>)
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	429a      	cmp	r2, r3
 8002e68:	da08      	bge.n	8002e7c <DUTY+0x120>
				cuenta_PWM=cuenta_PWM+1;
 8002e6a:	4b64      	ldr	r3, [pc, #400]	; (8002ffc <DUTY+0x2a0>)
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	3301      	adds	r3, #1
 8002e70:	4a62      	ldr	r2, [pc, #392]	; (8002ffc <DUTY+0x2a0>)
 8002e72:	6013      	str	r3, [r2, #0]
				xPWM=1;
 8002e74:	4b62      	ldr	r3, [pc, #392]	; (8003000 <DUTY+0x2a4>)
 8002e76:	2201      	movs	r2, #1
 8002e78:	701a      	strb	r2, [r3, #0]
 8002e7a:	e007      	b.n	8002e8c <DUTY+0x130>
			    }
				else{
				cuenta_PWM=cuenta_PWM+1;
 8002e7c:	4b5f      	ldr	r3, [pc, #380]	; (8002ffc <DUTY+0x2a0>)
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	3301      	adds	r3, #1
 8002e82:	4a5e      	ldr	r2, [pc, #376]	; (8002ffc <DUTY+0x2a0>)
 8002e84:	6013      	str	r3, [r2, #0]
				xPWM=0;
 8002e86:	4b5e      	ldr	r3, [pc, #376]	; (8003000 <DUTY+0x2a4>)
 8002e88:	2200      	movs	r2, #0
 8002e8a:	701a      	strb	r2, [r3, #0]
				}

			if(xPWM==1){
 8002e8c:	4b5c      	ldr	r3, [pc, #368]	; (8003000 <DUTY+0x2a4>)
 8002e8e:	781b      	ldrb	r3, [r3, #0]
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d006      	beq.n	8002ea2 <DUTY+0x146>
					estPWM=sigue_uno;
 8002e94:	4b56      	ldr	r3, [pc, #344]	; (8002ff0 <DUTY+0x294>)
 8002e96:	2202      	movs	r2, #2
 8002e98:	701a      	strb	r2, [r3, #0]
					BSP_LED_On(LED1);
 8002e9a:	2000      	movs	r0, #0
 8002e9c:	f7fe f99e 	bl	80011dc <BSP_LED_On>
				else {
					estPWM=pasa_cero;
					BSP_LED_Off(LED1);
					}
					}
		    break;
 8002ea0:	e093      	b.n	8002fca <DUTY+0x26e>
					estPWM=pasa_cero;
 8002ea2:	4b53      	ldr	r3, [pc, #332]	; (8002ff0 <DUTY+0x294>)
 8002ea4:	2203      	movs	r2, #3
 8002ea6:	701a      	strb	r2, [r3, #0]
					BSP_LED_Off(LED1);
 8002ea8:	2000      	movs	r0, #0
 8002eaa:	f7fe f9b1 	bl	8001210 <BSP_LED_Off>
		    break;
 8002eae:	e08c      	b.n	8002fca <DUTY+0x26e>

		case pasa_cero:
			if(delayRead(&delayPWM)){
 8002eb0:	4850      	ldr	r0, [pc, #320]	; (8002ff4 <DUTY+0x298>)
 8002eb2:	f000 f8c1 	bl	8003038 <delayRead>
 8002eb6:	4603      	mov	r3, r0
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	f000 8088 	beq.w	8002fce <DUTY+0x272>

				if(cuenta_PWM < 255){
 8002ebe:	4b4f      	ldr	r3, [pc, #316]	; (8002ffc <DUTY+0x2a0>)
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	2bfe      	cmp	r3, #254	; 0xfe
 8002ec4:	dc08      	bgt.n	8002ed8 <DUTY+0x17c>
						cuenta_PWM=cuenta_PWM+1;
 8002ec6:	4b4d      	ldr	r3, [pc, #308]	; (8002ffc <DUTY+0x2a0>)
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	3301      	adds	r3, #1
 8002ecc:	4a4b      	ldr	r2, [pc, #300]	; (8002ffc <DUTY+0x2a0>)
 8002ece:	6013      	str	r3, [r2, #0]
						xPWM=0;
 8002ed0:	4b4b      	ldr	r3, [pc, #300]	; (8003000 <DUTY+0x2a4>)
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	701a      	strb	r2, [r3, #0]
 8002ed6:	e002      	b.n	8002ede <DUTY+0x182>
				}
						else{
						xPWM=1;
 8002ed8:	4b49      	ldr	r3, [pc, #292]	; (8003000 <DUTY+0x2a4>)
 8002eda:	2201      	movs	r2, #1
 8002edc:	701a      	strb	r2, [r3, #0]
								}

			if(xPWM==0){
 8002ede:	4b48      	ldr	r3, [pc, #288]	; (8003000 <DUTY+0x2a4>)
 8002ee0:	781b      	ldrb	r3, [r3, #0]
 8002ee2:	f083 0301 	eor.w	r3, r3, #1
 8002ee6:	b2db      	uxtb	r3, r3
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d006      	beq.n	8002efa <DUTY+0x19e>
					estPWM=sigue_cero;
 8002eec:	4b40      	ldr	r3, [pc, #256]	; (8002ff0 <DUTY+0x294>)
 8002eee:	2204      	movs	r2, #4
 8002ef0:	701a      	strb	r2, [r3, #0]
					BSP_LED_Off(LED1);
 8002ef2:	2000      	movs	r0, #0
 8002ef4:	f7fe f98c 	bl	8001210 <BSP_LED_Off>
				else {
					estPWM=terminaPWM;
					BSP_LED_Off(LED1);
					 }
					}
		    break;
 8002ef8:	e069      	b.n	8002fce <DUTY+0x272>
					estPWM=terminaPWM;
 8002efa:	4b3d      	ldr	r3, [pc, #244]	; (8002ff0 <DUTY+0x294>)
 8002efc:	2205      	movs	r2, #5
 8002efe:	701a      	strb	r2, [r3, #0]
					BSP_LED_Off(LED1);
 8002f00:	2000      	movs	r0, #0
 8002f02:	f7fe f985 	bl	8001210 <BSP_LED_Off>
		    break;
 8002f06:	e062      	b.n	8002fce <DUTY+0x272>


		case sigue_cero:
			if(delayRead(&delayPWM)){
 8002f08:	483a      	ldr	r0, [pc, #232]	; (8002ff4 <DUTY+0x298>)
 8002f0a:	f000 f895 	bl	8003038 <delayRead>
 8002f0e:	4603      	mov	r3, r0
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d05e      	beq.n	8002fd2 <DUTY+0x276>
				if(cuenta_PWM < 255){
 8002f14:	4b39      	ldr	r3, [pc, #228]	; (8002ffc <DUTY+0x2a0>)
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	2bfe      	cmp	r3, #254	; 0xfe
 8002f1a:	dc08      	bgt.n	8002f2e <DUTY+0x1d2>
						cuenta_PWM=cuenta_PWM+1;
 8002f1c:	4b37      	ldr	r3, [pc, #220]	; (8002ffc <DUTY+0x2a0>)
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	3301      	adds	r3, #1
 8002f22:	4a36      	ldr	r2, [pc, #216]	; (8002ffc <DUTY+0x2a0>)
 8002f24:	6013      	str	r3, [r2, #0]
						xPWM=0;
 8002f26:	4b36      	ldr	r3, [pc, #216]	; (8003000 <DUTY+0x2a4>)
 8002f28:	2200      	movs	r2, #0
 8002f2a:	701a      	strb	r2, [r3, #0]
 8002f2c:	e007      	b.n	8002f3e <DUTY+0x1e2>
				}
						else{
							cuenta_PWM=cuenta_PWM+1;
 8002f2e:	4b33      	ldr	r3, [pc, #204]	; (8002ffc <DUTY+0x2a0>)
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	3301      	adds	r3, #1
 8002f34:	4a31      	ldr	r2, [pc, #196]	; (8002ffc <DUTY+0x2a0>)
 8002f36:	6013      	str	r3, [r2, #0]
						xPWM=1;
 8002f38:	4b31      	ldr	r3, [pc, #196]	; (8003000 <DUTY+0x2a4>)
 8002f3a:	2201      	movs	r2, #1
 8002f3c:	701a      	strb	r2, [r3, #0]
							}
			if(xPWM==0){
 8002f3e:	4b30      	ldr	r3, [pc, #192]	; (8003000 <DUTY+0x2a4>)
 8002f40:	781b      	ldrb	r3, [r3, #0]
 8002f42:	f083 0301 	eor.w	r3, r3, #1
 8002f46:	b2db      	uxtb	r3, r3
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d006      	beq.n	8002f5a <DUTY+0x1fe>
					estPWM=sigue_cero;
 8002f4c:	4b28      	ldr	r3, [pc, #160]	; (8002ff0 <DUTY+0x294>)
 8002f4e:	2204      	movs	r2, #4
 8002f50:	701a      	strb	r2, [r3, #0]
					BSP_LED_Off(LED1);
 8002f52:	2000      	movs	r0, #0
 8002f54:	f7fe f95c 	bl	8001210 <BSP_LED_Off>
				else {
					estPWM=terminaPWM;
					BSP_LED_Off(LED1);
					 }
					}
		    break;
 8002f58:	e03b      	b.n	8002fd2 <DUTY+0x276>
					estPWM=terminaPWM;
 8002f5a:	4b25      	ldr	r3, [pc, #148]	; (8002ff0 <DUTY+0x294>)
 8002f5c:	2205      	movs	r2, #5
 8002f5e:	701a      	strb	r2, [r3, #0]
					BSP_LED_Off(LED1);
 8002f60:	2000      	movs	r0, #0
 8002f62:	f7fe f955 	bl	8001210 <BSP_LED_Off>
		    break;
 8002f66:	e034      	b.n	8002fd2 <DUTY+0x276>


		case terminaPWM:
			if(delayRead(&delayPWM)){
 8002f68:	4822      	ldr	r0, [pc, #136]	; (8002ff4 <DUTY+0x298>)
 8002f6a:	f000 f865 	bl	8003038 <delayRead>
 8002f6e:	4603      	mov	r3, r0
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d030      	beq.n	8002fd6 <DUTY+0x27a>
				if(duty_PWM == duty_PWM_interno)
 8002f74:	4b20      	ldr	r3, [pc, #128]	; (8002ff8 <DUTY+0x29c>)
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	687a      	ldr	r2, [r7, #4]
 8002f7a:	429a      	cmp	r2, r3
 8002f7c:	d106      	bne.n	8002f8c <DUTY+0x230>
				{
					cuenta_PWM=1;
 8002f7e:	4b1f      	ldr	r3, [pc, #124]	; (8002ffc <DUTY+0x2a0>)
 8002f80:	2201      	movs	r2, #1
 8002f82:	601a      	str	r2, [r3, #0]
					xPWM=1;}
 8002f84:	4b1e      	ldr	r3, [pc, #120]	; (8003000 <DUTY+0x2a4>)
 8002f86:	2201      	movs	r2, #1
 8002f88:	701a      	strb	r2, [r3, #0]
 8002f8a:	e005      	b.n	8002f98 <DUTY+0x23c>
					else{
					xPWM=0;
 8002f8c:	4b1c      	ldr	r3, [pc, #112]	; (8003000 <DUTY+0x2a4>)
 8002f8e:	2200      	movs	r2, #0
 8002f90:	701a      	strb	r2, [r3, #0]
					cuenta_PWM=0;
 8002f92:	4b1a      	ldr	r3, [pc, #104]	; (8002ffc <DUTY+0x2a0>)
 8002f94:	2200      	movs	r2, #0
 8002f96:	601a      	str	r2, [r3, #0]
						}

			if(xPWM==0){
 8002f98:	4b19      	ldr	r3, [pc, #100]	; (8003000 <DUTY+0x2a4>)
 8002f9a:	781b      	ldrb	r3, [r3, #0]
 8002f9c:	f083 0301 	eor.w	r3, r3, #1
 8002fa0:	b2db      	uxtb	r3, r3
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d006      	beq.n	8002fb4 <DUTY+0x258>
					estPWM=inicioPWM;
 8002fa6:	4b12      	ldr	r3, [pc, #72]	; (8002ff0 <DUTY+0x294>)
 8002fa8:	2200      	movs	r2, #0
 8002faa:	701a      	strb	r2, [r3, #0]
					BSP_LED_Off(LED1);
 8002fac:	2000      	movs	r0, #0
 8002fae:	f7fe f92f 	bl	8001210 <BSP_LED_Off>
				else {
					estPWM=pasa_uno;
					BSP_LED_On(LED1);
					 }
					}
		    break;
 8002fb2:	e010      	b.n	8002fd6 <DUTY+0x27a>
					estPWM=pasa_uno;
 8002fb4:	4b0e      	ldr	r3, [pc, #56]	; (8002ff0 <DUTY+0x294>)
 8002fb6:	2201      	movs	r2, #1
 8002fb8:	701a      	strb	r2, [r3, #0]
					BSP_LED_On(LED1);
 8002fba:	2000      	movs	r0, #0
 8002fbc:	f7fe f90e 	bl	80011dc <BSP_LED_On>
		    break;
 8002fc0:	e009      	b.n	8002fd6 <DUTY+0x27a>
		    break;
 8002fc2:	bf00      	nop
 8002fc4:	e008      	b.n	8002fd8 <DUTY+0x27c>
		    break;
 8002fc6:	bf00      	nop
 8002fc8:	e006      	b.n	8002fd8 <DUTY+0x27c>
		    break;
 8002fca:	bf00      	nop
 8002fcc:	e004      	b.n	8002fd8 <DUTY+0x27c>
		    break;
 8002fce:	bf00      	nop
 8002fd0:	e002      	b.n	8002fd8 <DUTY+0x27c>
		    break;
 8002fd2:	bf00      	nop
 8002fd4:	e000      	b.n	8002fd8 <DUTY+0x27c>
		    break;
 8002fd6:	bf00      	nop

		}

  if(cuenta_PWM>255)
 8002fd8:	4b08      	ldr	r3, [pc, #32]	; (8002ffc <DUTY+0x2a0>)
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	2bff      	cmp	r3, #255	; 0xff
 8002fde:	dd02      	ble.n	8002fe6 <DUTY+0x28a>
  {
	  cuenta_PWM=255;
 8002fe0:	4b06      	ldr	r3, [pc, #24]	; (8002ffc <DUTY+0x2a0>)
 8002fe2:	22ff      	movs	r2, #255	; 0xff
 8002fe4:	601a      	str	r2, [r3, #0]

  }


}
 8002fe6:	bf00      	nop
 8002fe8:	3708      	adds	r7, #8
 8002fea:	46bd      	mov	sp, r7
 8002fec:	bd80      	pop	{r7, pc}
 8002fee:	bf00      	nop
 8002ff0:	20000104 	.word	0x20000104
 8002ff4:	20000108 	.word	0x20000108
 8002ff8:	200001dc 	.word	0x200001dc
 8002ffc:	200001e4 	.word	0x200001e4
 8003000:	200001e0 	.word	0x200001e0

08003004 <delayInit>:




void delayInit( delay_t * delay, tick_t duration )
{
 8003004:	b480      	push	{r7}
 8003006:	b083      	sub	sp, #12
 8003008:	af00      	add	r7, sp, #0
 800300a:	6078      	str	r0, [r7, #4]
 800300c:	6039      	str	r1, [r7, #0]

if( delay == 0 || duration < 0 || duration > MAX_DELAY)
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	2b00      	cmp	r3, #0
 8003012:	d004      	beq.n	800301e <delayInit+0x1a>
 8003014:	683b      	ldr	r3, [r7, #0]
 8003016:	f242 7210 	movw	r2, #10000	; 0x2710
 800301a:	4293      	cmp	r3, r2
 800301c:	d900      	bls.n	8003020 <delayInit+0x1c>
while(1);
 800301e:	e7fe      	b.n	800301e <delayInit+0x1a>


delay->duration  = duration;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	683a      	ldr	r2, [r7, #0]
 8003024:	605a      	str	r2, [r3, #4]
delay->running=0;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	2200      	movs	r2, #0
 800302a:	721a      	strb	r2, [r3, #8]
}
 800302c:	bf00      	nop
 800302e:	370c      	adds	r7, #12
 8003030:	46bd      	mov	sp, r7
 8003032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003036:	4770      	bx	lr

08003038 <delayRead>:

bool_t delayRead(delay_t * delay)
{
 8003038:	b580      	push	{r7, lr}
 800303a:	b084      	sub	sp, #16
 800303c:	af00      	add	r7, sp, #0
 800303e:	6078      	str	r0, [r7, #4]
bool_t timeArrived = false;
 8003040:	2300      	movs	r3, #0
 8003042:	73fb      	strb	r3, [r7, #15]

if(delay == 0)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	2b00      	cmp	r3, #0
 8003048:	d100      	bne.n	800304c <delayRead+0x14>
	while(1);
 800304a:	e7fe      	b.n	800304a <delayRead+0x12>


if (!delay->running)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	7a1b      	ldrb	r3, [r3, #8]
 8003050:	f083 0301 	eor.w	r3, r3, #1
 8003054:	b2db      	uxtb	r3, r3
 8003056:	2b00      	cmp	r3, #0
 8003058:	d008      	beq.n	800306c <delayRead+0x34>
{
delay->startTime = HAL_GetTick();
 800305a:	f7fe fa5b 	bl	8001514 <HAL_GetTick>
 800305e:	4602      	mov	r2, r0
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	601a      	str	r2, [r3, #0]
delay->running=1;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	2201      	movs	r2, #1
 8003068:	721a      	strb	r2, [r3, #8]
 800306a:	e00e      	b.n	800308a <delayRead+0x52>
}else
{
if((tick_t)(HAL_GetTick()-delay->startTime)>=delay->duration)
 800306c:	f7fe fa52 	bl	8001514 <HAL_GetTick>
 8003070:	4602      	mov	r2, r0
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	1ad2      	subs	r2, r2, r3
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	685b      	ldr	r3, [r3, #4]
 800307c:	429a      	cmp	r2, r3
 800307e:	d304      	bcc.n	800308a <delayRead+0x52>
{
timeArrived=true;
 8003080:	2301      	movs	r3, #1
 8003082:	73fb      	strb	r3, [r7, #15]
delay->running=0;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	2200      	movs	r2, #0
 8003088:	721a      	strb	r2, [r3, #8]
}
}

return timeArrived;
 800308a:	7bfb      	ldrb	r3, [r7, #15]
}
 800308c:	4618      	mov	r0, r3
 800308e:	3710      	adds	r7, #16
 8003090:	46bd      	mov	sp, r7
 8003092:	bd80      	pop	{r7, pc}
 8003094:	0000      	movs	r0, r0
	...

08003098 <pid_calc>:





int pid_calc(int temp3){
 8003098:	b580      	push	{r7, lr}
 800309a:	b08e      	sub	sp, #56	; 0x38
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
int   lastTime,muestra;
float Ajuste=0.0012;//0.0015;
 80030a0:	4b53      	ldr	r3, [pc, #332]	; (80031f0 <pid_calc+0x158>)
 80030a2:	633b      	str	r3, [r7, #48]	; 0x30
float Kp=Ajuste*3.35;//Ajuste*Kp2;//Probamos 10,5,20 y ahora 10... acomodamos salida PID con PWM
 80030a4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80030a6:	f7fd fa5f 	bl	8000568 <__aeabi_f2d>
 80030aa:	a34f      	add	r3, pc, #316	; (adr r3, 80031e8 <pid_calc+0x150>)
 80030ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030b0:	f7fd fab2 	bl	8000618 <__aeabi_dmul>
 80030b4:	4602      	mov	r2, r0
 80030b6:	460b      	mov	r3, r1
 80030b8:	4610      	mov	r0, r2
 80030ba:	4619      	mov	r1, r3
 80030bc:	f7fd fcbe 	bl	8000a3c <__aeabi_d2f>
 80030c0:	4603      	mov	r3, r0
 80030c2:	62fb      	str	r3, [r7, #44]	; 0x2c
float Ki=Kp/8.0;//Kp/Ti;
 80030c4:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 80030c8:	eef2 6a00 	vmov.f32	s13, #32	; 0x41000000  8.0
 80030cc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80030d0:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
//float Ki=0.1*Kp/8.0;//Kp/Ti;
//float Kd=Kp*2.0;
float Kd=Kp*2.0;
 80030d4:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80030d8:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80030dc:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
float timeChange=1000,dErr,temperatura,error,pot1;//Kp*Td;
 80030e0:	4b44      	ldr	r3, [pc, #272]	; (80031f4 <pid_calc+0x15c>)
 80030e2:	623b      	str	r3, [r7, #32]
	//if(delayRead(&delayTD_M)){



    temperatura=(float) (temp3/100.0);
 80030e4:	6878      	ldr	r0, [r7, #4]
 80030e6:	f7fd fa2d 	bl	8000544 <__aeabi_i2d>
 80030ea:	f04f 0200 	mov.w	r2, #0
 80030ee:	4b42      	ldr	r3, [pc, #264]	; (80031f8 <pid_calc+0x160>)
 80030f0:	f7fd fbbc 	bl	800086c <__aeabi_ddiv>
 80030f4:	4602      	mov	r2, r0
 80030f6:	460b      	mov	r3, r1
 80030f8:	4610      	mov	r0, r2
 80030fa:	4619      	mov	r1, r3
 80030fc:	f7fd fc9e 	bl	8000a3c <__aeabi_d2f>
 8003100:	4603      	mov	r3, r0
 8003102:	61fb      	str	r3, [r7, #28]

    error = Setpoint - temperatura;//Setpoint - Input;
 8003104:	4b3d      	ldr	r3, [pc, #244]	; (80031fc <pid_calc+0x164>)
 8003106:	ed93 7a00 	vldr	s14, [r3]
 800310a:	edd7 7a07 	vldr	s15, [r7, #28]
 800310e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003112:	edc7 7a06 	vstr	s15, [r7, #24]
    errSum += (error * timeChange);
 8003116:	ed97 7a06 	vldr	s14, [r7, #24]
 800311a:	edd7 7a08 	vldr	s15, [r7, #32]
 800311e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003122:	4b37      	ldr	r3, [pc, #220]	; (8003200 <pid_calc+0x168>)
 8003124:	edd3 7a00 	vldr	s15, [r3]
 8003128:	ee77 7a27 	vadd.f32	s15, s14, s15
 800312c:	4b34      	ldr	r3, [pc, #208]	; (8003200 <pid_calc+0x168>)
 800312e:	edc3 7a00 	vstr	s15, [r3]
    dErr = (error - lastErr) / timeChange;
 8003132:	4b34      	ldr	r3, [pc, #208]	; (8003204 <pid_calc+0x16c>)
 8003134:	edd3 7a00 	vldr	s15, [r3]
 8003138:	ed97 7a06 	vldr	s14, [r7, #24]
 800313c:	ee77 6a67 	vsub.f32	s13, s14, s15
 8003140:	ed97 7a08 	vldr	s14, [r7, #32]
 8003144:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003148:	edc7 7a05 	vstr	s15, [r7, #20]

    /* Calculamos la función de salida del PID. */

    Output = Kp * error + Ki * errSum + Kd * dErr;
 800314c:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8003150:	edd7 7a06 	vldr	s15, [r7, #24]
 8003154:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003158:	4b29      	ldr	r3, [pc, #164]	; (8003200 <pid_calc+0x168>)
 800315a:	edd3 6a00 	vldr	s13, [r3]
 800315e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8003162:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003166:	ee37 7a27 	vadd.f32	s14, s14, s15
 800316a:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 800316e:	edd7 7a05 	vldr	s15, [r7, #20]
 8003172:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003176:	ee77 7a27 	vadd.f32	s15, s14, s15
 800317a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800317e:	ee17 2a90 	vmov	r2, s15
 8003182:	4b21      	ldr	r3, [pc, #132]	; (8003208 <pid_calc+0x170>)
 8003184:	601a      	str	r2, [r3, #0]

    /* Guardamos el valor de algunas variables para el próximo ciclo de cálculo. */

    lastErr = error;
 8003186:	4a1f      	ldr	r2, [pc, #124]	; (8003204 <pid_calc+0x16c>)
 8003188:	69bb      	ldr	r3, [r7, #24]
 800318a:	6013      	str	r3, [r2, #0]
    lastTime = 1000;
 800318c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003190:	613b      	str	r3, [r7, #16]


    pot1=Output;
 8003192:	4b1d      	ldr	r3, [pc, #116]	; (8003208 <pid_calc+0x170>)
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	ee07 3a90 	vmov	s15, r3
 800319a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800319e:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
    if(pot1>255)
 80031a2:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80031a6:	ed9f 7a19 	vldr	s14, [pc, #100]	; 800320c <pid_calc+0x174>
 80031aa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80031ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031b2:	dd01      	ble.n	80031b8 <pid_calc+0x120>
    {
    	pot1=255.0;
 80031b4:	4b16      	ldr	r3, [pc, #88]	; (8003210 <pid_calc+0x178>)
 80031b6:	637b      	str	r3, [r7, #52]	; 0x34
    }
    if(pot1<0)
 80031b8:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80031bc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80031c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031c4:	d502      	bpl.n	80031cc <pid_calc+0x134>
    {
    	pot1=0.0;
 80031c6:	f04f 0300 	mov.w	r3, #0
 80031ca:	637b      	str	r3, [r7, #52]	; 0x34
    }
   // analogWrite(9 , pot1);
   // Serial.println(temp);
muestra=(int) (pot1);
 80031cc:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80031d0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80031d4:	ee17 3a90 	vmov	r3, s15
 80031d8:	60fb      	str	r3, [r7, #12]

   // sprintf(buffer,"T=%d  muestra=%d ",temp3,muestra);
   // HAL_UART_Transmit(&UartHandle,(uint8_t *) buffer, strlen(buffer), 5000);


    return muestra;
 80031da:	68fb      	ldr	r3, [r7, #12]
}
 80031dc:	4618      	mov	r0, r3
 80031de:	3738      	adds	r7, #56	; 0x38
 80031e0:	46bd      	mov	sp, r7
 80031e2:	bd80      	pop	{r7, pc}
 80031e4:	f3af 8000 	nop.w
 80031e8:	cccccccd 	.word	0xcccccccd
 80031ec:	400acccc 	.word	0x400acccc
 80031f0:	3a9d4952 	.word	0x3a9d4952
 80031f4:	447a0000 	.word	0x447a0000
 80031f8:	40590000 	.word	0x40590000
 80031fc:	2000007c 	.word	0x2000007c
 8003200:	2000012c 	.word	0x2000012c
 8003204:	20000130 	.word	0x20000130
 8003208:	200001e8 	.word	0x200001e8
 800320c:	437f0000 	.word	0x437f0000
 8003210:	437f0000 	.word	0x437f0000

08003214 <main>:
  * @brief  Main program
  * @param  None
  * @retval None
  */
int main(void)
{
 8003214:	b580      	push	{r7, lr}
 8003216:	b082      	sub	sp, #8
 8003218:	af00      	add	r7, sp, #0
	int ciclo=0,salida=0;
 800321a:	2300      	movs	r3, #0
 800321c:	607b      	str	r3, [r7, #4]
 800321e:	2300      	movs	r3, #0
 8003220:	603b      	str	r3, [r7, #0]
 // HAL_Init();

  /* Configure the system clock to 180 MHz */
//  SystemClock_Config();

	uartInit();
 8003222:	f7fd fdd7 	bl	8000dd4 <uartInit>
  UartHandle.Init.Parity     = UART_PARITY_ODD;
  UartHandle.Init.HwFlowCtl  = UART_HWCONTROL_NONE;
  UartHandle.Init.Mode       = UART_MODE_TX_RX;
  UartHandle.Init.OverSampling = UART_OVERSAMPLING_16;*/

	PWMInit();
 8003226:	f7ff fd67 	bl	8002cf8 <PWMInit>

	//HAL_UART_Receive_IT(&UartHandle, texto, 1000);
  /* Output a message on Hyperterminal using printf function */
  printf("\n\r Control PID - UART - sensor DS18B20 Arduino UNO \n\r");
 800322a:	4808      	ldr	r0, [pc, #32]	; (800324c <main+0x38>)
 800322c:	f000 f882 	bl	8003334 <iprintf>
  printf("** INICIO ** \n\r");
 8003230:	4807      	ldr	r0, [pc, #28]	; (8003250 <main+0x3c>)
 8003232:	f000 f87f 	bl	8003334 <iprintf>
  pstring=0x61;
 8003236:	4b07      	ldr	r3, [pc, #28]	; (8003254 <main+0x40>)
 8003238:	2261      	movs	r2, #97	; 0x61
 800323a:	701a      	strb	r2, [r3, #0]
	 // HAL_UART_Transmit(&UartHandle, texto, 1, 10000);


	  //lectura();

	  ciclo=tomadato(ciclo);
 800323c:	6878      	ldr	r0, [r7, #4]
 800323e:	f7ff fcc7 	bl	8002bd0 <tomadato>
 8003242:	6078      	str	r0, [r7, #4]

	 // ciclo=cambioDUTY(salida);
	  //salida=ciclo;
	  //if(salida>=255){
	  //       salida=0;}
	  DUTY(ciclo);
 8003244:	6878      	ldr	r0, [r7, #4]
 8003246:	f7ff fd89 	bl	8002d5c <DUTY>
	  ciclo=tomadato(ciclo);
 800324a:	e7f7      	b.n	800323c <main+0x28>
 800324c:	08004670 	.word	0x08004670
 8003250:	080046a8 	.word	0x080046a8
 8003254:	200001d0 	.word	0x200001d0

08003258 <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 8003258:	b580      	push	{r7, lr}
 800325a:	b082      	sub	sp, #8
 800325c:	af00      	add	r7, sp, #0
 800325e:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART3 and Loop until the end of transmission */
  HAL_UART_Transmit(&UartHandle, (uint8_t *)&ch, 1, 0xFFFF);
 8003260:	1d39      	adds	r1, r7, #4
 8003262:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003266:	2201      	movs	r2, #1
 8003268:	4803      	ldr	r0, [pc, #12]	; (8003278 <__io_putchar+0x20>)
 800326a:	f7ff f946 	bl	80024fa <HAL_UART_Transmit>

  return ch;
 800326e:	687b      	ldr	r3, [r7, #4]
}
 8003270:	4618      	mov	r0, r3
 8003272:	3708      	adds	r7, #8
 8003274:	46bd      	mov	sp, r7
 8003276:	bd80      	pop	{r7, pc}
 8003278:	20000188 	.word	0x20000188

0800327c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 800327c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80032b4 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003280:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8003282:	e003      	b.n	800328c <LoopCopyDataInit>

08003284 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003284:	4b0c      	ldr	r3, [pc, #48]	; (80032b8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8003286:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003288:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800328a:	3104      	adds	r1, #4

0800328c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800328c:	480b      	ldr	r0, [pc, #44]	; (80032bc <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800328e:	4b0c      	ldr	r3, [pc, #48]	; (80032c0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8003290:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8003292:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003294:	d3f6      	bcc.n	8003284 <CopyDataInit>
  ldr  r2, =_sbss
 8003296:	4a0b      	ldr	r2, [pc, #44]	; (80032c4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8003298:	e002      	b.n	80032a0 <LoopFillZerobss>

0800329a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800329a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800329c:	f842 3b04 	str.w	r3, [r2], #4

080032a0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80032a0:	4b09      	ldr	r3, [pc, #36]	; (80032c8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80032a2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80032a4:	d3f9      	bcc.n	800329a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80032a6:	f7fd ffcd 	bl	8001244 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80032aa:	f000 f817 	bl	80032dc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80032ae:	f7ff ffb1 	bl	8003214 <main>
  bx  lr    
 80032b2:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80032b4:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 80032b8:	08004780 	.word	0x08004780
  ldr  r0, =_sdata
 80032bc:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80032c0:	200000e4 	.word	0x200000e4
  ldr  r2, =_sbss
 80032c4:	200000e4 	.word	0x200000e4
  ldr  r3, = _ebss
 80032c8:	20000db4 	.word	0x20000db4

080032cc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80032cc:	e7fe      	b.n	80032cc <ADC_IRQHandler>
	...

080032d0 <__errno>:
 80032d0:	4b01      	ldr	r3, [pc, #4]	; (80032d8 <__errno+0x8>)
 80032d2:	6818      	ldr	r0, [r3, #0]
 80032d4:	4770      	bx	lr
 80032d6:	bf00      	nop
 80032d8:	20000080 	.word	0x20000080

080032dc <__libc_init_array>:
 80032dc:	b570      	push	{r4, r5, r6, lr}
 80032de:	4d0d      	ldr	r5, [pc, #52]	; (8003314 <__libc_init_array+0x38>)
 80032e0:	4c0d      	ldr	r4, [pc, #52]	; (8003318 <__libc_init_array+0x3c>)
 80032e2:	1b64      	subs	r4, r4, r5
 80032e4:	10a4      	asrs	r4, r4, #2
 80032e6:	2600      	movs	r6, #0
 80032e8:	42a6      	cmp	r6, r4
 80032ea:	d109      	bne.n	8003300 <__libc_init_array+0x24>
 80032ec:	4d0b      	ldr	r5, [pc, #44]	; (800331c <__libc_init_array+0x40>)
 80032ee:	4c0c      	ldr	r4, [pc, #48]	; (8003320 <__libc_init_array+0x44>)
 80032f0:	f001 f948 	bl	8004584 <_init>
 80032f4:	1b64      	subs	r4, r4, r5
 80032f6:	10a4      	asrs	r4, r4, #2
 80032f8:	2600      	movs	r6, #0
 80032fa:	42a6      	cmp	r6, r4
 80032fc:	d105      	bne.n	800330a <__libc_init_array+0x2e>
 80032fe:	bd70      	pop	{r4, r5, r6, pc}
 8003300:	f855 3b04 	ldr.w	r3, [r5], #4
 8003304:	4798      	blx	r3
 8003306:	3601      	adds	r6, #1
 8003308:	e7ee      	b.n	80032e8 <__libc_init_array+0xc>
 800330a:	f855 3b04 	ldr.w	r3, [r5], #4
 800330e:	4798      	blx	r3
 8003310:	3601      	adds	r6, #1
 8003312:	e7f2      	b.n	80032fa <__libc_init_array+0x1e>
 8003314:	08004778 	.word	0x08004778
 8003318:	08004778 	.word	0x08004778
 800331c:	08004778 	.word	0x08004778
 8003320:	0800477c 	.word	0x0800477c

08003324 <memset>:
 8003324:	4402      	add	r2, r0
 8003326:	4603      	mov	r3, r0
 8003328:	4293      	cmp	r3, r2
 800332a:	d100      	bne.n	800332e <memset+0xa>
 800332c:	4770      	bx	lr
 800332e:	f803 1b01 	strb.w	r1, [r3], #1
 8003332:	e7f9      	b.n	8003328 <memset+0x4>

08003334 <iprintf>:
 8003334:	b40f      	push	{r0, r1, r2, r3}
 8003336:	4b0a      	ldr	r3, [pc, #40]	; (8003360 <iprintf+0x2c>)
 8003338:	b513      	push	{r0, r1, r4, lr}
 800333a:	681c      	ldr	r4, [r3, #0]
 800333c:	b124      	cbz	r4, 8003348 <iprintf+0x14>
 800333e:	69a3      	ldr	r3, [r4, #24]
 8003340:	b913      	cbnz	r3, 8003348 <iprintf+0x14>
 8003342:	4620      	mov	r0, r4
 8003344:	f000 f886 	bl	8003454 <__sinit>
 8003348:	ab05      	add	r3, sp, #20
 800334a:	9a04      	ldr	r2, [sp, #16]
 800334c:	68a1      	ldr	r1, [r4, #8]
 800334e:	9301      	str	r3, [sp, #4]
 8003350:	4620      	mov	r0, r4
 8003352:	f000 faff 	bl	8003954 <_vfiprintf_r>
 8003356:	b002      	add	sp, #8
 8003358:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800335c:	b004      	add	sp, #16
 800335e:	4770      	bx	lr
 8003360:	20000080 	.word	0x20000080

08003364 <siprintf>:
 8003364:	b40e      	push	{r1, r2, r3}
 8003366:	b500      	push	{lr}
 8003368:	b09c      	sub	sp, #112	; 0x70
 800336a:	ab1d      	add	r3, sp, #116	; 0x74
 800336c:	9002      	str	r0, [sp, #8]
 800336e:	9006      	str	r0, [sp, #24]
 8003370:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003374:	4809      	ldr	r0, [pc, #36]	; (800339c <siprintf+0x38>)
 8003376:	9107      	str	r1, [sp, #28]
 8003378:	9104      	str	r1, [sp, #16]
 800337a:	4909      	ldr	r1, [pc, #36]	; (80033a0 <siprintf+0x3c>)
 800337c:	f853 2b04 	ldr.w	r2, [r3], #4
 8003380:	9105      	str	r1, [sp, #20]
 8003382:	6800      	ldr	r0, [r0, #0]
 8003384:	9301      	str	r3, [sp, #4]
 8003386:	a902      	add	r1, sp, #8
 8003388:	f000 f9ba 	bl	8003700 <_svfiprintf_r>
 800338c:	9b02      	ldr	r3, [sp, #8]
 800338e:	2200      	movs	r2, #0
 8003390:	701a      	strb	r2, [r3, #0]
 8003392:	b01c      	add	sp, #112	; 0x70
 8003394:	f85d eb04 	ldr.w	lr, [sp], #4
 8003398:	b003      	add	sp, #12
 800339a:	4770      	bx	lr
 800339c:	20000080 	.word	0x20000080
 80033a0:	ffff0208 	.word	0xffff0208

080033a4 <std>:
 80033a4:	2300      	movs	r3, #0
 80033a6:	b510      	push	{r4, lr}
 80033a8:	4604      	mov	r4, r0
 80033aa:	e9c0 3300 	strd	r3, r3, [r0]
 80033ae:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80033b2:	6083      	str	r3, [r0, #8]
 80033b4:	8181      	strh	r1, [r0, #12]
 80033b6:	6643      	str	r3, [r0, #100]	; 0x64
 80033b8:	81c2      	strh	r2, [r0, #14]
 80033ba:	6183      	str	r3, [r0, #24]
 80033bc:	4619      	mov	r1, r3
 80033be:	2208      	movs	r2, #8
 80033c0:	305c      	adds	r0, #92	; 0x5c
 80033c2:	f7ff ffaf 	bl	8003324 <memset>
 80033c6:	4b05      	ldr	r3, [pc, #20]	; (80033dc <std+0x38>)
 80033c8:	6263      	str	r3, [r4, #36]	; 0x24
 80033ca:	4b05      	ldr	r3, [pc, #20]	; (80033e0 <std+0x3c>)
 80033cc:	62a3      	str	r3, [r4, #40]	; 0x28
 80033ce:	4b05      	ldr	r3, [pc, #20]	; (80033e4 <std+0x40>)
 80033d0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80033d2:	4b05      	ldr	r3, [pc, #20]	; (80033e8 <std+0x44>)
 80033d4:	6224      	str	r4, [r4, #32]
 80033d6:	6323      	str	r3, [r4, #48]	; 0x30
 80033d8:	bd10      	pop	{r4, pc}
 80033da:	bf00      	nop
 80033dc:	08003efd 	.word	0x08003efd
 80033e0:	08003f1f 	.word	0x08003f1f
 80033e4:	08003f57 	.word	0x08003f57
 80033e8:	08003f7b 	.word	0x08003f7b

080033ec <_cleanup_r>:
 80033ec:	4901      	ldr	r1, [pc, #4]	; (80033f4 <_cleanup_r+0x8>)
 80033ee:	f000 b8af 	b.w	8003550 <_fwalk_reent>
 80033f2:	bf00      	nop
 80033f4:	08004255 	.word	0x08004255

080033f8 <__sfmoreglue>:
 80033f8:	b570      	push	{r4, r5, r6, lr}
 80033fa:	1e4a      	subs	r2, r1, #1
 80033fc:	2568      	movs	r5, #104	; 0x68
 80033fe:	4355      	muls	r5, r2
 8003400:	460e      	mov	r6, r1
 8003402:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8003406:	f000 f8c5 	bl	8003594 <_malloc_r>
 800340a:	4604      	mov	r4, r0
 800340c:	b140      	cbz	r0, 8003420 <__sfmoreglue+0x28>
 800340e:	2100      	movs	r1, #0
 8003410:	e9c0 1600 	strd	r1, r6, [r0]
 8003414:	300c      	adds	r0, #12
 8003416:	60a0      	str	r0, [r4, #8]
 8003418:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800341c:	f7ff ff82 	bl	8003324 <memset>
 8003420:	4620      	mov	r0, r4
 8003422:	bd70      	pop	{r4, r5, r6, pc}

08003424 <__sfp_lock_acquire>:
 8003424:	4801      	ldr	r0, [pc, #4]	; (800342c <__sfp_lock_acquire+0x8>)
 8003426:	f000 b8b3 	b.w	8003590 <__retarget_lock_acquire_recursive>
 800342a:	bf00      	nop
 800342c:	20000dac 	.word	0x20000dac

08003430 <__sfp_lock_release>:
 8003430:	4801      	ldr	r0, [pc, #4]	; (8003438 <__sfp_lock_release+0x8>)
 8003432:	f000 b8ae 	b.w	8003592 <__retarget_lock_release_recursive>
 8003436:	bf00      	nop
 8003438:	20000dac 	.word	0x20000dac

0800343c <__sinit_lock_acquire>:
 800343c:	4801      	ldr	r0, [pc, #4]	; (8003444 <__sinit_lock_acquire+0x8>)
 800343e:	f000 b8a7 	b.w	8003590 <__retarget_lock_acquire_recursive>
 8003442:	bf00      	nop
 8003444:	20000da7 	.word	0x20000da7

08003448 <__sinit_lock_release>:
 8003448:	4801      	ldr	r0, [pc, #4]	; (8003450 <__sinit_lock_release+0x8>)
 800344a:	f000 b8a2 	b.w	8003592 <__retarget_lock_release_recursive>
 800344e:	bf00      	nop
 8003450:	20000da7 	.word	0x20000da7

08003454 <__sinit>:
 8003454:	b510      	push	{r4, lr}
 8003456:	4604      	mov	r4, r0
 8003458:	f7ff fff0 	bl	800343c <__sinit_lock_acquire>
 800345c:	69a3      	ldr	r3, [r4, #24]
 800345e:	b11b      	cbz	r3, 8003468 <__sinit+0x14>
 8003460:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003464:	f7ff bff0 	b.w	8003448 <__sinit_lock_release>
 8003468:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800346c:	6523      	str	r3, [r4, #80]	; 0x50
 800346e:	4b13      	ldr	r3, [pc, #76]	; (80034bc <__sinit+0x68>)
 8003470:	4a13      	ldr	r2, [pc, #76]	; (80034c0 <__sinit+0x6c>)
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	62a2      	str	r2, [r4, #40]	; 0x28
 8003476:	42a3      	cmp	r3, r4
 8003478:	bf04      	itt	eq
 800347a:	2301      	moveq	r3, #1
 800347c:	61a3      	streq	r3, [r4, #24]
 800347e:	4620      	mov	r0, r4
 8003480:	f000 f820 	bl	80034c4 <__sfp>
 8003484:	6060      	str	r0, [r4, #4]
 8003486:	4620      	mov	r0, r4
 8003488:	f000 f81c 	bl	80034c4 <__sfp>
 800348c:	60a0      	str	r0, [r4, #8]
 800348e:	4620      	mov	r0, r4
 8003490:	f000 f818 	bl	80034c4 <__sfp>
 8003494:	2200      	movs	r2, #0
 8003496:	60e0      	str	r0, [r4, #12]
 8003498:	2104      	movs	r1, #4
 800349a:	6860      	ldr	r0, [r4, #4]
 800349c:	f7ff ff82 	bl	80033a4 <std>
 80034a0:	68a0      	ldr	r0, [r4, #8]
 80034a2:	2201      	movs	r2, #1
 80034a4:	2109      	movs	r1, #9
 80034a6:	f7ff ff7d 	bl	80033a4 <std>
 80034aa:	68e0      	ldr	r0, [r4, #12]
 80034ac:	2202      	movs	r2, #2
 80034ae:	2112      	movs	r1, #18
 80034b0:	f7ff ff78 	bl	80033a4 <std>
 80034b4:	2301      	movs	r3, #1
 80034b6:	61a3      	str	r3, [r4, #24]
 80034b8:	e7d2      	b.n	8003460 <__sinit+0xc>
 80034ba:	bf00      	nop
 80034bc:	080046d8 	.word	0x080046d8
 80034c0:	080033ed 	.word	0x080033ed

080034c4 <__sfp>:
 80034c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80034c6:	4607      	mov	r7, r0
 80034c8:	f7ff ffac 	bl	8003424 <__sfp_lock_acquire>
 80034cc:	4b1e      	ldr	r3, [pc, #120]	; (8003548 <__sfp+0x84>)
 80034ce:	681e      	ldr	r6, [r3, #0]
 80034d0:	69b3      	ldr	r3, [r6, #24]
 80034d2:	b913      	cbnz	r3, 80034da <__sfp+0x16>
 80034d4:	4630      	mov	r0, r6
 80034d6:	f7ff ffbd 	bl	8003454 <__sinit>
 80034da:	3648      	adds	r6, #72	; 0x48
 80034dc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80034e0:	3b01      	subs	r3, #1
 80034e2:	d503      	bpl.n	80034ec <__sfp+0x28>
 80034e4:	6833      	ldr	r3, [r6, #0]
 80034e6:	b30b      	cbz	r3, 800352c <__sfp+0x68>
 80034e8:	6836      	ldr	r6, [r6, #0]
 80034ea:	e7f7      	b.n	80034dc <__sfp+0x18>
 80034ec:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80034f0:	b9d5      	cbnz	r5, 8003528 <__sfp+0x64>
 80034f2:	4b16      	ldr	r3, [pc, #88]	; (800354c <__sfp+0x88>)
 80034f4:	60e3      	str	r3, [r4, #12]
 80034f6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80034fa:	6665      	str	r5, [r4, #100]	; 0x64
 80034fc:	f000 f847 	bl	800358e <__retarget_lock_init_recursive>
 8003500:	f7ff ff96 	bl	8003430 <__sfp_lock_release>
 8003504:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8003508:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800350c:	6025      	str	r5, [r4, #0]
 800350e:	61a5      	str	r5, [r4, #24]
 8003510:	2208      	movs	r2, #8
 8003512:	4629      	mov	r1, r5
 8003514:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003518:	f7ff ff04 	bl	8003324 <memset>
 800351c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003520:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8003524:	4620      	mov	r0, r4
 8003526:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003528:	3468      	adds	r4, #104	; 0x68
 800352a:	e7d9      	b.n	80034e0 <__sfp+0x1c>
 800352c:	2104      	movs	r1, #4
 800352e:	4638      	mov	r0, r7
 8003530:	f7ff ff62 	bl	80033f8 <__sfmoreglue>
 8003534:	4604      	mov	r4, r0
 8003536:	6030      	str	r0, [r6, #0]
 8003538:	2800      	cmp	r0, #0
 800353a:	d1d5      	bne.n	80034e8 <__sfp+0x24>
 800353c:	f7ff ff78 	bl	8003430 <__sfp_lock_release>
 8003540:	230c      	movs	r3, #12
 8003542:	603b      	str	r3, [r7, #0]
 8003544:	e7ee      	b.n	8003524 <__sfp+0x60>
 8003546:	bf00      	nop
 8003548:	080046d8 	.word	0x080046d8
 800354c:	ffff0001 	.word	0xffff0001

08003550 <_fwalk_reent>:
 8003550:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003554:	4606      	mov	r6, r0
 8003556:	4688      	mov	r8, r1
 8003558:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800355c:	2700      	movs	r7, #0
 800355e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003562:	f1b9 0901 	subs.w	r9, r9, #1
 8003566:	d505      	bpl.n	8003574 <_fwalk_reent+0x24>
 8003568:	6824      	ldr	r4, [r4, #0]
 800356a:	2c00      	cmp	r4, #0
 800356c:	d1f7      	bne.n	800355e <_fwalk_reent+0xe>
 800356e:	4638      	mov	r0, r7
 8003570:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003574:	89ab      	ldrh	r3, [r5, #12]
 8003576:	2b01      	cmp	r3, #1
 8003578:	d907      	bls.n	800358a <_fwalk_reent+0x3a>
 800357a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800357e:	3301      	adds	r3, #1
 8003580:	d003      	beq.n	800358a <_fwalk_reent+0x3a>
 8003582:	4629      	mov	r1, r5
 8003584:	4630      	mov	r0, r6
 8003586:	47c0      	blx	r8
 8003588:	4307      	orrs	r7, r0
 800358a:	3568      	adds	r5, #104	; 0x68
 800358c:	e7e9      	b.n	8003562 <_fwalk_reent+0x12>

0800358e <__retarget_lock_init_recursive>:
 800358e:	4770      	bx	lr

08003590 <__retarget_lock_acquire_recursive>:
 8003590:	4770      	bx	lr

08003592 <__retarget_lock_release_recursive>:
 8003592:	4770      	bx	lr

08003594 <_malloc_r>:
 8003594:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003596:	1ccd      	adds	r5, r1, #3
 8003598:	f025 0503 	bic.w	r5, r5, #3
 800359c:	3508      	adds	r5, #8
 800359e:	2d0c      	cmp	r5, #12
 80035a0:	bf38      	it	cc
 80035a2:	250c      	movcc	r5, #12
 80035a4:	2d00      	cmp	r5, #0
 80035a6:	4606      	mov	r6, r0
 80035a8:	db01      	blt.n	80035ae <_malloc_r+0x1a>
 80035aa:	42a9      	cmp	r1, r5
 80035ac:	d903      	bls.n	80035b6 <_malloc_r+0x22>
 80035ae:	230c      	movs	r3, #12
 80035b0:	6033      	str	r3, [r6, #0]
 80035b2:	2000      	movs	r0, #0
 80035b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80035b6:	f000 ff27 	bl	8004408 <__malloc_lock>
 80035ba:	4921      	ldr	r1, [pc, #132]	; (8003640 <_malloc_r+0xac>)
 80035bc:	680a      	ldr	r2, [r1, #0]
 80035be:	4614      	mov	r4, r2
 80035c0:	b99c      	cbnz	r4, 80035ea <_malloc_r+0x56>
 80035c2:	4f20      	ldr	r7, [pc, #128]	; (8003644 <_malloc_r+0xb0>)
 80035c4:	683b      	ldr	r3, [r7, #0]
 80035c6:	b923      	cbnz	r3, 80035d2 <_malloc_r+0x3e>
 80035c8:	4621      	mov	r1, r4
 80035ca:	4630      	mov	r0, r6
 80035cc:	f000 fc86 	bl	8003edc <_sbrk_r>
 80035d0:	6038      	str	r0, [r7, #0]
 80035d2:	4629      	mov	r1, r5
 80035d4:	4630      	mov	r0, r6
 80035d6:	f000 fc81 	bl	8003edc <_sbrk_r>
 80035da:	1c43      	adds	r3, r0, #1
 80035dc:	d123      	bne.n	8003626 <_malloc_r+0x92>
 80035de:	230c      	movs	r3, #12
 80035e0:	6033      	str	r3, [r6, #0]
 80035e2:	4630      	mov	r0, r6
 80035e4:	f000 ff16 	bl	8004414 <__malloc_unlock>
 80035e8:	e7e3      	b.n	80035b2 <_malloc_r+0x1e>
 80035ea:	6823      	ldr	r3, [r4, #0]
 80035ec:	1b5b      	subs	r3, r3, r5
 80035ee:	d417      	bmi.n	8003620 <_malloc_r+0x8c>
 80035f0:	2b0b      	cmp	r3, #11
 80035f2:	d903      	bls.n	80035fc <_malloc_r+0x68>
 80035f4:	6023      	str	r3, [r4, #0]
 80035f6:	441c      	add	r4, r3
 80035f8:	6025      	str	r5, [r4, #0]
 80035fa:	e004      	b.n	8003606 <_malloc_r+0x72>
 80035fc:	6863      	ldr	r3, [r4, #4]
 80035fe:	42a2      	cmp	r2, r4
 8003600:	bf0c      	ite	eq
 8003602:	600b      	streq	r3, [r1, #0]
 8003604:	6053      	strne	r3, [r2, #4]
 8003606:	4630      	mov	r0, r6
 8003608:	f000 ff04 	bl	8004414 <__malloc_unlock>
 800360c:	f104 000b 	add.w	r0, r4, #11
 8003610:	1d23      	adds	r3, r4, #4
 8003612:	f020 0007 	bic.w	r0, r0, #7
 8003616:	1ac2      	subs	r2, r0, r3
 8003618:	d0cc      	beq.n	80035b4 <_malloc_r+0x20>
 800361a:	1a1b      	subs	r3, r3, r0
 800361c:	50a3      	str	r3, [r4, r2]
 800361e:	e7c9      	b.n	80035b4 <_malloc_r+0x20>
 8003620:	4622      	mov	r2, r4
 8003622:	6864      	ldr	r4, [r4, #4]
 8003624:	e7cc      	b.n	80035c0 <_malloc_r+0x2c>
 8003626:	1cc4      	adds	r4, r0, #3
 8003628:	f024 0403 	bic.w	r4, r4, #3
 800362c:	42a0      	cmp	r0, r4
 800362e:	d0e3      	beq.n	80035f8 <_malloc_r+0x64>
 8003630:	1a21      	subs	r1, r4, r0
 8003632:	4630      	mov	r0, r6
 8003634:	f000 fc52 	bl	8003edc <_sbrk_r>
 8003638:	3001      	adds	r0, #1
 800363a:	d1dd      	bne.n	80035f8 <_malloc_r+0x64>
 800363c:	e7cf      	b.n	80035de <_malloc_r+0x4a>
 800363e:	bf00      	nop
 8003640:	20000134 	.word	0x20000134
 8003644:	20000138 	.word	0x20000138

08003648 <__ssputs_r>:
 8003648:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800364c:	688e      	ldr	r6, [r1, #8]
 800364e:	429e      	cmp	r6, r3
 8003650:	4682      	mov	sl, r0
 8003652:	460c      	mov	r4, r1
 8003654:	4690      	mov	r8, r2
 8003656:	461f      	mov	r7, r3
 8003658:	d838      	bhi.n	80036cc <__ssputs_r+0x84>
 800365a:	898a      	ldrh	r2, [r1, #12]
 800365c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003660:	d032      	beq.n	80036c8 <__ssputs_r+0x80>
 8003662:	6825      	ldr	r5, [r4, #0]
 8003664:	6909      	ldr	r1, [r1, #16]
 8003666:	eba5 0901 	sub.w	r9, r5, r1
 800366a:	6965      	ldr	r5, [r4, #20]
 800366c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003670:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003674:	3301      	adds	r3, #1
 8003676:	444b      	add	r3, r9
 8003678:	106d      	asrs	r5, r5, #1
 800367a:	429d      	cmp	r5, r3
 800367c:	bf38      	it	cc
 800367e:	461d      	movcc	r5, r3
 8003680:	0553      	lsls	r3, r2, #21
 8003682:	d531      	bpl.n	80036e8 <__ssputs_r+0xa0>
 8003684:	4629      	mov	r1, r5
 8003686:	f7ff ff85 	bl	8003594 <_malloc_r>
 800368a:	4606      	mov	r6, r0
 800368c:	b950      	cbnz	r0, 80036a4 <__ssputs_r+0x5c>
 800368e:	230c      	movs	r3, #12
 8003690:	f8ca 3000 	str.w	r3, [sl]
 8003694:	89a3      	ldrh	r3, [r4, #12]
 8003696:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800369a:	81a3      	strh	r3, [r4, #12]
 800369c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80036a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80036a4:	6921      	ldr	r1, [r4, #16]
 80036a6:	464a      	mov	r2, r9
 80036a8:	f000 fe86 	bl	80043b8 <memcpy>
 80036ac:	89a3      	ldrh	r3, [r4, #12]
 80036ae:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80036b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80036b6:	81a3      	strh	r3, [r4, #12]
 80036b8:	6126      	str	r6, [r4, #16]
 80036ba:	6165      	str	r5, [r4, #20]
 80036bc:	444e      	add	r6, r9
 80036be:	eba5 0509 	sub.w	r5, r5, r9
 80036c2:	6026      	str	r6, [r4, #0]
 80036c4:	60a5      	str	r5, [r4, #8]
 80036c6:	463e      	mov	r6, r7
 80036c8:	42be      	cmp	r6, r7
 80036ca:	d900      	bls.n	80036ce <__ssputs_r+0x86>
 80036cc:	463e      	mov	r6, r7
 80036ce:	4632      	mov	r2, r6
 80036d0:	6820      	ldr	r0, [r4, #0]
 80036d2:	4641      	mov	r1, r8
 80036d4:	f000 fe7e 	bl	80043d4 <memmove>
 80036d8:	68a3      	ldr	r3, [r4, #8]
 80036da:	6822      	ldr	r2, [r4, #0]
 80036dc:	1b9b      	subs	r3, r3, r6
 80036de:	4432      	add	r2, r6
 80036e0:	60a3      	str	r3, [r4, #8]
 80036e2:	6022      	str	r2, [r4, #0]
 80036e4:	2000      	movs	r0, #0
 80036e6:	e7db      	b.n	80036a0 <__ssputs_r+0x58>
 80036e8:	462a      	mov	r2, r5
 80036ea:	f000 fee9 	bl	80044c0 <_realloc_r>
 80036ee:	4606      	mov	r6, r0
 80036f0:	2800      	cmp	r0, #0
 80036f2:	d1e1      	bne.n	80036b8 <__ssputs_r+0x70>
 80036f4:	6921      	ldr	r1, [r4, #16]
 80036f6:	4650      	mov	r0, sl
 80036f8:	f000 fe92 	bl	8004420 <_free_r>
 80036fc:	e7c7      	b.n	800368e <__ssputs_r+0x46>
	...

08003700 <_svfiprintf_r>:
 8003700:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003704:	4698      	mov	r8, r3
 8003706:	898b      	ldrh	r3, [r1, #12]
 8003708:	061b      	lsls	r3, r3, #24
 800370a:	b09d      	sub	sp, #116	; 0x74
 800370c:	4607      	mov	r7, r0
 800370e:	460d      	mov	r5, r1
 8003710:	4614      	mov	r4, r2
 8003712:	d50e      	bpl.n	8003732 <_svfiprintf_r+0x32>
 8003714:	690b      	ldr	r3, [r1, #16]
 8003716:	b963      	cbnz	r3, 8003732 <_svfiprintf_r+0x32>
 8003718:	2140      	movs	r1, #64	; 0x40
 800371a:	f7ff ff3b 	bl	8003594 <_malloc_r>
 800371e:	6028      	str	r0, [r5, #0]
 8003720:	6128      	str	r0, [r5, #16]
 8003722:	b920      	cbnz	r0, 800372e <_svfiprintf_r+0x2e>
 8003724:	230c      	movs	r3, #12
 8003726:	603b      	str	r3, [r7, #0]
 8003728:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800372c:	e0d1      	b.n	80038d2 <_svfiprintf_r+0x1d2>
 800372e:	2340      	movs	r3, #64	; 0x40
 8003730:	616b      	str	r3, [r5, #20]
 8003732:	2300      	movs	r3, #0
 8003734:	9309      	str	r3, [sp, #36]	; 0x24
 8003736:	2320      	movs	r3, #32
 8003738:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800373c:	f8cd 800c 	str.w	r8, [sp, #12]
 8003740:	2330      	movs	r3, #48	; 0x30
 8003742:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80038ec <_svfiprintf_r+0x1ec>
 8003746:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800374a:	f04f 0901 	mov.w	r9, #1
 800374e:	4623      	mov	r3, r4
 8003750:	469a      	mov	sl, r3
 8003752:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003756:	b10a      	cbz	r2, 800375c <_svfiprintf_r+0x5c>
 8003758:	2a25      	cmp	r2, #37	; 0x25
 800375a:	d1f9      	bne.n	8003750 <_svfiprintf_r+0x50>
 800375c:	ebba 0b04 	subs.w	fp, sl, r4
 8003760:	d00b      	beq.n	800377a <_svfiprintf_r+0x7a>
 8003762:	465b      	mov	r3, fp
 8003764:	4622      	mov	r2, r4
 8003766:	4629      	mov	r1, r5
 8003768:	4638      	mov	r0, r7
 800376a:	f7ff ff6d 	bl	8003648 <__ssputs_r>
 800376e:	3001      	adds	r0, #1
 8003770:	f000 80aa 	beq.w	80038c8 <_svfiprintf_r+0x1c8>
 8003774:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003776:	445a      	add	r2, fp
 8003778:	9209      	str	r2, [sp, #36]	; 0x24
 800377a:	f89a 3000 	ldrb.w	r3, [sl]
 800377e:	2b00      	cmp	r3, #0
 8003780:	f000 80a2 	beq.w	80038c8 <_svfiprintf_r+0x1c8>
 8003784:	2300      	movs	r3, #0
 8003786:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800378a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800378e:	f10a 0a01 	add.w	sl, sl, #1
 8003792:	9304      	str	r3, [sp, #16]
 8003794:	9307      	str	r3, [sp, #28]
 8003796:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800379a:	931a      	str	r3, [sp, #104]	; 0x68
 800379c:	4654      	mov	r4, sl
 800379e:	2205      	movs	r2, #5
 80037a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80037a4:	4851      	ldr	r0, [pc, #324]	; (80038ec <_svfiprintf_r+0x1ec>)
 80037a6:	f7fc fd2b 	bl	8000200 <memchr>
 80037aa:	9a04      	ldr	r2, [sp, #16]
 80037ac:	b9d8      	cbnz	r0, 80037e6 <_svfiprintf_r+0xe6>
 80037ae:	06d0      	lsls	r0, r2, #27
 80037b0:	bf44      	itt	mi
 80037b2:	2320      	movmi	r3, #32
 80037b4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80037b8:	0711      	lsls	r1, r2, #28
 80037ba:	bf44      	itt	mi
 80037bc:	232b      	movmi	r3, #43	; 0x2b
 80037be:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80037c2:	f89a 3000 	ldrb.w	r3, [sl]
 80037c6:	2b2a      	cmp	r3, #42	; 0x2a
 80037c8:	d015      	beq.n	80037f6 <_svfiprintf_r+0xf6>
 80037ca:	9a07      	ldr	r2, [sp, #28]
 80037cc:	4654      	mov	r4, sl
 80037ce:	2000      	movs	r0, #0
 80037d0:	f04f 0c0a 	mov.w	ip, #10
 80037d4:	4621      	mov	r1, r4
 80037d6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80037da:	3b30      	subs	r3, #48	; 0x30
 80037dc:	2b09      	cmp	r3, #9
 80037de:	d94e      	bls.n	800387e <_svfiprintf_r+0x17e>
 80037e0:	b1b0      	cbz	r0, 8003810 <_svfiprintf_r+0x110>
 80037e2:	9207      	str	r2, [sp, #28]
 80037e4:	e014      	b.n	8003810 <_svfiprintf_r+0x110>
 80037e6:	eba0 0308 	sub.w	r3, r0, r8
 80037ea:	fa09 f303 	lsl.w	r3, r9, r3
 80037ee:	4313      	orrs	r3, r2
 80037f0:	9304      	str	r3, [sp, #16]
 80037f2:	46a2      	mov	sl, r4
 80037f4:	e7d2      	b.n	800379c <_svfiprintf_r+0x9c>
 80037f6:	9b03      	ldr	r3, [sp, #12]
 80037f8:	1d19      	adds	r1, r3, #4
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	9103      	str	r1, [sp, #12]
 80037fe:	2b00      	cmp	r3, #0
 8003800:	bfbb      	ittet	lt
 8003802:	425b      	neglt	r3, r3
 8003804:	f042 0202 	orrlt.w	r2, r2, #2
 8003808:	9307      	strge	r3, [sp, #28]
 800380a:	9307      	strlt	r3, [sp, #28]
 800380c:	bfb8      	it	lt
 800380e:	9204      	strlt	r2, [sp, #16]
 8003810:	7823      	ldrb	r3, [r4, #0]
 8003812:	2b2e      	cmp	r3, #46	; 0x2e
 8003814:	d10c      	bne.n	8003830 <_svfiprintf_r+0x130>
 8003816:	7863      	ldrb	r3, [r4, #1]
 8003818:	2b2a      	cmp	r3, #42	; 0x2a
 800381a:	d135      	bne.n	8003888 <_svfiprintf_r+0x188>
 800381c:	9b03      	ldr	r3, [sp, #12]
 800381e:	1d1a      	adds	r2, r3, #4
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	9203      	str	r2, [sp, #12]
 8003824:	2b00      	cmp	r3, #0
 8003826:	bfb8      	it	lt
 8003828:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800382c:	3402      	adds	r4, #2
 800382e:	9305      	str	r3, [sp, #20]
 8003830:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80038fc <_svfiprintf_r+0x1fc>
 8003834:	7821      	ldrb	r1, [r4, #0]
 8003836:	2203      	movs	r2, #3
 8003838:	4650      	mov	r0, sl
 800383a:	f7fc fce1 	bl	8000200 <memchr>
 800383e:	b140      	cbz	r0, 8003852 <_svfiprintf_r+0x152>
 8003840:	2340      	movs	r3, #64	; 0x40
 8003842:	eba0 000a 	sub.w	r0, r0, sl
 8003846:	fa03 f000 	lsl.w	r0, r3, r0
 800384a:	9b04      	ldr	r3, [sp, #16]
 800384c:	4303      	orrs	r3, r0
 800384e:	3401      	adds	r4, #1
 8003850:	9304      	str	r3, [sp, #16]
 8003852:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003856:	4826      	ldr	r0, [pc, #152]	; (80038f0 <_svfiprintf_r+0x1f0>)
 8003858:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800385c:	2206      	movs	r2, #6
 800385e:	f7fc fccf 	bl	8000200 <memchr>
 8003862:	2800      	cmp	r0, #0
 8003864:	d038      	beq.n	80038d8 <_svfiprintf_r+0x1d8>
 8003866:	4b23      	ldr	r3, [pc, #140]	; (80038f4 <_svfiprintf_r+0x1f4>)
 8003868:	bb1b      	cbnz	r3, 80038b2 <_svfiprintf_r+0x1b2>
 800386a:	9b03      	ldr	r3, [sp, #12]
 800386c:	3307      	adds	r3, #7
 800386e:	f023 0307 	bic.w	r3, r3, #7
 8003872:	3308      	adds	r3, #8
 8003874:	9303      	str	r3, [sp, #12]
 8003876:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003878:	4433      	add	r3, r6
 800387a:	9309      	str	r3, [sp, #36]	; 0x24
 800387c:	e767      	b.n	800374e <_svfiprintf_r+0x4e>
 800387e:	fb0c 3202 	mla	r2, ip, r2, r3
 8003882:	460c      	mov	r4, r1
 8003884:	2001      	movs	r0, #1
 8003886:	e7a5      	b.n	80037d4 <_svfiprintf_r+0xd4>
 8003888:	2300      	movs	r3, #0
 800388a:	3401      	adds	r4, #1
 800388c:	9305      	str	r3, [sp, #20]
 800388e:	4619      	mov	r1, r3
 8003890:	f04f 0c0a 	mov.w	ip, #10
 8003894:	4620      	mov	r0, r4
 8003896:	f810 2b01 	ldrb.w	r2, [r0], #1
 800389a:	3a30      	subs	r2, #48	; 0x30
 800389c:	2a09      	cmp	r2, #9
 800389e:	d903      	bls.n	80038a8 <_svfiprintf_r+0x1a8>
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d0c5      	beq.n	8003830 <_svfiprintf_r+0x130>
 80038a4:	9105      	str	r1, [sp, #20]
 80038a6:	e7c3      	b.n	8003830 <_svfiprintf_r+0x130>
 80038a8:	fb0c 2101 	mla	r1, ip, r1, r2
 80038ac:	4604      	mov	r4, r0
 80038ae:	2301      	movs	r3, #1
 80038b0:	e7f0      	b.n	8003894 <_svfiprintf_r+0x194>
 80038b2:	ab03      	add	r3, sp, #12
 80038b4:	9300      	str	r3, [sp, #0]
 80038b6:	462a      	mov	r2, r5
 80038b8:	4b0f      	ldr	r3, [pc, #60]	; (80038f8 <_svfiprintf_r+0x1f8>)
 80038ba:	a904      	add	r1, sp, #16
 80038bc:	4638      	mov	r0, r7
 80038be:	f3af 8000 	nop.w
 80038c2:	1c42      	adds	r2, r0, #1
 80038c4:	4606      	mov	r6, r0
 80038c6:	d1d6      	bne.n	8003876 <_svfiprintf_r+0x176>
 80038c8:	89ab      	ldrh	r3, [r5, #12]
 80038ca:	065b      	lsls	r3, r3, #25
 80038cc:	f53f af2c 	bmi.w	8003728 <_svfiprintf_r+0x28>
 80038d0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80038d2:	b01d      	add	sp, #116	; 0x74
 80038d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80038d8:	ab03      	add	r3, sp, #12
 80038da:	9300      	str	r3, [sp, #0]
 80038dc:	462a      	mov	r2, r5
 80038de:	4b06      	ldr	r3, [pc, #24]	; (80038f8 <_svfiprintf_r+0x1f8>)
 80038e0:	a904      	add	r1, sp, #16
 80038e2:	4638      	mov	r0, r7
 80038e4:	f000 f9d4 	bl	8003c90 <_printf_i>
 80038e8:	e7eb      	b.n	80038c2 <_svfiprintf_r+0x1c2>
 80038ea:	bf00      	nop
 80038ec:	0800473c 	.word	0x0800473c
 80038f0:	08004746 	.word	0x08004746
 80038f4:	00000000 	.word	0x00000000
 80038f8:	08003649 	.word	0x08003649
 80038fc:	08004742 	.word	0x08004742

08003900 <__sfputc_r>:
 8003900:	6893      	ldr	r3, [r2, #8]
 8003902:	3b01      	subs	r3, #1
 8003904:	2b00      	cmp	r3, #0
 8003906:	b410      	push	{r4}
 8003908:	6093      	str	r3, [r2, #8]
 800390a:	da08      	bge.n	800391e <__sfputc_r+0x1e>
 800390c:	6994      	ldr	r4, [r2, #24]
 800390e:	42a3      	cmp	r3, r4
 8003910:	db01      	blt.n	8003916 <__sfputc_r+0x16>
 8003912:	290a      	cmp	r1, #10
 8003914:	d103      	bne.n	800391e <__sfputc_r+0x1e>
 8003916:	f85d 4b04 	ldr.w	r4, [sp], #4
 800391a:	f000 bb33 	b.w	8003f84 <__swbuf_r>
 800391e:	6813      	ldr	r3, [r2, #0]
 8003920:	1c58      	adds	r0, r3, #1
 8003922:	6010      	str	r0, [r2, #0]
 8003924:	7019      	strb	r1, [r3, #0]
 8003926:	4608      	mov	r0, r1
 8003928:	f85d 4b04 	ldr.w	r4, [sp], #4
 800392c:	4770      	bx	lr

0800392e <__sfputs_r>:
 800392e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003930:	4606      	mov	r6, r0
 8003932:	460f      	mov	r7, r1
 8003934:	4614      	mov	r4, r2
 8003936:	18d5      	adds	r5, r2, r3
 8003938:	42ac      	cmp	r4, r5
 800393a:	d101      	bne.n	8003940 <__sfputs_r+0x12>
 800393c:	2000      	movs	r0, #0
 800393e:	e007      	b.n	8003950 <__sfputs_r+0x22>
 8003940:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003944:	463a      	mov	r2, r7
 8003946:	4630      	mov	r0, r6
 8003948:	f7ff ffda 	bl	8003900 <__sfputc_r>
 800394c:	1c43      	adds	r3, r0, #1
 800394e:	d1f3      	bne.n	8003938 <__sfputs_r+0xa>
 8003950:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003954 <_vfiprintf_r>:
 8003954:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003958:	460d      	mov	r5, r1
 800395a:	b09d      	sub	sp, #116	; 0x74
 800395c:	4614      	mov	r4, r2
 800395e:	4698      	mov	r8, r3
 8003960:	4606      	mov	r6, r0
 8003962:	b118      	cbz	r0, 800396c <_vfiprintf_r+0x18>
 8003964:	6983      	ldr	r3, [r0, #24]
 8003966:	b90b      	cbnz	r3, 800396c <_vfiprintf_r+0x18>
 8003968:	f7ff fd74 	bl	8003454 <__sinit>
 800396c:	4b89      	ldr	r3, [pc, #548]	; (8003b94 <_vfiprintf_r+0x240>)
 800396e:	429d      	cmp	r5, r3
 8003970:	d11b      	bne.n	80039aa <_vfiprintf_r+0x56>
 8003972:	6875      	ldr	r5, [r6, #4]
 8003974:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003976:	07d9      	lsls	r1, r3, #31
 8003978:	d405      	bmi.n	8003986 <_vfiprintf_r+0x32>
 800397a:	89ab      	ldrh	r3, [r5, #12]
 800397c:	059a      	lsls	r2, r3, #22
 800397e:	d402      	bmi.n	8003986 <_vfiprintf_r+0x32>
 8003980:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003982:	f7ff fe05 	bl	8003590 <__retarget_lock_acquire_recursive>
 8003986:	89ab      	ldrh	r3, [r5, #12]
 8003988:	071b      	lsls	r3, r3, #28
 800398a:	d501      	bpl.n	8003990 <_vfiprintf_r+0x3c>
 800398c:	692b      	ldr	r3, [r5, #16]
 800398e:	b9eb      	cbnz	r3, 80039cc <_vfiprintf_r+0x78>
 8003990:	4629      	mov	r1, r5
 8003992:	4630      	mov	r0, r6
 8003994:	f000 fb5a 	bl	800404c <__swsetup_r>
 8003998:	b1c0      	cbz	r0, 80039cc <_vfiprintf_r+0x78>
 800399a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800399c:	07dc      	lsls	r4, r3, #31
 800399e:	d50e      	bpl.n	80039be <_vfiprintf_r+0x6a>
 80039a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80039a4:	b01d      	add	sp, #116	; 0x74
 80039a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80039aa:	4b7b      	ldr	r3, [pc, #492]	; (8003b98 <_vfiprintf_r+0x244>)
 80039ac:	429d      	cmp	r5, r3
 80039ae:	d101      	bne.n	80039b4 <_vfiprintf_r+0x60>
 80039b0:	68b5      	ldr	r5, [r6, #8]
 80039b2:	e7df      	b.n	8003974 <_vfiprintf_r+0x20>
 80039b4:	4b79      	ldr	r3, [pc, #484]	; (8003b9c <_vfiprintf_r+0x248>)
 80039b6:	429d      	cmp	r5, r3
 80039b8:	bf08      	it	eq
 80039ba:	68f5      	ldreq	r5, [r6, #12]
 80039bc:	e7da      	b.n	8003974 <_vfiprintf_r+0x20>
 80039be:	89ab      	ldrh	r3, [r5, #12]
 80039c0:	0598      	lsls	r0, r3, #22
 80039c2:	d4ed      	bmi.n	80039a0 <_vfiprintf_r+0x4c>
 80039c4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80039c6:	f7ff fde4 	bl	8003592 <__retarget_lock_release_recursive>
 80039ca:	e7e9      	b.n	80039a0 <_vfiprintf_r+0x4c>
 80039cc:	2300      	movs	r3, #0
 80039ce:	9309      	str	r3, [sp, #36]	; 0x24
 80039d0:	2320      	movs	r3, #32
 80039d2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80039d6:	f8cd 800c 	str.w	r8, [sp, #12]
 80039da:	2330      	movs	r3, #48	; 0x30
 80039dc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8003ba0 <_vfiprintf_r+0x24c>
 80039e0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80039e4:	f04f 0901 	mov.w	r9, #1
 80039e8:	4623      	mov	r3, r4
 80039ea:	469a      	mov	sl, r3
 80039ec:	f813 2b01 	ldrb.w	r2, [r3], #1
 80039f0:	b10a      	cbz	r2, 80039f6 <_vfiprintf_r+0xa2>
 80039f2:	2a25      	cmp	r2, #37	; 0x25
 80039f4:	d1f9      	bne.n	80039ea <_vfiprintf_r+0x96>
 80039f6:	ebba 0b04 	subs.w	fp, sl, r4
 80039fa:	d00b      	beq.n	8003a14 <_vfiprintf_r+0xc0>
 80039fc:	465b      	mov	r3, fp
 80039fe:	4622      	mov	r2, r4
 8003a00:	4629      	mov	r1, r5
 8003a02:	4630      	mov	r0, r6
 8003a04:	f7ff ff93 	bl	800392e <__sfputs_r>
 8003a08:	3001      	adds	r0, #1
 8003a0a:	f000 80aa 	beq.w	8003b62 <_vfiprintf_r+0x20e>
 8003a0e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003a10:	445a      	add	r2, fp
 8003a12:	9209      	str	r2, [sp, #36]	; 0x24
 8003a14:	f89a 3000 	ldrb.w	r3, [sl]
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	f000 80a2 	beq.w	8003b62 <_vfiprintf_r+0x20e>
 8003a1e:	2300      	movs	r3, #0
 8003a20:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003a24:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003a28:	f10a 0a01 	add.w	sl, sl, #1
 8003a2c:	9304      	str	r3, [sp, #16]
 8003a2e:	9307      	str	r3, [sp, #28]
 8003a30:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003a34:	931a      	str	r3, [sp, #104]	; 0x68
 8003a36:	4654      	mov	r4, sl
 8003a38:	2205      	movs	r2, #5
 8003a3a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003a3e:	4858      	ldr	r0, [pc, #352]	; (8003ba0 <_vfiprintf_r+0x24c>)
 8003a40:	f7fc fbde 	bl	8000200 <memchr>
 8003a44:	9a04      	ldr	r2, [sp, #16]
 8003a46:	b9d8      	cbnz	r0, 8003a80 <_vfiprintf_r+0x12c>
 8003a48:	06d1      	lsls	r1, r2, #27
 8003a4a:	bf44      	itt	mi
 8003a4c:	2320      	movmi	r3, #32
 8003a4e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003a52:	0713      	lsls	r3, r2, #28
 8003a54:	bf44      	itt	mi
 8003a56:	232b      	movmi	r3, #43	; 0x2b
 8003a58:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003a5c:	f89a 3000 	ldrb.w	r3, [sl]
 8003a60:	2b2a      	cmp	r3, #42	; 0x2a
 8003a62:	d015      	beq.n	8003a90 <_vfiprintf_r+0x13c>
 8003a64:	9a07      	ldr	r2, [sp, #28]
 8003a66:	4654      	mov	r4, sl
 8003a68:	2000      	movs	r0, #0
 8003a6a:	f04f 0c0a 	mov.w	ip, #10
 8003a6e:	4621      	mov	r1, r4
 8003a70:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003a74:	3b30      	subs	r3, #48	; 0x30
 8003a76:	2b09      	cmp	r3, #9
 8003a78:	d94e      	bls.n	8003b18 <_vfiprintf_r+0x1c4>
 8003a7a:	b1b0      	cbz	r0, 8003aaa <_vfiprintf_r+0x156>
 8003a7c:	9207      	str	r2, [sp, #28]
 8003a7e:	e014      	b.n	8003aaa <_vfiprintf_r+0x156>
 8003a80:	eba0 0308 	sub.w	r3, r0, r8
 8003a84:	fa09 f303 	lsl.w	r3, r9, r3
 8003a88:	4313      	orrs	r3, r2
 8003a8a:	9304      	str	r3, [sp, #16]
 8003a8c:	46a2      	mov	sl, r4
 8003a8e:	e7d2      	b.n	8003a36 <_vfiprintf_r+0xe2>
 8003a90:	9b03      	ldr	r3, [sp, #12]
 8003a92:	1d19      	adds	r1, r3, #4
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	9103      	str	r1, [sp, #12]
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	bfbb      	ittet	lt
 8003a9c:	425b      	neglt	r3, r3
 8003a9e:	f042 0202 	orrlt.w	r2, r2, #2
 8003aa2:	9307      	strge	r3, [sp, #28]
 8003aa4:	9307      	strlt	r3, [sp, #28]
 8003aa6:	bfb8      	it	lt
 8003aa8:	9204      	strlt	r2, [sp, #16]
 8003aaa:	7823      	ldrb	r3, [r4, #0]
 8003aac:	2b2e      	cmp	r3, #46	; 0x2e
 8003aae:	d10c      	bne.n	8003aca <_vfiprintf_r+0x176>
 8003ab0:	7863      	ldrb	r3, [r4, #1]
 8003ab2:	2b2a      	cmp	r3, #42	; 0x2a
 8003ab4:	d135      	bne.n	8003b22 <_vfiprintf_r+0x1ce>
 8003ab6:	9b03      	ldr	r3, [sp, #12]
 8003ab8:	1d1a      	adds	r2, r3, #4
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	9203      	str	r2, [sp, #12]
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	bfb8      	it	lt
 8003ac2:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8003ac6:	3402      	adds	r4, #2
 8003ac8:	9305      	str	r3, [sp, #20]
 8003aca:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8003bb0 <_vfiprintf_r+0x25c>
 8003ace:	7821      	ldrb	r1, [r4, #0]
 8003ad0:	2203      	movs	r2, #3
 8003ad2:	4650      	mov	r0, sl
 8003ad4:	f7fc fb94 	bl	8000200 <memchr>
 8003ad8:	b140      	cbz	r0, 8003aec <_vfiprintf_r+0x198>
 8003ada:	2340      	movs	r3, #64	; 0x40
 8003adc:	eba0 000a 	sub.w	r0, r0, sl
 8003ae0:	fa03 f000 	lsl.w	r0, r3, r0
 8003ae4:	9b04      	ldr	r3, [sp, #16]
 8003ae6:	4303      	orrs	r3, r0
 8003ae8:	3401      	adds	r4, #1
 8003aea:	9304      	str	r3, [sp, #16]
 8003aec:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003af0:	482c      	ldr	r0, [pc, #176]	; (8003ba4 <_vfiprintf_r+0x250>)
 8003af2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003af6:	2206      	movs	r2, #6
 8003af8:	f7fc fb82 	bl	8000200 <memchr>
 8003afc:	2800      	cmp	r0, #0
 8003afe:	d03f      	beq.n	8003b80 <_vfiprintf_r+0x22c>
 8003b00:	4b29      	ldr	r3, [pc, #164]	; (8003ba8 <_vfiprintf_r+0x254>)
 8003b02:	bb1b      	cbnz	r3, 8003b4c <_vfiprintf_r+0x1f8>
 8003b04:	9b03      	ldr	r3, [sp, #12]
 8003b06:	3307      	adds	r3, #7
 8003b08:	f023 0307 	bic.w	r3, r3, #7
 8003b0c:	3308      	adds	r3, #8
 8003b0e:	9303      	str	r3, [sp, #12]
 8003b10:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003b12:	443b      	add	r3, r7
 8003b14:	9309      	str	r3, [sp, #36]	; 0x24
 8003b16:	e767      	b.n	80039e8 <_vfiprintf_r+0x94>
 8003b18:	fb0c 3202 	mla	r2, ip, r2, r3
 8003b1c:	460c      	mov	r4, r1
 8003b1e:	2001      	movs	r0, #1
 8003b20:	e7a5      	b.n	8003a6e <_vfiprintf_r+0x11a>
 8003b22:	2300      	movs	r3, #0
 8003b24:	3401      	adds	r4, #1
 8003b26:	9305      	str	r3, [sp, #20]
 8003b28:	4619      	mov	r1, r3
 8003b2a:	f04f 0c0a 	mov.w	ip, #10
 8003b2e:	4620      	mov	r0, r4
 8003b30:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003b34:	3a30      	subs	r2, #48	; 0x30
 8003b36:	2a09      	cmp	r2, #9
 8003b38:	d903      	bls.n	8003b42 <_vfiprintf_r+0x1ee>
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d0c5      	beq.n	8003aca <_vfiprintf_r+0x176>
 8003b3e:	9105      	str	r1, [sp, #20]
 8003b40:	e7c3      	b.n	8003aca <_vfiprintf_r+0x176>
 8003b42:	fb0c 2101 	mla	r1, ip, r1, r2
 8003b46:	4604      	mov	r4, r0
 8003b48:	2301      	movs	r3, #1
 8003b4a:	e7f0      	b.n	8003b2e <_vfiprintf_r+0x1da>
 8003b4c:	ab03      	add	r3, sp, #12
 8003b4e:	9300      	str	r3, [sp, #0]
 8003b50:	462a      	mov	r2, r5
 8003b52:	4b16      	ldr	r3, [pc, #88]	; (8003bac <_vfiprintf_r+0x258>)
 8003b54:	a904      	add	r1, sp, #16
 8003b56:	4630      	mov	r0, r6
 8003b58:	f3af 8000 	nop.w
 8003b5c:	4607      	mov	r7, r0
 8003b5e:	1c78      	adds	r0, r7, #1
 8003b60:	d1d6      	bne.n	8003b10 <_vfiprintf_r+0x1bc>
 8003b62:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003b64:	07d9      	lsls	r1, r3, #31
 8003b66:	d405      	bmi.n	8003b74 <_vfiprintf_r+0x220>
 8003b68:	89ab      	ldrh	r3, [r5, #12]
 8003b6a:	059a      	lsls	r2, r3, #22
 8003b6c:	d402      	bmi.n	8003b74 <_vfiprintf_r+0x220>
 8003b6e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003b70:	f7ff fd0f 	bl	8003592 <__retarget_lock_release_recursive>
 8003b74:	89ab      	ldrh	r3, [r5, #12]
 8003b76:	065b      	lsls	r3, r3, #25
 8003b78:	f53f af12 	bmi.w	80039a0 <_vfiprintf_r+0x4c>
 8003b7c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003b7e:	e711      	b.n	80039a4 <_vfiprintf_r+0x50>
 8003b80:	ab03      	add	r3, sp, #12
 8003b82:	9300      	str	r3, [sp, #0]
 8003b84:	462a      	mov	r2, r5
 8003b86:	4b09      	ldr	r3, [pc, #36]	; (8003bac <_vfiprintf_r+0x258>)
 8003b88:	a904      	add	r1, sp, #16
 8003b8a:	4630      	mov	r0, r6
 8003b8c:	f000 f880 	bl	8003c90 <_printf_i>
 8003b90:	e7e4      	b.n	8003b5c <_vfiprintf_r+0x208>
 8003b92:	bf00      	nop
 8003b94:	080046fc 	.word	0x080046fc
 8003b98:	0800471c 	.word	0x0800471c
 8003b9c:	080046dc 	.word	0x080046dc
 8003ba0:	0800473c 	.word	0x0800473c
 8003ba4:	08004746 	.word	0x08004746
 8003ba8:	00000000 	.word	0x00000000
 8003bac:	0800392f 	.word	0x0800392f
 8003bb0:	08004742 	.word	0x08004742

08003bb4 <_printf_common>:
 8003bb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003bb8:	4616      	mov	r6, r2
 8003bba:	4699      	mov	r9, r3
 8003bbc:	688a      	ldr	r2, [r1, #8]
 8003bbe:	690b      	ldr	r3, [r1, #16]
 8003bc0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003bc4:	4293      	cmp	r3, r2
 8003bc6:	bfb8      	it	lt
 8003bc8:	4613      	movlt	r3, r2
 8003bca:	6033      	str	r3, [r6, #0]
 8003bcc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003bd0:	4607      	mov	r7, r0
 8003bd2:	460c      	mov	r4, r1
 8003bd4:	b10a      	cbz	r2, 8003bda <_printf_common+0x26>
 8003bd6:	3301      	adds	r3, #1
 8003bd8:	6033      	str	r3, [r6, #0]
 8003bda:	6823      	ldr	r3, [r4, #0]
 8003bdc:	0699      	lsls	r1, r3, #26
 8003bde:	bf42      	ittt	mi
 8003be0:	6833      	ldrmi	r3, [r6, #0]
 8003be2:	3302      	addmi	r3, #2
 8003be4:	6033      	strmi	r3, [r6, #0]
 8003be6:	6825      	ldr	r5, [r4, #0]
 8003be8:	f015 0506 	ands.w	r5, r5, #6
 8003bec:	d106      	bne.n	8003bfc <_printf_common+0x48>
 8003bee:	f104 0a19 	add.w	sl, r4, #25
 8003bf2:	68e3      	ldr	r3, [r4, #12]
 8003bf4:	6832      	ldr	r2, [r6, #0]
 8003bf6:	1a9b      	subs	r3, r3, r2
 8003bf8:	42ab      	cmp	r3, r5
 8003bfa:	dc26      	bgt.n	8003c4a <_printf_common+0x96>
 8003bfc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003c00:	1e13      	subs	r3, r2, #0
 8003c02:	6822      	ldr	r2, [r4, #0]
 8003c04:	bf18      	it	ne
 8003c06:	2301      	movne	r3, #1
 8003c08:	0692      	lsls	r2, r2, #26
 8003c0a:	d42b      	bmi.n	8003c64 <_printf_common+0xb0>
 8003c0c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003c10:	4649      	mov	r1, r9
 8003c12:	4638      	mov	r0, r7
 8003c14:	47c0      	blx	r8
 8003c16:	3001      	adds	r0, #1
 8003c18:	d01e      	beq.n	8003c58 <_printf_common+0xa4>
 8003c1a:	6823      	ldr	r3, [r4, #0]
 8003c1c:	68e5      	ldr	r5, [r4, #12]
 8003c1e:	6832      	ldr	r2, [r6, #0]
 8003c20:	f003 0306 	and.w	r3, r3, #6
 8003c24:	2b04      	cmp	r3, #4
 8003c26:	bf08      	it	eq
 8003c28:	1aad      	subeq	r5, r5, r2
 8003c2a:	68a3      	ldr	r3, [r4, #8]
 8003c2c:	6922      	ldr	r2, [r4, #16]
 8003c2e:	bf0c      	ite	eq
 8003c30:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003c34:	2500      	movne	r5, #0
 8003c36:	4293      	cmp	r3, r2
 8003c38:	bfc4      	itt	gt
 8003c3a:	1a9b      	subgt	r3, r3, r2
 8003c3c:	18ed      	addgt	r5, r5, r3
 8003c3e:	2600      	movs	r6, #0
 8003c40:	341a      	adds	r4, #26
 8003c42:	42b5      	cmp	r5, r6
 8003c44:	d11a      	bne.n	8003c7c <_printf_common+0xc8>
 8003c46:	2000      	movs	r0, #0
 8003c48:	e008      	b.n	8003c5c <_printf_common+0xa8>
 8003c4a:	2301      	movs	r3, #1
 8003c4c:	4652      	mov	r2, sl
 8003c4e:	4649      	mov	r1, r9
 8003c50:	4638      	mov	r0, r7
 8003c52:	47c0      	blx	r8
 8003c54:	3001      	adds	r0, #1
 8003c56:	d103      	bne.n	8003c60 <_printf_common+0xac>
 8003c58:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003c5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003c60:	3501      	adds	r5, #1
 8003c62:	e7c6      	b.n	8003bf2 <_printf_common+0x3e>
 8003c64:	18e1      	adds	r1, r4, r3
 8003c66:	1c5a      	adds	r2, r3, #1
 8003c68:	2030      	movs	r0, #48	; 0x30
 8003c6a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003c6e:	4422      	add	r2, r4
 8003c70:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003c74:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003c78:	3302      	adds	r3, #2
 8003c7a:	e7c7      	b.n	8003c0c <_printf_common+0x58>
 8003c7c:	2301      	movs	r3, #1
 8003c7e:	4622      	mov	r2, r4
 8003c80:	4649      	mov	r1, r9
 8003c82:	4638      	mov	r0, r7
 8003c84:	47c0      	blx	r8
 8003c86:	3001      	adds	r0, #1
 8003c88:	d0e6      	beq.n	8003c58 <_printf_common+0xa4>
 8003c8a:	3601      	adds	r6, #1
 8003c8c:	e7d9      	b.n	8003c42 <_printf_common+0x8e>
	...

08003c90 <_printf_i>:
 8003c90:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003c94:	460c      	mov	r4, r1
 8003c96:	4691      	mov	r9, r2
 8003c98:	7e27      	ldrb	r7, [r4, #24]
 8003c9a:	990c      	ldr	r1, [sp, #48]	; 0x30
 8003c9c:	2f78      	cmp	r7, #120	; 0x78
 8003c9e:	4680      	mov	r8, r0
 8003ca0:	469a      	mov	sl, r3
 8003ca2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003ca6:	d807      	bhi.n	8003cb8 <_printf_i+0x28>
 8003ca8:	2f62      	cmp	r7, #98	; 0x62
 8003caa:	d80a      	bhi.n	8003cc2 <_printf_i+0x32>
 8003cac:	2f00      	cmp	r7, #0
 8003cae:	f000 80d8 	beq.w	8003e62 <_printf_i+0x1d2>
 8003cb2:	2f58      	cmp	r7, #88	; 0x58
 8003cb4:	f000 80a3 	beq.w	8003dfe <_printf_i+0x16e>
 8003cb8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003cbc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003cc0:	e03a      	b.n	8003d38 <_printf_i+0xa8>
 8003cc2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003cc6:	2b15      	cmp	r3, #21
 8003cc8:	d8f6      	bhi.n	8003cb8 <_printf_i+0x28>
 8003cca:	a001      	add	r0, pc, #4	; (adr r0, 8003cd0 <_printf_i+0x40>)
 8003ccc:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8003cd0:	08003d29 	.word	0x08003d29
 8003cd4:	08003d3d 	.word	0x08003d3d
 8003cd8:	08003cb9 	.word	0x08003cb9
 8003cdc:	08003cb9 	.word	0x08003cb9
 8003ce0:	08003cb9 	.word	0x08003cb9
 8003ce4:	08003cb9 	.word	0x08003cb9
 8003ce8:	08003d3d 	.word	0x08003d3d
 8003cec:	08003cb9 	.word	0x08003cb9
 8003cf0:	08003cb9 	.word	0x08003cb9
 8003cf4:	08003cb9 	.word	0x08003cb9
 8003cf8:	08003cb9 	.word	0x08003cb9
 8003cfc:	08003e49 	.word	0x08003e49
 8003d00:	08003d6d 	.word	0x08003d6d
 8003d04:	08003e2b 	.word	0x08003e2b
 8003d08:	08003cb9 	.word	0x08003cb9
 8003d0c:	08003cb9 	.word	0x08003cb9
 8003d10:	08003e6b 	.word	0x08003e6b
 8003d14:	08003cb9 	.word	0x08003cb9
 8003d18:	08003d6d 	.word	0x08003d6d
 8003d1c:	08003cb9 	.word	0x08003cb9
 8003d20:	08003cb9 	.word	0x08003cb9
 8003d24:	08003e33 	.word	0x08003e33
 8003d28:	680b      	ldr	r3, [r1, #0]
 8003d2a:	1d1a      	adds	r2, r3, #4
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	600a      	str	r2, [r1, #0]
 8003d30:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003d34:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003d38:	2301      	movs	r3, #1
 8003d3a:	e0a3      	b.n	8003e84 <_printf_i+0x1f4>
 8003d3c:	6825      	ldr	r5, [r4, #0]
 8003d3e:	6808      	ldr	r0, [r1, #0]
 8003d40:	062e      	lsls	r6, r5, #24
 8003d42:	f100 0304 	add.w	r3, r0, #4
 8003d46:	d50a      	bpl.n	8003d5e <_printf_i+0xce>
 8003d48:	6805      	ldr	r5, [r0, #0]
 8003d4a:	600b      	str	r3, [r1, #0]
 8003d4c:	2d00      	cmp	r5, #0
 8003d4e:	da03      	bge.n	8003d58 <_printf_i+0xc8>
 8003d50:	232d      	movs	r3, #45	; 0x2d
 8003d52:	426d      	negs	r5, r5
 8003d54:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003d58:	485e      	ldr	r0, [pc, #376]	; (8003ed4 <_printf_i+0x244>)
 8003d5a:	230a      	movs	r3, #10
 8003d5c:	e019      	b.n	8003d92 <_printf_i+0x102>
 8003d5e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8003d62:	6805      	ldr	r5, [r0, #0]
 8003d64:	600b      	str	r3, [r1, #0]
 8003d66:	bf18      	it	ne
 8003d68:	b22d      	sxthne	r5, r5
 8003d6a:	e7ef      	b.n	8003d4c <_printf_i+0xbc>
 8003d6c:	680b      	ldr	r3, [r1, #0]
 8003d6e:	6825      	ldr	r5, [r4, #0]
 8003d70:	1d18      	adds	r0, r3, #4
 8003d72:	6008      	str	r0, [r1, #0]
 8003d74:	0628      	lsls	r0, r5, #24
 8003d76:	d501      	bpl.n	8003d7c <_printf_i+0xec>
 8003d78:	681d      	ldr	r5, [r3, #0]
 8003d7a:	e002      	b.n	8003d82 <_printf_i+0xf2>
 8003d7c:	0669      	lsls	r1, r5, #25
 8003d7e:	d5fb      	bpl.n	8003d78 <_printf_i+0xe8>
 8003d80:	881d      	ldrh	r5, [r3, #0]
 8003d82:	4854      	ldr	r0, [pc, #336]	; (8003ed4 <_printf_i+0x244>)
 8003d84:	2f6f      	cmp	r7, #111	; 0x6f
 8003d86:	bf0c      	ite	eq
 8003d88:	2308      	moveq	r3, #8
 8003d8a:	230a      	movne	r3, #10
 8003d8c:	2100      	movs	r1, #0
 8003d8e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003d92:	6866      	ldr	r6, [r4, #4]
 8003d94:	60a6      	str	r6, [r4, #8]
 8003d96:	2e00      	cmp	r6, #0
 8003d98:	bfa2      	ittt	ge
 8003d9a:	6821      	ldrge	r1, [r4, #0]
 8003d9c:	f021 0104 	bicge.w	r1, r1, #4
 8003da0:	6021      	strge	r1, [r4, #0]
 8003da2:	b90d      	cbnz	r5, 8003da8 <_printf_i+0x118>
 8003da4:	2e00      	cmp	r6, #0
 8003da6:	d04d      	beq.n	8003e44 <_printf_i+0x1b4>
 8003da8:	4616      	mov	r6, r2
 8003daa:	fbb5 f1f3 	udiv	r1, r5, r3
 8003dae:	fb03 5711 	mls	r7, r3, r1, r5
 8003db2:	5dc7      	ldrb	r7, [r0, r7]
 8003db4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003db8:	462f      	mov	r7, r5
 8003dba:	42bb      	cmp	r3, r7
 8003dbc:	460d      	mov	r5, r1
 8003dbe:	d9f4      	bls.n	8003daa <_printf_i+0x11a>
 8003dc0:	2b08      	cmp	r3, #8
 8003dc2:	d10b      	bne.n	8003ddc <_printf_i+0x14c>
 8003dc4:	6823      	ldr	r3, [r4, #0]
 8003dc6:	07df      	lsls	r7, r3, #31
 8003dc8:	d508      	bpl.n	8003ddc <_printf_i+0x14c>
 8003dca:	6923      	ldr	r3, [r4, #16]
 8003dcc:	6861      	ldr	r1, [r4, #4]
 8003dce:	4299      	cmp	r1, r3
 8003dd0:	bfde      	ittt	le
 8003dd2:	2330      	movle	r3, #48	; 0x30
 8003dd4:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003dd8:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8003ddc:	1b92      	subs	r2, r2, r6
 8003dde:	6122      	str	r2, [r4, #16]
 8003de0:	f8cd a000 	str.w	sl, [sp]
 8003de4:	464b      	mov	r3, r9
 8003de6:	aa03      	add	r2, sp, #12
 8003de8:	4621      	mov	r1, r4
 8003dea:	4640      	mov	r0, r8
 8003dec:	f7ff fee2 	bl	8003bb4 <_printf_common>
 8003df0:	3001      	adds	r0, #1
 8003df2:	d14c      	bne.n	8003e8e <_printf_i+0x1fe>
 8003df4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003df8:	b004      	add	sp, #16
 8003dfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003dfe:	4835      	ldr	r0, [pc, #212]	; (8003ed4 <_printf_i+0x244>)
 8003e00:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003e04:	6823      	ldr	r3, [r4, #0]
 8003e06:	680e      	ldr	r6, [r1, #0]
 8003e08:	061f      	lsls	r7, r3, #24
 8003e0a:	f856 5b04 	ldr.w	r5, [r6], #4
 8003e0e:	600e      	str	r6, [r1, #0]
 8003e10:	d514      	bpl.n	8003e3c <_printf_i+0x1ac>
 8003e12:	07d9      	lsls	r1, r3, #31
 8003e14:	bf44      	itt	mi
 8003e16:	f043 0320 	orrmi.w	r3, r3, #32
 8003e1a:	6023      	strmi	r3, [r4, #0]
 8003e1c:	b91d      	cbnz	r5, 8003e26 <_printf_i+0x196>
 8003e1e:	6823      	ldr	r3, [r4, #0]
 8003e20:	f023 0320 	bic.w	r3, r3, #32
 8003e24:	6023      	str	r3, [r4, #0]
 8003e26:	2310      	movs	r3, #16
 8003e28:	e7b0      	b.n	8003d8c <_printf_i+0xfc>
 8003e2a:	6823      	ldr	r3, [r4, #0]
 8003e2c:	f043 0320 	orr.w	r3, r3, #32
 8003e30:	6023      	str	r3, [r4, #0]
 8003e32:	2378      	movs	r3, #120	; 0x78
 8003e34:	4828      	ldr	r0, [pc, #160]	; (8003ed8 <_printf_i+0x248>)
 8003e36:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003e3a:	e7e3      	b.n	8003e04 <_printf_i+0x174>
 8003e3c:	065e      	lsls	r6, r3, #25
 8003e3e:	bf48      	it	mi
 8003e40:	b2ad      	uxthmi	r5, r5
 8003e42:	e7e6      	b.n	8003e12 <_printf_i+0x182>
 8003e44:	4616      	mov	r6, r2
 8003e46:	e7bb      	b.n	8003dc0 <_printf_i+0x130>
 8003e48:	680b      	ldr	r3, [r1, #0]
 8003e4a:	6826      	ldr	r6, [r4, #0]
 8003e4c:	6960      	ldr	r0, [r4, #20]
 8003e4e:	1d1d      	adds	r5, r3, #4
 8003e50:	600d      	str	r5, [r1, #0]
 8003e52:	0635      	lsls	r5, r6, #24
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	d501      	bpl.n	8003e5c <_printf_i+0x1cc>
 8003e58:	6018      	str	r0, [r3, #0]
 8003e5a:	e002      	b.n	8003e62 <_printf_i+0x1d2>
 8003e5c:	0671      	lsls	r1, r6, #25
 8003e5e:	d5fb      	bpl.n	8003e58 <_printf_i+0x1c8>
 8003e60:	8018      	strh	r0, [r3, #0]
 8003e62:	2300      	movs	r3, #0
 8003e64:	6123      	str	r3, [r4, #16]
 8003e66:	4616      	mov	r6, r2
 8003e68:	e7ba      	b.n	8003de0 <_printf_i+0x150>
 8003e6a:	680b      	ldr	r3, [r1, #0]
 8003e6c:	1d1a      	adds	r2, r3, #4
 8003e6e:	600a      	str	r2, [r1, #0]
 8003e70:	681e      	ldr	r6, [r3, #0]
 8003e72:	6862      	ldr	r2, [r4, #4]
 8003e74:	2100      	movs	r1, #0
 8003e76:	4630      	mov	r0, r6
 8003e78:	f7fc f9c2 	bl	8000200 <memchr>
 8003e7c:	b108      	cbz	r0, 8003e82 <_printf_i+0x1f2>
 8003e7e:	1b80      	subs	r0, r0, r6
 8003e80:	6060      	str	r0, [r4, #4]
 8003e82:	6863      	ldr	r3, [r4, #4]
 8003e84:	6123      	str	r3, [r4, #16]
 8003e86:	2300      	movs	r3, #0
 8003e88:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003e8c:	e7a8      	b.n	8003de0 <_printf_i+0x150>
 8003e8e:	6923      	ldr	r3, [r4, #16]
 8003e90:	4632      	mov	r2, r6
 8003e92:	4649      	mov	r1, r9
 8003e94:	4640      	mov	r0, r8
 8003e96:	47d0      	blx	sl
 8003e98:	3001      	adds	r0, #1
 8003e9a:	d0ab      	beq.n	8003df4 <_printf_i+0x164>
 8003e9c:	6823      	ldr	r3, [r4, #0]
 8003e9e:	079b      	lsls	r3, r3, #30
 8003ea0:	d413      	bmi.n	8003eca <_printf_i+0x23a>
 8003ea2:	68e0      	ldr	r0, [r4, #12]
 8003ea4:	9b03      	ldr	r3, [sp, #12]
 8003ea6:	4298      	cmp	r0, r3
 8003ea8:	bfb8      	it	lt
 8003eaa:	4618      	movlt	r0, r3
 8003eac:	e7a4      	b.n	8003df8 <_printf_i+0x168>
 8003eae:	2301      	movs	r3, #1
 8003eb0:	4632      	mov	r2, r6
 8003eb2:	4649      	mov	r1, r9
 8003eb4:	4640      	mov	r0, r8
 8003eb6:	47d0      	blx	sl
 8003eb8:	3001      	adds	r0, #1
 8003eba:	d09b      	beq.n	8003df4 <_printf_i+0x164>
 8003ebc:	3501      	adds	r5, #1
 8003ebe:	68e3      	ldr	r3, [r4, #12]
 8003ec0:	9903      	ldr	r1, [sp, #12]
 8003ec2:	1a5b      	subs	r3, r3, r1
 8003ec4:	42ab      	cmp	r3, r5
 8003ec6:	dcf2      	bgt.n	8003eae <_printf_i+0x21e>
 8003ec8:	e7eb      	b.n	8003ea2 <_printf_i+0x212>
 8003eca:	2500      	movs	r5, #0
 8003ecc:	f104 0619 	add.w	r6, r4, #25
 8003ed0:	e7f5      	b.n	8003ebe <_printf_i+0x22e>
 8003ed2:	bf00      	nop
 8003ed4:	0800474d 	.word	0x0800474d
 8003ed8:	0800475e 	.word	0x0800475e

08003edc <_sbrk_r>:
 8003edc:	b538      	push	{r3, r4, r5, lr}
 8003ede:	4d06      	ldr	r5, [pc, #24]	; (8003ef8 <_sbrk_r+0x1c>)
 8003ee0:	2300      	movs	r3, #0
 8003ee2:	4604      	mov	r4, r0
 8003ee4:	4608      	mov	r0, r1
 8003ee6:	602b      	str	r3, [r5, #0]
 8003ee8:	f7fd fa7e 	bl	80013e8 <_sbrk>
 8003eec:	1c43      	adds	r3, r0, #1
 8003eee:	d102      	bne.n	8003ef6 <_sbrk_r+0x1a>
 8003ef0:	682b      	ldr	r3, [r5, #0]
 8003ef2:	b103      	cbz	r3, 8003ef6 <_sbrk_r+0x1a>
 8003ef4:	6023      	str	r3, [r4, #0]
 8003ef6:	bd38      	pop	{r3, r4, r5, pc}
 8003ef8:	20000db0 	.word	0x20000db0

08003efc <__sread>:
 8003efc:	b510      	push	{r4, lr}
 8003efe:	460c      	mov	r4, r1
 8003f00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003f04:	f000 fb02 	bl	800450c <_read_r>
 8003f08:	2800      	cmp	r0, #0
 8003f0a:	bfab      	itete	ge
 8003f0c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003f0e:	89a3      	ldrhlt	r3, [r4, #12]
 8003f10:	181b      	addge	r3, r3, r0
 8003f12:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003f16:	bfac      	ite	ge
 8003f18:	6563      	strge	r3, [r4, #84]	; 0x54
 8003f1a:	81a3      	strhlt	r3, [r4, #12]
 8003f1c:	bd10      	pop	{r4, pc}

08003f1e <__swrite>:
 8003f1e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003f22:	461f      	mov	r7, r3
 8003f24:	898b      	ldrh	r3, [r1, #12]
 8003f26:	05db      	lsls	r3, r3, #23
 8003f28:	4605      	mov	r5, r0
 8003f2a:	460c      	mov	r4, r1
 8003f2c:	4616      	mov	r6, r2
 8003f2e:	d505      	bpl.n	8003f3c <__swrite+0x1e>
 8003f30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003f34:	2302      	movs	r3, #2
 8003f36:	2200      	movs	r2, #0
 8003f38:	f000 f9c8 	bl	80042cc <_lseek_r>
 8003f3c:	89a3      	ldrh	r3, [r4, #12]
 8003f3e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003f42:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003f46:	81a3      	strh	r3, [r4, #12]
 8003f48:	4632      	mov	r2, r6
 8003f4a:	463b      	mov	r3, r7
 8003f4c:	4628      	mov	r0, r5
 8003f4e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003f52:	f000 b869 	b.w	8004028 <_write_r>

08003f56 <__sseek>:
 8003f56:	b510      	push	{r4, lr}
 8003f58:	460c      	mov	r4, r1
 8003f5a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003f5e:	f000 f9b5 	bl	80042cc <_lseek_r>
 8003f62:	1c43      	adds	r3, r0, #1
 8003f64:	89a3      	ldrh	r3, [r4, #12]
 8003f66:	bf15      	itete	ne
 8003f68:	6560      	strne	r0, [r4, #84]	; 0x54
 8003f6a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003f6e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003f72:	81a3      	strheq	r3, [r4, #12]
 8003f74:	bf18      	it	ne
 8003f76:	81a3      	strhne	r3, [r4, #12]
 8003f78:	bd10      	pop	{r4, pc}

08003f7a <__sclose>:
 8003f7a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003f7e:	f000 b8d3 	b.w	8004128 <_close_r>
	...

08003f84 <__swbuf_r>:
 8003f84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f86:	460e      	mov	r6, r1
 8003f88:	4614      	mov	r4, r2
 8003f8a:	4605      	mov	r5, r0
 8003f8c:	b118      	cbz	r0, 8003f96 <__swbuf_r+0x12>
 8003f8e:	6983      	ldr	r3, [r0, #24]
 8003f90:	b90b      	cbnz	r3, 8003f96 <__swbuf_r+0x12>
 8003f92:	f7ff fa5f 	bl	8003454 <__sinit>
 8003f96:	4b21      	ldr	r3, [pc, #132]	; (800401c <__swbuf_r+0x98>)
 8003f98:	429c      	cmp	r4, r3
 8003f9a:	d12b      	bne.n	8003ff4 <__swbuf_r+0x70>
 8003f9c:	686c      	ldr	r4, [r5, #4]
 8003f9e:	69a3      	ldr	r3, [r4, #24]
 8003fa0:	60a3      	str	r3, [r4, #8]
 8003fa2:	89a3      	ldrh	r3, [r4, #12]
 8003fa4:	071a      	lsls	r2, r3, #28
 8003fa6:	d52f      	bpl.n	8004008 <__swbuf_r+0x84>
 8003fa8:	6923      	ldr	r3, [r4, #16]
 8003faa:	b36b      	cbz	r3, 8004008 <__swbuf_r+0x84>
 8003fac:	6923      	ldr	r3, [r4, #16]
 8003fae:	6820      	ldr	r0, [r4, #0]
 8003fb0:	1ac0      	subs	r0, r0, r3
 8003fb2:	6963      	ldr	r3, [r4, #20]
 8003fb4:	b2f6      	uxtb	r6, r6
 8003fb6:	4283      	cmp	r3, r0
 8003fb8:	4637      	mov	r7, r6
 8003fba:	dc04      	bgt.n	8003fc6 <__swbuf_r+0x42>
 8003fbc:	4621      	mov	r1, r4
 8003fbe:	4628      	mov	r0, r5
 8003fc0:	f000 f948 	bl	8004254 <_fflush_r>
 8003fc4:	bb30      	cbnz	r0, 8004014 <__swbuf_r+0x90>
 8003fc6:	68a3      	ldr	r3, [r4, #8]
 8003fc8:	3b01      	subs	r3, #1
 8003fca:	60a3      	str	r3, [r4, #8]
 8003fcc:	6823      	ldr	r3, [r4, #0]
 8003fce:	1c5a      	adds	r2, r3, #1
 8003fd0:	6022      	str	r2, [r4, #0]
 8003fd2:	701e      	strb	r6, [r3, #0]
 8003fd4:	6963      	ldr	r3, [r4, #20]
 8003fd6:	3001      	adds	r0, #1
 8003fd8:	4283      	cmp	r3, r0
 8003fda:	d004      	beq.n	8003fe6 <__swbuf_r+0x62>
 8003fdc:	89a3      	ldrh	r3, [r4, #12]
 8003fde:	07db      	lsls	r3, r3, #31
 8003fe0:	d506      	bpl.n	8003ff0 <__swbuf_r+0x6c>
 8003fe2:	2e0a      	cmp	r6, #10
 8003fe4:	d104      	bne.n	8003ff0 <__swbuf_r+0x6c>
 8003fe6:	4621      	mov	r1, r4
 8003fe8:	4628      	mov	r0, r5
 8003fea:	f000 f933 	bl	8004254 <_fflush_r>
 8003fee:	b988      	cbnz	r0, 8004014 <__swbuf_r+0x90>
 8003ff0:	4638      	mov	r0, r7
 8003ff2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003ff4:	4b0a      	ldr	r3, [pc, #40]	; (8004020 <__swbuf_r+0x9c>)
 8003ff6:	429c      	cmp	r4, r3
 8003ff8:	d101      	bne.n	8003ffe <__swbuf_r+0x7a>
 8003ffa:	68ac      	ldr	r4, [r5, #8]
 8003ffc:	e7cf      	b.n	8003f9e <__swbuf_r+0x1a>
 8003ffe:	4b09      	ldr	r3, [pc, #36]	; (8004024 <__swbuf_r+0xa0>)
 8004000:	429c      	cmp	r4, r3
 8004002:	bf08      	it	eq
 8004004:	68ec      	ldreq	r4, [r5, #12]
 8004006:	e7ca      	b.n	8003f9e <__swbuf_r+0x1a>
 8004008:	4621      	mov	r1, r4
 800400a:	4628      	mov	r0, r5
 800400c:	f000 f81e 	bl	800404c <__swsetup_r>
 8004010:	2800      	cmp	r0, #0
 8004012:	d0cb      	beq.n	8003fac <__swbuf_r+0x28>
 8004014:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8004018:	e7ea      	b.n	8003ff0 <__swbuf_r+0x6c>
 800401a:	bf00      	nop
 800401c:	080046fc 	.word	0x080046fc
 8004020:	0800471c 	.word	0x0800471c
 8004024:	080046dc 	.word	0x080046dc

08004028 <_write_r>:
 8004028:	b538      	push	{r3, r4, r5, lr}
 800402a:	4d07      	ldr	r5, [pc, #28]	; (8004048 <_write_r+0x20>)
 800402c:	4604      	mov	r4, r0
 800402e:	4608      	mov	r0, r1
 8004030:	4611      	mov	r1, r2
 8004032:	2200      	movs	r2, #0
 8004034:	602a      	str	r2, [r5, #0]
 8004036:	461a      	mov	r2, r3
 8004038:	f7fd f985 	bl	8001346 <_write>
 800403c:	1c43      	adds	r3, r0, #1
 800403e:	d102      	bne.n	8004046 <_write_r+0x1e>
 8004040:	682b      	ldr	r3, [r5, #0]
 8004042:	b103      	cbz	r3, 8004046 <_write_r+0x1e>
 8004044:	6023      	str	r3, [r4, #0]
 8004046:	bd38      	pop	{r3, r4, r5, pc}
 8004048:	20000db0 	.word	0x20000db0

0800404c <__swsetup_r>:
 800404c:	4b32      	ldr	r3, [pc, #200]	; (8004118 <__swsetup_r+0xcc>)
 800404e:	b570      	push	{r4, r5, r6, lr}
 8004050:	681d      	ldr	r5, [r3, #0]
 8004052:	4606      	mov	r6, r0
 8004054:	460c      	mov	r4, r1
 8004056:	b125      	cbz	r5, 8004062 <__swsetup_r+0x16>
 8004058:	69ab      	ldr	r3, [r5, #24]
 800405a:	b913      	cbnz	r3, 8004062 <__swsetup_r+0x16>
 800405c:	4628      	mov	r0, r5
 800405e:	f7ff f9f9 	bl	8003454 <__sinit>
 8004062:	4b2e      	ldr	r3, [pc, #184]	; (800411c <__swsetup_r+0xd0>)
 8004064:	429c      	cmp	r4, r3
 8004066:	d10f      	bne.n	8004088 <__swsetup_r+0x3c>
 8004068:	686c      	ldr	r4, [r5, #4]
 800406a:	89a3      	ldrh	r3, [r4, #12]
 800406c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004070:	0719      	lsls	r1, r3, #28
 8004072:	d42c      	bmi.n	80040ce <__swsetup_r+0x82>
 8004074:	06dd      	lsls	r5, r3, #27
 8004076:	d411      	bmi.n	800409c <__swsetup_r+0x50>
 8004078:	2309      	movs	r3, #9
 800407a:	6033      	str	r3, [r6, #0]
 800407c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004080:	81a3      	strh	r3, [r4, #12]
 8004082:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004086:	e03e      	b.n	8004106 <__swsetup_r+0xba>
 8004088:	4b25      	ldr	r3, [pc, #148]	; (8004120 <__swsetup_r+0xd4>)
 800408a:	429c      	cmp	r4, r3
 800408c:	d101      	bne.n	8004092 <__swsetup_r+0x46>
 800408e:	68ac      	ldr	r4, [r5, #8]
 8004090:	e7eb      	b.n	800406a <__swsetup_r+0x1e>
 8004092:	4b24      	ldr	r3, [pc, #144]	; (8004124 <__swsetup_r+0xd8>)
 8004094:	429c      	cmp	r4, r3
 8004096:	bf08      	it	eq
 8004098:	68ec      	ldreq	r4, [r5, #12]
 800409a:	e7e6      	b.n	800406a <__swsetup_r+0x1e>
 800409c:	0758      	lsls	r0, r3, #29
 800409e:	d512      	bpl.n	80040c6 <__swsetup_r+0x7a>
 80040a0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80040a2:	b141      	cbz	r1, 80040b6 <__swsetup_r+0x6a>
 80040a4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80040a8:	4299      	cmp	r1, r3
 80040aa:	d002      	beq.n	80040b2 <__swsetup_r+0x66>
 80040ac:	4630      	mov	r0, r6
 80040ae:	f000 f9b7 	bl	8004420 <_free_r>
 80040b2:	2300      	movs	r3, #0
 80040b4:	6363      	str	r3, [r4, #52]	; 0x34
 80040b6:	89a3      	ldrh	r3, [r4, #12]
 80040b8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80040bc:	81a3      	strh	r3, [r4, #12]
 80040be:	2300      	movs	r3, #0
 80040c0:	6063      	str	r3, [r4, #4]
 80040c2:	6923      	ldr	r3, [r4, #16]
 80040c4:	6023      	str	r3, [r4, #0]
 80040c6:	89a3      	ldrh	r3, [r4, #12]
 80040c8:	f043 0308 	orr.w	r3, r3, #8
 80040cc:	81a3      	strh	r3, [r4, #12]
 80040ce:	6923      	ldr	r3, [r4, #16]
 80040d0:	b94b      	cbnz	r3, 80040e6 <__swsetup_r+0x9a>
 80040d2:	89a3      	ldrh	r3, [r4, #12]
 80040d4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80040d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80040dc:	d003      	beq.n	80040e6 <__swsetup_r+0x9a>
 80040de:	4621      	mov	r1, r4
 80040e0:	4630      	mov	r0, r6
 80040e2:	f000 f929 	bl	8004338 <__smakebuf_r>
 80040e6:	89a0      	ldrh	r0, [r4, #12]
 80040e8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80040ec:	f010 0301 	ands.w	r3, r0, #1
 80040f0:	d00a      	beq.n	8004108 <__swsetup_r+0xbc>
 80040f2:	2300      	movs	r3, #0
 80040f4:	60a3      	str	r3, [r4, #8]
 80040f6:	6963      	ldr	r3, [r4, #20]
 80040f8:	425b      	negs	r3, r3
 80040fa:	61a3      	str	r3, [r4, #24]
 80040fc:	6923      	ldr	r3, [r4, #16]
 80040fe:	b943      	cbnz	r3, 8004112 <__swsetup_r+0xc6>
 8004100:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004104:	d1ba      	bne.n	800407c <__swsetup_r+0x30>
 8004106:	bd70      	pop	{r4, r5, r6, pc}
 8004108:	0781      	lsls	r1, r0, #30
 800410a:	bf58      	it	pl
 800410c:	6963      	ldrpl	r3, [r4, #20]
 800410e:	60a3      	str	r3, [r4, #8]
 8004110:	e7f4      	b.n	80040fc <__swsetup_r+0xb0>
 8004112:	2000      	movs	r0, #0
 8004114:	e7f7      	b.n	8004106 <__swsetup_r+0xba>
 8004116:	bf00      	nop
 8004118:	20000080 	.word	0x20000080
 800411c:	080046fc 	.word	0x080046fc
 8004120:	0800471c 	.word	0x0800471c
 8004124:	080046dc 	.word	0x080046dc

08004128 <_close_r>:
 8004128:	b538      	push	{r3, r4, r5, lr}
 800412a:	4d06      	ldr	r5, [pc, #24]	; (8004144 <_close_r+0x1c>)
 800412c:	2300      	movs	r3, #0
 800412e:	4604      	mov	r4, r0
 8004130:	4608      	mov	r0, r1
 8004132:	602b      	str	r3, [r5, #0]
 8004134:	f7fd f923 	bl	800137e <_close>
 8004138:	1c43      	adds	r3, r0, #1
 800413a:	d102      	bne.n	8004142 <_close_r+0x1a>
 800413c:	682b      	ldr	r3, [r5, #0]
 800413e:	b103      	cbz	r3, 8004142 <_close_r+0x1a>
 8004140:	6023      	str	r3, [r4, #0]
 8004142:	bd38      	pop	{r3, r4, r5, pc}
 8004144:	20000db0 	.word	0x20000db0

08004148 <__sflush_r>:
 8004148:	898a      	ldrh	r2, [r1, #12]
 800414a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800414e:	4605      	mov	r5, r0
 8004150:	0710      	lsls	r0, r2, #28
 8004152:	460c      	mov	r4, r1
 8004154:	d458      	bmi.n	8004208 <__sflush_r+0xc0>
 8004156:	684b      	ldr	r3, [r1, #4]
 8004158:	2b00      	cmp	r3, #0
 800415a:	dc05      	bgt.n	8004168 <__sflush_r+0x20>
 800415c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800415e:	2b00      	cmp	r3, #0
 8004160:	dc02      	bgt.n	8004168 <__sflush_r+0x20>
 8004162:	2000      	movs	r0, #0
 8004164:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004168:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800416a:	2e00      	cmp	r6, #0
 800416c:	d0f9      	beq.n	8004162 <__sflush_r+0x1a>
 800416e:	2300      	movs	r3, #0
 8004170:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004174:	682f      	ldr	r7, [r5, #0]
 8004176:	602b      	str	r3, [r5, #0]
 8004178:	d032      	beq.n	80041e0 <__sflush_r+0x98>
 800417a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800417c:	89a3      	ldrh	r3, [r4, #12]
 800417e:	075a      	lsls	r2, r3, #29
 8004180:	d505      	bpl.n	800418e <__sflush_r+0x46>
 8004182:	6863      	ldr	r3, [r4, #4]
 8004184:	1ac0      	subs	r0, r0, r3
 8004186:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004188:	b10b      	cbz	r3, 800418e <__sflush_r+0x46>
 800418a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800418c:	1ac0      	subs	r0, r0, r3
 800418e:	2300      	movs	r3, #0
 8004190:	4602      	mov	r2, r0
 8004192:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004194:	6a21      	ldr	r1, [r4, #32]
 8004196:	4628      	mov	r0, r5
 8004198:	47b0      	blx	r6
 800419a:	1c43      	adds	r3, r0, #1
 800419c:	89a3      	ldrh	r3, [r4, #12]
 800419e:	d106      	bne.n	80041ae <__sflush_r+0x66>
 80041a0:	6829      	ldr	r1, [r5, #0]
 80041a2:	291d      	cmp	r1, #29
 80041a4:	d82c      	bhi.n	8004200 <__sflush_r+0xb8>
 80041a6:	4a2a      	ldr	r2, [pc, #168]	; (8004250 <__sflush_r+0x108>)
 80041a8:	40ca      	lsrs	r2, r1
 80041aa:	07d6      	lsls	r6, r2, #31
 80041ac:	d528      	bpl.n	8004200 <__sflush_r+0xb8>
 80041ae:	2200      	movs	r2, #0
 80041b0:	6062      	str	r2, [r4, #4]
 80041b2:	04d9      	lsls	r1, r3, #19
 80041b4:	6922      	ldr	r2, [r4, #16]
 80041b6:	6022      	str	r2, [r4, #0]
 80041b8:	d504      	bpl.n	80041c4 <__sflush_r+0x7c>
 80041ba:	1c42      	adds	r2, r0, #1
 80041bc:	d101      	bne.n	80041c2 <__sflush_r+0x7a>
 80041be:	682b      	ldr	r3, [r5, #0]
 80041c0:	b903      	cbnz	r3, 80041c4 <__sflush_r+0x7c>
 80041c2:	6560      	str	r0, [r4, #84]	; 0x54
 80041c4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80041c6:	602f      	str	r7, [r5, #0]
 80041c8:	2900      	cmp	r1, #0
 80041ca:	d0ca      	beq.n	8004162 <__sflush_r+0x1a>
 80041cc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80041d0:	4299      	cmp	r1, r3
 80041d2:	d002      	beq.n	80041da <__sflush_r+0x92>
 80041d4:	4628      	mov	r0, r5
 80041d6:	f000 f923 	bl	8004420 <_free_r>
 80041da:	2000      	movs	r0, #0
 80041dc:	6360      	str	r0, [r4, #52]	; 0x34
 80041de:	e7c1      	b.n	8004164 <__sflush_r+0x1c>
 80041e0:	6a21      	ldr	r1, [r4, #32]
 80041e2:	2301      	movs	r3, #1
 80041e4:	4628      	mov	r0, r5
 80041e6:	47b0      	blx	r6
 80041e8:	1c41      	adds	r1, r0, #1
 80041ea:	d1c7      	bne.n	800417c <__sflush_r+0x34>
 80041ec:	682b      	ldr	r3, [r5, #0]
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d0c4      	beq.n	800417c <__sflush_r+0x34>
 80041f2:	2b1d      	cmp	r3, #29
 80041f4:	d001      	beq.n	80041fa <__sflush_r+0xb2>
 80041f6:	2b16      	cmp	r3, #22
 80041f8:	d101      	bne.n	80041fe <__sflush_r+0xb6>
 80041fa:	602f      	str	r7, [r5, #0]
 80041fc:	e7b1      	b.n	8004162 <__sflush_r+0x1a>
 80041fe:	89a3      	ldrh	r3, [r4, #12]
 8004200:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004204:	81a3      	strh	r3, [r4, #12]
 8004206:	e7ad      	b.n	8004164 <__sflush_r+0x1c>
 8004208:	690f      	ldr	r7, [r1, #16]
 800420a:	2f00      	cmp	r7, #0
 800420c:	d0a9      	beq.n	8004162 <__sflush_r+0x1a>
 800420e:	0793      	lsls	r3, r2, #30
 8004210:	680e      	ldr	r6, [r1, #0]
 8004212:	bf08      	it	eq
 8004214:	694b      	ldreq	r3, [r1, #20]
 8004216:	600f      	str	r7, [r1, #0]
 8004218:	bf18      	it	ne
 800421a:	2300      	movne	r3, #0
 800421c:	eba6 0807 	sub.w	r8, r6, r7
 8004220:	608b      	str	r3, [r1, #8]
 8004222:	f1b8 0f00 	cmp.w	r8, #0
 8004226:	dd9c      	ble.n	8004162 <__sflush_r+0x1a>
 8004228:	6a21      	ldr	r1, [r4, #32]
 800422a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800422c:	4643      	mov	r3, r8
 800422e:	463a      	mov	r2, r7
 8004230:	4628      	mov	r0, r5
 8004232:	47b0      	blx	r6
 8004234:	2800      	cmp	r0, #0
 8004236:	dc06      	bgt.n	8004246 <__sflush_r+0xfe>
 8004238:	89a3      	ldrh	r3, [r4, #12]
 800423a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800423e:	81a3      	strh	r3, [r4, #12]
 8004240:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004244:	e78e      	b.n	8004164 <__sflush_r+0x1c>
 8004246:	4407      	add	r7, r0
 8004248:	eba8 0800 	sub.w	r8, r8, r0
 800424c:	e7e9      	b.n	8004222 <__sflush_r+0xda>
 800424e:	bf00      	nop
 8004250:	20400001 	.word	0x20400001

08004254 <_fflush_r>:
 8004254:	b538      	push	{r3, r4, r5, lr}
 8004256:	690b      	ldr	r3, [r1, #16]
 8004258:	4605      	mov	r5, r0
 800425a:	460c      	mov	r4, r1
 800425c:	b913      	cbnz	r3, 8004264 <_fflush_r+0x10>
 800425e:	2500      	movs	r5, #0
 8004260:	4628      	mov	r0, r5
 8004262:	bd38      	pop	{r3, r4, r5, pc}
 8004264:	b118      	cbz	r0, 800426e <_fflush_r+0x1a>
 8004266:	6983      	ldr	r3, [r0, #24]
 8004268:	b90b      	cbnz	r3, 800426e <_fflush_r+0x1a>
 800426a:	f7ff f8f3 	bl	8003454 <__sinit>
 800426e:	4b14      	ldr	r3, [pc, #80]	; (80042c0 <_fflush_r+0x6c>)
 8004270:	429c      	cmp	r4, r3
 8004272:	d11b      	bne.n	80042ac <_fflush_r+0x58>
 8004274:	686c      	ldr	r4, [r5, #4]
 8004276:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800427a:	2b00      	cmp	r3, #0
 800427c:	d0ef      	beq.n	800425e <_fflush_r+0xa>
 800427e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004280:	07d0      	lsls	r0, r2, #31
 8004282:	d404      	bmi.n	800428e <_fflush_r+0x3a>
 8004284:	0599      	lsls	r1, r3, #22
 8004286:	d402      	bmi.n	800428e <_fflush_r+0x3a>
 8004288:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800428a:	f7ff f981 	bl	8003590 <__retarget_lock_acquire_recursive>
 800428e:	4628      	mov	r0, r5
 8004290:	4621      	mov	r1, r4
 8004292:	f7ff ff59 	bl	8004148 <__sflush_r>
 8004296:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004298:	07da      	lsls	r2, r3, #31
 800429a:	4605      	mov	r5, r0
 800429c:	d4e0      	bmi.n	8004260 <_fflush_r+0xc>
 800429e:	89a3      	ldrh	r3, [r4, #12]
 80042a0:	059b      	lsls	r3, r3, #22
 80042a2:	d4dd      	bmi.n	8004260 <_fflush_r+0xc>
 80042a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80042a6:	f7ff f974 	bl	8003592 <__retarget_lock_release_recursive>
 80042aa:	e7d9      	b.n	8004260 <_fflush_r+0xc>
 80042ac:	4b05      	ldr	r3, [pc, #20]	; (80042c4 <_fflush_r+0x70>)
 80042ae:	429c      	cmp	r4, r3
 80042b0:	d101      	bne.n	80042b6 <_fflush_r+0x62>
 80042b2:	68ac      	ldr	r4, [r5, #8]
 80042b4:	e7df      	b.n	8004276 <_fflush_r+0x22>
 80042b6:	4b04      	ldr	r3, [pc, #16]	; (80042c8 <_fflush_r+0x74>)
 80042b8:	429c      	cmp	r4, r3
 80042ba:	bf08      	it	eq
 80042bc:	68ec      	ldreq	r4, [r5, #12]
 80042be:	e7da      	b.n	8004276 <_fflush_r+0x22>
 80042c0:	080046fc 	.word	0x080046fc
 80042c4:	0800471c 	.word	0x0800471c
 80042c8:	080046dc 	.word	0x080046dc

080042cc <_lseek_r>:
 80042cc:	b538      	push	{r3, r4, r5, lr}
 80042ce:	4d07      	ldr	r5, [pc, #28]	; (80042ec <_lseek_r+0x20>)
 80042d0:	4604      	mov	r4, r0
 80042d2:	4608      	mov	r0, r1
 80042d4:	4611      	mov	r1, r2
 80042d6:	2200      	movs	r2, #0
 80042d8:	602a      	str	r2, [r5, #0]
 80042da:	461a      	mov	r2, r3
 80042dc:	f7fd f876 	bl	80013cc <_lseek>
 80042e0:	1c43      	adds	r3, r0, #1
 80042e2:	d102      	bne.n	80042ea <_lseek_r+0x1e>
 80042e4:	682b      	ldr	r3, [r5, #0]
 80042e6:	b103      	cbz	r3, 80042ea <_lseek_r+0x1e>
 80042e8:	6023      	str	r3, [r4, #0]
 80042ea:	bd38      	pop	{r3, r4, r5, pc}
 80042ec:	20000db0 	.word	0x20000db0

080042f0 <__swhatbuf_r>:
 80042f0:	b570      	push	{r4, r5, r6, lr}
 80042f2:	460e      	mov	r6, r1
 80042f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80042f8:	2900      	cmp	r1, #0
 80042fa:	b096      	sub	sp, #88	; 0x58
 80042fc:	4614      	mov	r4, r2
 80042fe:	461d      	mov	r5, r3
 8004300:	da07      	bge.n	8004312 <__swhatbuf_r+0x22>
 8004302:	2300      	movs	r3, #0
 8004304:	602b      	str	r3, [r5, #0]
 8004306:	89b3      	ldrh	r3, [r6, #12]
 8004308:	061a      	lsls	r2, r3, #24
 800430a:	d410      	bmi.n	800432e <__swhatbuf_r+0x3e>
 800430c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004310:	e00e      	b.n	8004330 <__swhatbuf_r+0x40>
 8004312:	466a      	mov	r2, sp
 8004314:	f000 f90c 	bl	8004530 <_fstat_r>
 8004318:	2800      	cmp	r0, #0
 800431a:	dbf2      	blt.n	8004302 <__swhatbuf_r+0x12>
 800431c:	9a01      	ldr	r2, [sp, #4]
 800431e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004322:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004326:	425a      	negs	r2, r3
 8004328:	415a      	adcs	r2, r3
 800432a:	602a      	str	r2, [r5, #0]
 800432c:	e7ee      	b.n	800430c <__swhatbuf_r+0x1c>
 800432e:	2340      	movs	r3, #64	; 0x40
 8004330:	2000      	movs	r0, #0
 8004332:	6023      	str	r3, [r4, #0]
 8004334:	b016      	add	sp, #88	; 0x58
 8004336:	bd70      	pop	{r4, r5, r6, pc}

08004338 <__smakebuf_r>:
 8004338:	898b      	ldrh	r3, [r1, #12]
 800433a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800433c:	079d      	lsls	r5, r3, #30
 800433e:	4606      	mov	r6, r0
 8004340:	460c      	mov	r4, r1
 8004342:	d507      	bpl.n	8004354 <__smakebuf_r+0x1c>
 8004344:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004348:	6023      	str	r3, [r4, #0]
 800434a:	6123      	str	r3, [r4, #16]
 800434c:	2301      	movs	r3, #1
 800434e:	6163      	str	r3, [r4, #20]
 8004350:	b002      	add	sp, #8
 8004352:	bd70      	pop	{r4, r5, r6, pc}
 8004354:	ab01      	add	r3, sp, #4
 8004356:	466a      	mov	r2, sp
 8004358:	f7ff ffca 	bl	80042f0 <__swhatbuf_r>
 800435c:	9900      	ldr	r1, [sp, #0]
 800435e:	4605      	mov	r5, r0
 8004360:	4630      	mov	r0, r6
 8004362:	f7ff f917 	bl	8003594 <_malloc_r>
 8004366:	b948      	cbnz	r0, 800437c <__smakebuf_r+0x44>
 8004368:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800436c:	059a      	lsls	r2, r3, #22
 800436e:	d4ef      	bmi.n	8004350 <__smakebuf_r+0x18>
 8004370:	f023 0303 	bic.w	r3, r3, #3
 8004374:	f043 0302 	orr.w	r3, r3, #2
 8004378:	81a3      	strh	r3, [r4, #12]
 800437a:	e7e3      	b.n	8004344 <__smakebuf_r+0xc>
 800437c:	4b0d      	ldr	r3, [pc, #52]	; (80043b4 <__smakebuf_r+0x7c>)
 800437e:	62b3      	str	r3, [r6, #40]	; 0x28
 8004380:	89a3      	ldrh	r3, [r4, #12]
 8004382:	6020      	str	r0, [r4, #0]
 8004384:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004388:	81a3      	strh	r3, [r4, #12]
 800438a:	9b00      	ldr	r3, [sp, #0]
 800438c:	6163      	str	r3, [r4, #20]
 800438e:	9b01      	ldr	r3, [sp, #4]
 8004390:	6120      	str	r0, [r4, #16]
 8004392:	b15b      	cbz	r3, 80043ac <__smakebuf_r+0x74>
 8004394:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004398:	4630      	mov	r0, r6
 800439a:	f000 f8db 	bl	8004554 <_isatty_r>
 800439e:	b128      	cbz	r0, 80043ac <__smakebuf_r+0x74>
 80043a0:	89a3      	ldrh	r3, [r4, #12]
 80043a2:	f023 0303 	bic.w	r3, r3, #3
 80043a6:	f043 0301 	orr.w	r3, r3, #1
 80043aa:	81a3      	strh	r3, [r4, #12]
 80043ac:	89a0      	ldrh	r0, [r4, #12]
 80043ae:	4305      	orrs	r5, r0
 80043b0:	81a5      	strh	r5, [r4, #12]
 80043b2:	e7cd      	b.n	8004350 <__smakebuf_r+0x18>
 80043b4:	080033ed 	.word	0x080033ed

080043b8 <memcpy>:
 80043b8:	440a      	add	r2, r1
 80043ba:	4291      	cmp	r1, r2
 80043bc:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80043c0:	d100      	bne.n	80043c4 <memcpy+0xc>
 80043c2:	4770      	bx	lr
 80043c4:	b510      	push	{r4, lr}
 80043c6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80043ca:	f803 4f01 	strb.w	r4, [r3, #1]!
 80043ce:	4291      	cmp	r1, r2
 80043d0:	d1f9      	bne.n	80043c6 <memcpy+0xe>
 80043d2:	bd10      	pop	{r4, pc}

080043d4 <memmove>:
 80043d4:	4288      	cmp	r0, r1
 80043d6:	b510      	push	{r4, lr}
 80043d8:	eb01 0402 	add.w	r4, r1, r2
 80043dc:	d902      	bls.n	80043e4 <memmove+0x10>
 80043de:	4284      	cmp	r4, r0
 80043e0:	4623      	mov	r3, r4
 80043e2:	d807      	bhi.n	80043f4 <memmove+0x20>
 80043e4:	1e43      	subs	r3, r0, #1
 80043e6:	42a1      	cmp	r1, r4
 80043e8:	d008      	beq.n	80043fc <memmove+0x28>
 80043ea:	f811 2b01 	ldrb.w	r2, [r1], #1
 80043ee:	f803 2f01 	strb.w	r2, [r3, #1]!
 80043f2:	e7f8      	b.n	80043e6 <memmove+0x12>
 80043f4:	4402      	add	r2, r0
 80043f6:	4601      	mov	r1, r0
 80043f8:	428a      	cmp	r2, r1
 80043fa:	d100      	bne.n	80043fe <memmove+0x2a>
 80043fc:	bd10      	pop	{r4, pc}
 80043fe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004402:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004406:	e7f7      	b.n	80043f8 <memmove+0x24>

08004408 <__malloc_lock>:
 8004408:	4801      	ldr	r0, [pc, #4]	; (8004410 <__malloc_lock+0x8>)
 800440a:	f7ff b8c1 	b.w	8003590 <__retarget_lock_acquire_recursive>
 800440e:	bf00      	nop
 8004410:	20000da8 	.word	0x20000da8

08004414 <__malloc_unlock>:
 8004414:	4801      	ldr	r0, [pc, #4]	; (800441c <__malloc_unlock+0x8>)
 8004416:	f7ff b8bc 	b.w	8003592 <__retarget_lock_release_recursive>
 800441a:	bf00      	nop
 800441c:	20000da8 	.word	0x20000da8

08004420 <_free_r>:
 8004420:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004422:	2900      	cmp	r1, #0
 8004424:	d048      	beq.n	80044b8 <_free_r+0x98>
 8004426:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800442a:	9001      	str	r0, [sp, #4]
 800442c:	2b00      	cmp	r3, #0
 800442e:	f1a1 0404 	sub.w	r4, r1, #4
 8004432:	bfb8      	it	lt
 8004434:	18e4      	addlt	r4, r4, r3
 8004436:	f7ff ffe7 	bl	8004408 <__malloc_lock>
 800443a:	4a20      	ldr	r2, [pc, #128]	; (80044bc <_free_r+0x9c>)
 800443c:	9801      	ldr	r0, [sp, #4]
 800443e:	6813      	ldr	r3, [r2, #0]
 8004440:	4615      	mov	r5, r2
 8004442:	b933      	cbnz	r3, 8004452 <_free_r+0x32>
 8004444:	6063      	str	r3, [r4, #4]
 8004446:	6014      	str	r4, [r2, #0]
 8004448:	b003      	add	sp, #12
 800444a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800444e:	f7ff bfe1 	b.w	8004414 <__malloc_unlock>
 8004452:	42a3      	cmp	r3, r4
 8004454:	d90b      	bls.n	800446e <_free_r+0x4e>
 8004456:	6821      	ldr	r1, [r4, #0]
 8004458:	1862      	adds	r2, r4, r1
 800445a:	4293      	cmp	r3, r2
 800445c:	bf04      	itt	eq
 800445e:	681a      	ldreq	r2, [r3, #0]
 8004460:	685b      	ldreq	r3, [r3, #4]
 8004462:	6063      	str	r3, [r4, #4]
 8004464:	bf04      	itt	eq
 8004466:	1852      	addeq	r2, r2, r1
 8004468:	6022      	streq	r2, [r4, #0]
 800446a:	602c      	str	r4, [r5, #0]
 800446c:	e7ec      	b.n	8004448 <_free_r+0x28>
 800446e:	461a      	mov	r2, r3
 8004470:	685b      	ldr	r3, [r3, #4]
 8004472:	b10b      	cbz	r3, 8004478 <_free_r+0x58>
 8004474:	42a3      	cmp	r3, r4
 8004476:	d9fa      	bls.n	800446e <_free_r+0x4e>
 8004478:	6811      	ldr	r1, [r2, #0]
 800447a:	1855      	adds	r5, r2, r1
 800447c:	42a5      	cmp	r5, r4
 800447e:	d10b      	bne.n	8004498 <_free_r+0x78>
 8004480:	6824      	ldr	r4, [r4, #0]
 8004482:	4421      	add	r1, r4
 8004484:	1854      	adds	r4, r2, r1
 8004486:	42a3      	cmp	r3, r4
 8004488:	6011      	str	r1, [r2, #0]
 800448a:	d1dd      	bne.n	8004448 <_free_r+0x28>
 800448c:	681c      	ldr	r4, [r3, #0]
 800448e:	685b      	ldr	r3, [r3, #4]
 8004490:	6053      	str	r3, [r2, #4]
 8004492:	4421      	add	r1, r4
 8004494:	6011      	str	r1, [r2, #0]
 8004496:	e7d7      	b.n	8004448 <_free_r+0x28>
 8004498:	d902      	bls.n	80044a0 <_free_r+0x80>
 800449a:	230c      	movs	r3, #12
 800449c:	6003      	str	r3, [r0, #0]
 800449e:	e7d3      	b.n	8004448 <_free_r+0x28>
 80044a0:	6825      	ldr	r5, [r4, #0]
 80044a2:	1961      	adds	r1, r4, r5
 80044a4:	428b      	cmp	r3, r1
 80044a6:	bf04      	itt	eq
 80044a8:	6819      	ldreq	r1, [r3, #0]
 80044aa:	685b      	ldreq	r3, [r3, #4]
 80044ac:	6063      	str	r3, [r4, #4]
 80044ae:	bf04      	itt	eq
 80044b0:	1949      	addeq	r1, r1, r5
 80044b2:	6021      	streq	r1, [r4, #0]
 80044b4:	6054      	str	r4, [r2, #4]
 80044b6:	e7c7      	b.n	8004448 <_free_r+0x28>
 80044b8:	b003      	add	sp, #12
 80044ba:	bd30      	pop	{r4, r5, pc}
 80044bc:	20000134 	.word	0x20000134

080044c0 <_realloc_r>:
 80044c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044c2:	4607      	mov	r7, r0
 80044c4:	4614      	mov	r4, r2
 80044c6:	460e      	mov	r6, r1
 80044c8:	b921      	cbnz	r1, 80044d4 <_realloc_r+0x14>
 80044ca:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80044ce:	4611      	mov	r1, r2
 80044d0:	f7ff b860 	b.w	8003594 <_malloc_r>
 80044d4:	b922      	cbnz	r2, 80044e0 <_realloc_r+0x20>
 80044d6:	f7ff ffa3 	bl	8004420 <_free_r>
 80044da:	4625      	mov	r5, r4
 80044dc:	4628      	mov	r0, r5
 80044de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80044e0:	f000 f848 	bl	8004574 <_malloc_usable_size_r>
 80044e4:	42a0      	cmp	r0, r4
 80044e6:	d20f      	bcs.n	8004508 <_realloc_r+0x48>
 80044e8:	4621      	mov	r1, r4
 80044ea:	4638      	mov	r0, r7
 80044ec:	f7ff f852 	bl	8003594 <_malloc_r>
 80044f0:	4605      	mov	r5, r0
 80044f2:	2800      	cmp	r0, #0
 80044f4:	d0f2      	beq.n	80044dc <_realloc_r+0x1c>
 80044f6:	4631      	mov	r1, r6
 80044f8:	4622      	mov	r2, r4
 80044fa:	f7ff ff5d 	bl	80043b8 <memcpy>
 80044fe:	4631      	mov	r1, r6
 8004500:	4638      	mov	r0, r7
 8004502:	f7ff ff8d 	bl	8004420 <_free_r>
 8004506:	e7e9      	b.n	80044dc <_realloc_r+0x1c>
 8004508:	4635      	mov	r5, r6
 800450a:	e7e7      	b.n	80044dc <_realloc_r+0x1c>

0800450c <_read_r>:
 800450c:	b538      	push	{r3, r4, r5, lr}
 800450e:	4d07      	ldr	r5, [pc, #28]	; (800452c <_read_r+0x20>)
 8004510:	4604      	mov	r4, r0
 8004512:	4608      	mov	r0, r1
 8004514:	4611      	mov	r1, r2
 8004516:	2200      	movs	r2, #0
 8004518:	602a      	str	r2, [r5, #0]
 800451a:	461a      	mov	r2, r3
 800451c:	f7fc fef6 	bl	800130c <_read>
 8004520:	1c43      	adds	r3, r0, #1
 8004522:	d102      	bne.n	800452a <_read_r+0x1e>
 8004524:	682b      	ldr	r3, [r5, #0]
 8004526:	b103      	cbz	r3, 800452a <_read_r+0x1e>
 8004528:	6023      	str	r3, [r4, #0]
 800452a:	bd38      	pop	{r3, r4, r5, pc}
 800452c:	20000db0 	.word	0x20000db0

08004530 <_fstat_r>:
 8004530:	b538      	push	{r3, r4, r5, lr}
 8004532:	4d07      	ldr	r5, [pc, #28]	; (8004550 <_fstat_r+0x20>)
 8004534:	2300      	movs	r3, #0
 8004536:	4604      	mov	r4, r0
 8004538:	4608      	mov	r0, r1
 800453a:	4611      	mov	r1, r2
 800453c:	602b      	str	r3, [r5, #0]
 800453e:	f7fc ff2a 	bl	8001396 <_fstat>
 8004542:	1c43      	adds	r3, r0, #1
 8004544:	d102      	bne.n	800454c <_fstat_r+0x1c>
 8004546:	682b      	ldr	r3, [r5, #0]
 8004548:	b103      	cbz	r3, 800454c <_fstat_r+0x1c>
 800454a:	6023      	str	r3, [r4, #0]
 800454c:	bd38      	pop	{r3, r4, r5, pc}
 800454e:	bf00      	nop
 8004550:	20000db0 	.word	0x20000db0

08004554 <_isatty_r>:
 8004554:	b538      	push	{r3, r4, r5, lr}
 8004556:	4d06      	ldr	r5, [pc, #24]	; (8004570 <_isatty_r+0x1c>)
 8004558:	2300      	movs	r3, #0
 800455a:	4604      	mov	r4, r0
 800455c:	4608      	mov	r0, r1
 800455e:	602b      	str	r3, [r5, #0]
 8004560:	f7fc ff29 	bl	80013b6 <_isatty>
 8004564:	1c43      	adds	r3, r0, #1
 8004566:	d102      	bne.n	800456e <_isatty_r+0x1a>
 8004568:	682b      	ldr	r3, [r5, #0]
 800456a:	b103      	cbz	r3, 800456e <_isatty_r+0x1a>
 800456c:	6023      	str	r3, [r4, #0]
 800456e:	bd38      	pop	{r3, r4, r5, pc}
 8004570:	20000db0 	.word	0x20000db0

08004574 <_malloc_usable_size_r>:
 8004574:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004578:	1f18      	subs	r0, r3, #4
 800457a:	2b00      	cmp	r3, #0
 800457c:	bfbc      	itt	lt
 800457e:	580b      	ldrlt	r3, [r1, r0]
 8004580:	18c0      	addlt	r0, r0, r3
 8004582:	4770      	bx	lr

08004584 <_init>:
 8004584:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004586:	bf00      	nop
 8004588:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800458a:	bc08      	pop	{r3}
 800458c:	469e      	mov	lr, r3
 800458e:	4770      	bx	lr

08004590 <_fini>:
 8004590:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004592:	bf00      	nop
 8004594:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004596:	bc08      	pop	{r3}
 8004598:	469e      	mov	lr, r3
 800459a:	4770      	bx	lr
